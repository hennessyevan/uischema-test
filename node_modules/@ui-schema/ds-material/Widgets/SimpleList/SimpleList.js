"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleListWrapper = exports.SimpleListItemBase = exports.SimpleListItem = exports.SimpleListInner = exports.SimpleListBase = exports.SimpleList = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _FormLabel = _interopRequireDefault(require("@material-ui/core/FormLabel"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText");

var _Tooltip = require("@ui-schema/ds-material/Component/Tooltip");

var _ListButton = require("@ui-schema/ds-material/Component/ListButton");

var _Trans = require("@ui-schema/ui-schema/Translate/Trans");

var _immutable = require("immutable");

var _excluded = ["value", "internalValue"];

var SimpleListItemBase = function SimpleListItemBase(_ref) {
  var showValidity = _ref.showValidity,
      schema = _ref.schema,
      schemaKeys = _ref.schemaKeys,
      storeKeys = _ref.storeKeys,
      notDeletable = _ref.notDeletable,
      readOnly = _ref.readOnly,
      required = _ref.required,
      onChange = _ref.onChange,
      level = _ref.level,
      index = _ref.index;
  return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    key: index,
    item: true,
    xs: 12,
    style: {
      display: 'flex'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      flexGrow: 2
    }
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.PluginStack, {
    showValidity: showValidity,
    noGrid: true,
    schema: schema.get('items'),
    parentSchema: schema,
    storeKeys: storeKeys.push(index),
    level: level + 1,
    schemaKeys: schemaKeys === null || schemaKeys === void 0 ? void 0 : schemaKeys.push('items')
  })), !readOnly && !notDeletable ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    onClick: function onClick() {
      onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-delete',
        index: index,
        schema: schema,
        required: required
      });
    },
    size: 'small',
    style: {
      margin: 'auto 6px',
      flexShrink: 0
    }
  }, /*#__PURE__*/_react["default"].createElement(_Tooltip.AccessTooltipIcon, {
    title: /*#__PURE__*/_react["default"].createElement(_Trans.Trans, {
      text: 'labels.remove-entry'
    })
  }, /*#__PURE__*/_react["default"].createElement(_Remove["default"], {
    fontSize: 'inherit',
    style: {
      margin: 2
    }
  }))) : null);
};

exports.SimpleListItemBase = SimpleListItemBase;
var SimpleListItem = (0, _uiSchema.memo)(SimpleListItemBase);
exports.SimpleListItem = SimpleListItem;

var SimpleListInner = function SimpleListInner(_ref2) {
  var schemaKeys = _ref2.schemaKeys,
      storeKeys = _ref2.storeKeys,
      ownKey = _ref2.ownKey,
      schema = _ref2.schema,
      listSize = _ref2.listSize,
      onChange = _ref2.onChange,
      showValidity = _ref2.showValidity,
      valid = _ref2.valid,
      errors = _ref2.errors,
      required = _ref2.required,
      level = _ref2.level,
      widgets = _ref2.widgets,
      btnAddShowLabel = _ref2.btnAddShowLabel,
      btnAddStyle = _ref2.btnAddStyle,
      btnSizeProp = _ref2.btnSize,
      btnVariantProp = _ref2.btnVariant,
      btnColorProp = _ref2.btnColor;
  var btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  var btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  var btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  var notAddable = schema.get('notAddable');
  var notDeletable = schema.get('notDeletable');
  var readOnly = schema.get('readOnly');
  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    container: true,
    spacing: 2
  }, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    item: true,
    xs: 12
  }, /*#__PURE__*/_react["default"].createElement(_FormLabel["default"], {
    component: "legend"
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }))) : null, InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    item: true,
    xs: 12
  }, /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
    schema: schema,
    variant: 'preview',
    openAs: 'embed',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors
  })) : undefined, Array.from(Array(listSize || 0)).map(function (itemVal, i) {
    return /*#__PURE__*/_react["default"].createElement(SimpleListItem, {
      key: i,
      index: i,
      showValidity: showValidity,
      schema: schema,
      storeKeys: storeKeys,
      schemaKeys: schemaKeys,
      btnSize: btnSize,
      level: level,
      notDeletable: notDeletable,
      readOnly: readOnly,
      required: required,
      onChange: onChange
    });
  }), /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    item: true,
    xs: 12
  }, !readOnly && !notAddable ? /*#__PURE__*/_react["default"].createElement(_ListButton.ListButton, {
    onClick: function onClick() {
      onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-add',
        schema: schema,
        required: required
      });
    },
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    showLabel: btnAddShowLabel,
    style: btnAddStyle,
    Icon: _Add["default"],
    title: /*#__PURE__*/_react["default"].createElement(_Trans.Trans, {
      text: 'labels.add-entry',
      context: (0, _immutable.Map)({
        actionLabels: schema.get('tableActionLabels')
      })
    })
  }) : null, /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText
  /* only pass down errors which are not for a specific sub-schema */
  , {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }))));
};

exports.SimpleListInner = SimpleListInner;
var SimpleListBase = (0, _uiSchema.memo)(SimpleListInner);
exports.SimpleListBase = SimpleListBase;

var SimpleListWrapper = function SimpleListWrapper(_ref3) {
  var value = _ref3.value,
      internalValue = _ref3.internalValue,
      props = (0, _objectWithoutProperties2["default"])(_ref3, _excluded);
  return /*#__PURE__*/_react["default"].createElement(SimpleListBase, (0, _extends2["default"])({
    listSize: value === null || value === void 0 ? void 0 : value.size
  }, props));
};

exports.SimpleListWrapper = SimpleListWrapper;
var SimpleList = (0, _uiSchema.extractValue)(SimpleListWrapper);
exports.SimpleList = SimpleList;