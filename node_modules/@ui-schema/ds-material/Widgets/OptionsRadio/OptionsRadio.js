"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionsRadio = void 0;

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _core = require("@material-ui/core");

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText");

var _Translate = require("@ui-schema/ui-schema/Translate");

var OptionsRadio = function OptionsRadio(_ref) {
  var ownKey = _ref.ownKey,
      schema = _ref.schema,
      value = _ref.value,
      _onChange = _ref.onChange,
      storeKeys = _ref.storeKeys,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      required = _ref.required,
      errors = _ref.errors,
      row = _ref.row,
      widgets = _ref.widgets;
  var enumVal = schema.get('enum');
  if (!enumVal) return null;
  var isActive = typeof value !== 'undefined' ? value : schema.get('default') || '';
  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/_react["default"].createElement(_core.FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/_react["default"].createElement(_core.FormLabel, {
    component: "legend",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }), InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
    schema: schema,
    variant: 'icon',
    openAs: 'modal',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors,
    align: 'right',
    dense: true
  }) : undefined), /*#__PURE__*/_react["default"].createElement(_core.RadioGroup, {
    row: row,
    disabled: schema.get('readOnly')
  }, enumVal ? enumVal.map(function (enum_name) {
    return /*#__PURE__*/_react["default"].createElement(_core.FormControlLabel, {
      key: enum_name,
      control: /*#__PURE__*/_react["default"].createElement(_core.Radio, {
        value: enum_name,
        checked: enum_name === isActive,
        onChange: function onChange() {
          return !schema.get('readOnly') && _onChange({
            storeKeys: storeKeys,
            scopes: ['value'],
            type: 'set',
            schema: schema,
            required: required,
            data: {
              value: enum_name
            }
          });
        }
      }),
      label: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
        schema: schema.get('t'),
        text: storeKeys.insert(0, 'widget').concat((0, _immutable.List)(['enum', (0, _Translate.getTranslatableEnum)(enum_name)])).join('.'),
        context: (0, _immutable.Map)({
          'relative': (0, _immutable.List)(['enum', (0, _Translate.getTranslatableEnum)(enum_name)])
        }),
        fallback: (0, _uiSchema.beautifyKey)((0, _Translate.getTranslatableEnum)(enum_name), schema.get('ttEnum'))
      })
    });
  }).valueSeq() : null), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.OptionsRadio = OptionsRadio;