"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextRendererCell = exports.StringRendererCell = exports.NumberRendererCell = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _reactUid = require("react-uid");

var _TransTitle = require("@ui-schema/ui-schema/Translate/TransTitle");

var _schemaTypeIs = require("@ui-schema/ui-schema/Utils/schemaTypeIs");

var _schemaToNative = require("@ui-schema/ui-schema/Utils/schemaToNative");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText");

var _InputBase = _interopRequireDefault(require("@material-ui/core/InputBase"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _convertStringToNumber = require("@ui-schema/ds-material/Utils/convertStringToNumber");

var _Utils = require("@ui-schema/ds-material/Utils");

var _excluded = ["schema"];

var StringRendererCell = function StringRendererCell(_ref) {
  var type = _ref.type,
      multiline = _ref.multiline,
      rows = _ref.rows,
      rowsMax = _ref.rowsMax,
      storeKeys = _ref.storeKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      value = _ref.value,
      _onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      errors = _ref.errors,
      required = _ref.required,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      onKeyUp = _ref.onKeyUp,
      onKeyDown = _ref.onKeyDown,
      _onKeyPress = _ref.onKeyPress,
      _ref$inputProps = _ref.inputProps,
      inputProps = _ref$inputProps === void 0 ? {} : _ref$inputProps,
      customInputRef = _ref.inputRef,
      labelledBy = _ref.labelledBy,
      widgets = _ref.widgets;
  var uid = (0, _reactUid.useUID)(); // todo: this could break law-of-hooks

  var inputRef = customInputRef || _react["default"].useRef();

  var format = schema.get('format');
  var currentRef = inputRef.current;
  inputProps = (0, _schemaToNative.mapSchema)(inputProps, schema);

  if ((0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'number') && typeof inputProps['step'] === 'undefined') {//inputProps['step'] = 'any'
  }

  if (typeof labelledBy === 'string') {
    inputProps['aria-labelledby'] = labelledBy;
  } else {
    inputProps['aria-labelledby'] = 'uis-' + uid;
  }

  if (!inputProps.style) {
    inputProps.style = {};
  }

  var schemaAlign = schema.getIn(['view', 'align']);

  if (!inputProps.style.textAlign && schemaAlign) {
    inputProps.style.textAlign = schemaAlign;
  }

  if (type === 'number') {
    // when a table cell is of type number, it should be aligned right
    if (!inputProps.style.textAlign) {
      inputProps.style.textAlign = 'right';
    }

    if (inputProps.style.textAlign === 'right' && !inputProps.style['MozAppearance']) {
      inputProps.style['MozAppearance'] = 'textfield';
    }
  }

  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !labelledBy ? /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    component: 'span',
    variant: 'srOnly',
    id: inputProps['aria-labelledby']
  }, /*#__PURE__*/_react["default"].createElement(_TransTitle.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })) : null, /*#__PURE__*/_react["default"].createElement(_InputBase["default"], {
    type: format || type,
    disabled: schema.get('readOnly'),
    multiline: multiline,
    required: required,
    error: !valid && showValidity,
    rows: rows,
    inputRef: inputRef,
    rowsMax: rowsMax,
    fullWidth: true,
    margin: schema.getIn(['view', 'margin']),
    value: typeof value === 'string' || typeof value === 'number' ? value : '',
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyPress: function onKeyPress(e) {
      var evt = e.nativeEvent;

      if (!(0, _Utils.forbidInvalidNumber)(evt, schema.get('type'))) {
        _onKeyPress && _onKeyPress(evt);
      }
    },
    style: style,
    onKeyDown: onKeyDown,
    onChange: function onChange(e) {
      var val = e.target.value;
      var schemaType = schema.get('type');
      var newVal = (0, _convertStringToNumber.convertStringToNumber)(val, schemaType);

      if ((0, _schemaTypeIs.schemaTypeIsNumeric)(schemaType) && newVal === '' && e.target.validity.badInput) {
        // forbid saving/deleting of invalid number at all
        return undefined;
      }

      _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'set',
        schema: schema,
        required: required,
        data: {
          value: newVal
        }
      });
    },
    inputProps: inputProps,
    endAdornment: InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
      schema: schema,
      variant: 'icon',
      openAs: 'modal',
      storeKeys: storeKeys,
      valid: valid,
      errors: errors
    }) : undefined
  }), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema,
    browserError: currentRef ? currentRef.validationMessage : ''
  }));
};

exports.StringRendererCell = StringRendererCell;

var TextRendererCell = function TextRendererCell(_ref2) {
  var schema = _ref2.schema,
      props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);
  return /*#__PURE__*/_react["default"].createElement(StringRendererCell, (0, _extends2["default"])({}, props, {
    schema: schema,
    rows: schema.getIn(['view', 'rows']),
    rowsMax: schema.getIn(['view', 'rowsMax']),
    multiline: true
  }));
};

exports.TextRendererCell = TextRendererCell;

var NumberRendererCell = function NumberRendererCell(props) {
  return /*#__PURE__*/_react["default"].createElement(StringRendererCell, (0, _extends2["default"])({}, props, {
    type: 'number'
  }));
};

exports.NumberRendererCell = NumberRendererCell;