"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectMultiBase = exports.SelectMulti = void 0;

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _reactUid = require("react-uid");

var _core = require("@material-ui/core");

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText");

var _sortScalarList = require("@ui-schema/ui-schema/Utils/sortScalarList");

var SelectMultiBase = function SelectMultiBase(_ref) {
  var storeKeys = _ref.storeKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      value = _ref.value,
      _onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      required = _ref.required,
      errors = _ref.errors,
      t = _ref.t;
  var uid = (0, _reactUid.useUID)();
  if (!schema) return null;
  var oneOfValues = schema.getIn(['items', 'oneOf']);
  if (!oneOfValues) return null;
  var currentValue = typeof value !== 'undefined' ? value : schema.get('default') ? (0, _immutable.List)(schema.get('default')) : (0, _immutable.List)();
  return /*#__PURE__*/_react["default"].createElement(_core.FormControl, {
    required: required,
    error: !valid && showValidity,
    fullWidth: true,
    disabled: schema.get('readOnly'),
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined
  }, /*#__PURE__*/_react["default"].createElement(_core.InputLabel, {
    id: 'uis-' + uid
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/_react["default"].createElement(_core.Select, {
    labelId: 'uis-' + uid,
    id: 'uis-' + uid + '-label',
    value: currentValue.toArray(),
    multiple: true,
    renderValue: function renderValue(selected) {
      var sel = selected;
      return sel.map(function (s) {
        s = s + '';
        var oneOfValue = oneOfValues.find(function (oof) {
          return oof.get('const') === s;
        });
        var Translated = t(s, (0, _immutable.Map)({
          relative: (0, _immutable.List)(['title'])
        }), oneOfValue === null || oneOfValue === void 0 ? void 0 : oneOfValue.get('t'));
        return typeof Translated === 'string' || typeof Translated === 'number' ? Translated : (0, _uiSchema.beautifyKey)(s, oneOfValue === null || oneOfValue === void 0 ? void 0 : oneOfValue.get('tt')) + '';
      }).join(', ');
    },
    disabled: schema.get('readOnly'),
    onChange: function onChange(e) {
      return !schema.get('readOnly') && _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'set',
        schema: schema,
        required: required,
        data: {
          value: (0, _sortScalarList.sortScalarList)((0, _immutable.List)(e.target.value))
        }
      });
    }
  }, oneOfValues ? oneOfValues.map(function (oneOfSchema, i) {
    return /*#__PURE__*/_react["default"].createElement(_core.MenuItem, {
      key: oneOfSchema.get('const') + '-' + i,
      value: oneOfSchema.get('const'),
      dense: schema.getIn(['view', 'denseOptions']),
      disabled: oneOfSchema.get('readOnly')
    }, /*#__PURE__*/_react["default"].createElement(_core.Checkbox, {
      checked: currentValue.contains(oneOfSchema.get('const'))
    }), /*#__PURE__*/_react["default"].createElement(_core.ListItemText, {
      primary: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
        schema: oneOfSchema.get('t'),
        text: oneOfSchema.get('title') || oneOfSchema.get('const'),
        context: (0, _immutable.Map)({
          'relative': (0, _immutable.List)(['title'])
        }),
        fallback: oneOfSchema.get('title') || (0, _uiSchema.beautifyKey)(oneOfSchema.get('const'), oneOfSchema.get('tt'))
      })
    }));
  }).valueSeq() : null), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.SelectMultiBase = SelectMultiBase;
var SelectMulti = (0, _uiSchema.extractValue)((0, _uiSchema.memo)(SelectMultiBase));
exports.SelectMulti = SelectMulti;