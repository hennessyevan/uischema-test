"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = void 0;

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _reactUid = require("react-uid");

var _core = require("@material-ui/core");

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText");

var _Translate = require("@ui-schema/ui-schema/Translate");

var Select = function Select(_ref) {
  var storeKeys = _ref.storeKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      value = _ref.value,
      _onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      required = _ref.required,
      errors = _ref.errors,
      t = _ref.t;
  var uid = (0, _reactUid.useUID)();
  if (!schema) return null;
  var enum_val = schema.get('enum');
  if (!enum_val) return null;
  var currentValue = typeof value !== 'undefined' ? value : schema.get('default') || '';
  return /*#__PURE__*/_react["default"].createElement(_core.FormControl, {
    required: required,
    error: !valid && showValidity,
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/_react["default"].createElement(_core.InputLabel, {
    id: 'uis-' + uid
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/_react["default"].createElement(_core.Select, {
    labelId: 'uis-' + uid,
    id: 'uis-' + uid + '-label',
    value: currentValue,
    renderValue: function renderValue(selected) {
      var Translated = t(selected, (0, _immutable.Map)({
        relative: (0, _immutable.List)(['enum', selected])
      }), schema.get('t'));
      return typeof Translated === 'string' || typeof Translated === 'number' ? Translated : (0, _uiSchema.beautifyKey)(selected, schema.get('ttEnum')) + '';
    },
    disabled: schema.get('readOnly'),
    onChange: function onChange(e) {
      return !schema.get('readOnly') && _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'set',
        schema: schema,
        required: required,
        data: {
          value: e.target.value
        }
      });
    }
  }, enum_val ? enum_val.map(function (enum_name, i) {
    return /*#__PURE__*/_react["default"].createElement(_core.MenuItem, {
      key: enum_name + '-' + i,
      value: enum_name,
      dense: schema.getIn(['view', 'denseOptions'])
    }, /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      schema: schema.get('t'),
      text: storeKeys.insert(0, 'widget').concat((0, _immutable.List)(['enum', (0, _Translate.getTranslatableEnum)(enum_name)])).join('.'),
      context: (0, _immutable.Map)({
        'relative': (0, _immutable.List)(['enum', (0, _Translate.getTranslatableEnum)(enum_name)])
      }),
      fallback: (0, _uiSchema.beautifyKey)((0, _Translate.getTranslatableEnum)(enum_name), schema.get('ttEnum')) + ''
    }));
  }).valueSeq() : null), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.Select = Select;