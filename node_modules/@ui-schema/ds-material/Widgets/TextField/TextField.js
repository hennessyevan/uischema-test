"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextRenderer = exports.StringRenderer = exports.NumberRenderer = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _reactUid = require("react-uid");

var _TransTitle = require("@ui-schema/ui-schema/Translate/TransTitle");

var _schemaToNative = require("@ui-schema/ui-schema/Utils/schemaToNative");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText");

var _convertStringToNumber = require("@ui-schema/ds-material/Utils/convertStringToNumber");

var _Utils = require("@ui-schema/ds-material/Utils");

var _schemaTypeIs = require("@ui-schema/ui-schema/Utils/schemaTypeIs");

var _excluded = ["schema"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var StringRenderer = function StringRenderer(_ref) {
  var type = _ref.type,
      multiline = _ref.multiline,
      rows = _ref.rows,
      rowsMax = _ref.rowsMax,
      minRows = _ref.minRows,
      maxRows = _ref.maxRows,
      storeKeys = _ref.storeKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      value = _ref.value,
      _onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      errors = _ref.errors,
      required = _ref.required,
      style = _ref.style,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      onKeyUp = _ref.onKeyUp,
      onKeyDown = _ref.onKeyDown,
      onKeyPress = _ref.onKeyPressNative,
      onKeyPressDeprecated = _ref.onKeyPress,
      _ref$inputProps = _ref.inputProps,
      inputProps = _ref$inputProps === void 0 ? {} : _ref$inputProps,
      _ref$InputProps = _ref.InputProps,
      InputProps = _ref$InputProps === void 0 ? {} : _ref$InputProps,
      customInputRef = _ref.inputRef,
      widgets = _ref.widgets;
  var uid = (0, _reactUid.useUID)(); // todo: this could break law-of-hooks

  var inputRef = customInputRef || _react["default"].useRef();

  var format = schema.get('format');
  inputProps = (0, _schemaToNative.mapSchema)(inputProps, schema);
  var hideTitle = schema.getIn(['view', 'hideTitle']);
  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;

  if (InfoRenderer && schema !== null && schema !== void 0 && schema.get('info')) {
    InputProps['endAdornment'] = /*#__PURE__*/_react["default"].createElement(_InputAdornment["default"], {
      position: "end"
    }, /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
      schema: schema,
      variant: 'icon',
      openAs: 'modal',
      storeKeys: storeKeys,
      valid: valid,
      errors: errors
    }));
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
    label: hideTitle ? undefined : /*#__PURE__*/_react["default"].createElement(_TransTitle.TransTitle, {
      schema: schema,
      storeKeys: storeKeys,
      ownKey: ownKey
    }),
    "aria-label": hideTitle ? /*#__PURE__*/_react["default"].createElement(_TransTitle.TransTitle, {
      schema: schema,
      storeKeys: storeKeys,
      ownKey: ownKey
    }) : undefined // changing `type` to `text`, to be able to change invalid data
    ,
    type: format || (typeof value === 'string' && type === 'number' ? 'text' : type),
    disabled: schema.get('readOnly'),
    multiline: multiline,
    required: required,
    error: !valid && showValidity,
    minRows: typeof minRows === 'number' ? minRows : rows,
    maxRows: typeof maxRows === 'number' ? maxRows : rowsMax,
    inputRef: inputRef,
    fullWidth: true,
    variant: schema.getIn(['view', 'variant']),
    margin: schema.getIn(['view', 'margin']),
    size: schema.getIn(['view', 'dense']) ? 'small' : 'medium',
    value: typeof value === 'string' || typeof value === 'number' ? value : '',
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyPress: onKeyPress ? onKeyPress : function (e) {
      var evt = e.nativeEvent;

      if (!(0, _Utils.forbidInvalidNumber)(evt, schema.get('type'))) {
        onKeyPressDeprecated && onKeyPressDeprecated(evt);
      }
    },
    id: 'uis-' + uid,
    style: style,
    onKeyDown: onKeyDown,
    onChange: function onChange(e) {
      var val = e.target.value;
      var schemaType = schema.get('type');
      var newVal = (0, _convertStringToNumber.convertStringToNumber)(val, schemaType);

      if ((0, _schemaTypeIs.schemaTypeIsNumeric)(schemaType) && newVal === '' && e.target.validity.badInput) {
        // forbid saving/deleting of invalid number at all
        return undefined;
      }

      _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'set',
        schema: schema,
        required: required,
        data: {
          value: newVal
        }
      });
    },
    InputLabelProps: {
      shrink: schema.getIn(['view', 'shrink'])
    },
    InputProps: InputProps,
    inputProps: inputProps
  }), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.StringRenderer = StringRenderer;

var TextRenderer = function TextRenderer(_ref2) {
  var schema = _ref2.schema,
      props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);
  return /*#__PURE__*/_react["default"].createElement(StringRenderer, (0, _extends2["default"])({}, props, {
    schema: schema,
    minRows: typeof props.minRows === 'number' ? props.minRows : // eslint-disable-next-line deprecation/deprecation
    props.rows || schema.getIn(['view', 'rows']),
    maxRows: typeof props.maxRows === 'number' ? props.maxRows : // eslint-disable-next-line deprecation/deprecation
    props.rowsMax || schema.getIn(['view', 'rowsMax']),
    multiline: true
  }));
};

exports.TextRenderer = TextRenderer;

var NumberRenderer = function NumberRenderer(props) {
  var schema = props.schema,
      _props$inputProps = props.inputProps,
      inputPropsProps = _props$inputProps === void 0 ? {} : _props$inputProps,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? 'any' : _props$steps;
  var schemaType = schema.get('type');

  var inputProps = _react["default"].useMemo(function () {
    if ((0, _schemaTypeIs.schemaTypeIs)(schemaType, 'number') && typeof inputPropsProps['step'] === 'undefined') {
      return _objectSpread(_objectSpread({}, inputPropsProps), {}, {
        step: steps
      });
    }

    return inputPropsProps;
  }, [inputPropsProps, schemaType]);

  return /*#__PURE__*/_react["default"].createElement(StringRenderer, (0, _extends2["default"])({}, props, {
    inputProps: inputProps,
    type: 'number'
  }));
};

exports.NumberRenderer = NumberRenderer;