"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionsCheck = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@material-ui/core");

var _immutable = require("immutable");

var _uiSchema = require("@ui-schema/ui-schema");

var _reactUid = require("react-uid");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText");

var _sortScalarList = require("@ui-schema/ui-schema/Utils/sortScalarList");

var OptionCheck = function OptionCheck(_ref) {
  var disabled = _ref.disabled,
      checked = _ref.checked,
      label = _ref.label,
      onChange = _ref.onChange;
  var uid = (0, _reactUid.useUID)();
  return /*#__PURE__*/_react["default"].createElement(_core.FormControlLabel, {
    id: 'uis-' + uid,
    control: /*#__PURE__*/_react["default"].createElement(_core.Checkbox, {
      id: 'uis-' + uid,
      checked: checked,
      onChange: onChange,
      disabled: disabled
    }),
    disabled: disabled,
    label: label
  });
};

var checkActive = function checkActive(list, name) {
  return list && list.contains && typeof list.contains(name) !== 'undefined' ? list.contains(name) : false;
};

var OptionsCheckValueBase = function OptionsCheckValueBase(_ref2) {
  var oneOfValues = _ref2.oneOfValues,
      storeKeys = _ref2.storeKeys,
      value = _ref2.value,
      _onChange = _ref2.onChange,
      required = _ref2.required,
      schema = _ref2.schema,
      disabled = _ref2.disabled;
  return oneOfValues ? oneOfValues.map(function (oneOfSchema) {
    var oneOfVal = oneOfSchema.get('const');
    var isActive = checkActive(value, oneOfVal);
    return /*#__PURE__*/_react["default"].createElement(OptionCheck, {
      key: oneOfVal,
      checked: isActive,
      disabled: Boolean(disabled || oneOfSchema.get('readOnly')),
      onChange: function onChange() {
        _onChange({
          storeKeys: storeKeys,
          scopes: ['value'],
          type: 'update',
          updater: function updater(_ref3) {
            var _ref3$value = _ref3.value,
                val = _ref3$value === void 0 ? (0, _immutable.List)() : _ref3$value;
            return {
              value: (0, _sortScalarList.sortScalarList)(checkActive(val, oneOfVal) ? val["delete"](val.indexOf(oneOfVal)) : val.push(oneOfVal))
            };
          },
          schema: schema,
          required: required
        });
      },
      label: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
        schema: oneOfSchema.get('t'),
        text: oneOfSchema.get('title') || oneOfSchema.get('const'),
        context: (0, _immutable.Map)({
          'relative': (0, _immutable.List)(['title'])
        }),
        fallback: oneOfSchema.get('title') || (0, _uiSchema.beautifyKey)(oneOfSchema.get('const'), oneOfSchema.get('tt'))
      })
    });
  }).valueSeq() : null;
};

var OptionsCheckValue = (0, _uiSchema.extractValue)((0, _uiSchema.memo)(OptionsCheckValueBase));

var OptionsCheck = function OptionsCheck(_ref4) {
  var ownKey = _ref4.ownKey,
      schema = _ref4.schema,
      storeKeys = _ref4.storeKeys,
      showValidity = _ref4.showValidity,
      valid = _ref4.valid,
      required = _ref4.required,
      errors = _ref4.errors,
      row = _ref4.row,
      widgets = _ref4.widgets;
  var oneOfVal = schema.getIn(['items', 'oneOf']);
  if (!oneOfVal) return null;
  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/_react["default"].createElement(_core.FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/_react["default"].createElement(_core.FormLabel, {
    component: "legend",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }), InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
    schema: schema,
    variant: 'icon',
    openAs: 'modal',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors,
    align: 'right',
    dense: true
  }) : undefined), /*#__PURE__*/_react["default"].createElement(_core.FormGroup, {
    row: row
  }, /*#__PURE__*/_react["default"].createElement(OptionsCheckValue, {
    oneOfValues: oneOfVal,
    storeKeys: storeKeys,
    required: required,
    schema: schema,
    disabled: schema.get('readOnly')
  })), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.OptionsCheck = OptionsCheck;