"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberSlider = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _reactUid = require("react-uid");

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _Box = _interopRequireDefault(require("@material-ui/core/Box"));

var _Slider = _interopRequireDefault(require("@material-ui/core/Slider"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText");

var _Tooltip = require("@ui-schema/ds-material/Component/Tooltip/Tooltip");

var _excluded = ["onClick", "canDelete", "children"],
    _excluded2 = ["schema"];

var ThumbComponent = function ThumbComponent(_ref) {
  var _onClick = _ref.onClick,
      canDelete = _ref.canDelete,
      children = _ref.children,
      p = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("span", p, children, canDelete && -1 !== p.className.indexOf('-open') ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: 'small',
    style: {
      position: 'absolute',
      zIndex: 100,
      bottom: -30
    },
    onClick: function onClick() {
      return _onClick(p['data-index']);
    }
  }, /*#__PURE__*/_react["default"].createElement(_Delete["default"], {
    fontSize: 'inherit'
  })) : null);
};

var NumberSliderRenderer = function NumberSliderRenderer(_ref2) {
  var multipleOf = _ref2.multipleOf,
      min = _ref2.min,
      max = _ref2.max,
      enumVal = _ref2.enumVal,
      constVal = _ref2.constVal,
      defaultVal = _ref2.defaultVal,
      storeKeys = _ref2.storeKeys,
      ownKey = _ref2.ownKey,
      schema = _ref2.schema,
      value = _ref2.value,
      _onChange = _ref2.onChange,
      showValidity = _ref2.showValidity,
      valid = _ref2.valid,
      errors = _ref2.errors,
      required = _ref2.required,
      minItems = _ref2.minItems,
      maxItems = _ref2.maxItems;
  var uid = (0, _reactUid.useUID)();
  var hasMulti = false;
  var canAdd = false;

  if ((0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) === 'array') {
    hasMulti = typeof maxItems === 'undefined' || minItems < maxItems;
    canAdd = typeof maxItems === 'undefined' || !_immutable.List.isList(value) || _immutable.List.isList(value) && value.size < maxItems;
  }

  var marksLabel = schema.getIn(['view', 'marksLabel']);

  var valuetext = _react["default"].useCallback(function (valueSingle) {
    if (!marksLabel) return valueSingle;
    return "".concat(valueSingle).concat(marksLabel);
  }, [marksLabel]);

  var marksValues = constVal;

  if (typeof marksValues !== 'number' && !_immutable.List.isList(marksValues)) {
    marksValues = enumVal;

    if (!_immutable.List.isList(marksValues)) {
      marksValues = schema.getIn(['view', 'marks']);
    }
  }

  var marks = [];

  if (typeof marksValues !== 'undefined') {
    if (typeof marksValues === 'number') {
      marks.push({
        value: marksValues,
        label: valuetext(marksValues)
      });
    } else if (_immutable.List.isList(marksValues)) {
      marksValues.forEach(function (markValue) {
        marks.push({
          value: markValue,
          label: valuetext(markValue)
        });
      });
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    id: 'uis-' + uid,
    gutterBottom: true,
    color: !valid && showValidity ? 'error' : 'initial'
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }), required ? ' *' : null), /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    style: {
      display: 'flex'
    },
    mt: schema.getIn(['view', 'mt']),
    mb: schema.getIn(['view', 'mb'])
  }, /*#__PURE__*/_react["default"].createElement(_Slider["default"], {
    getAriaValueText: valuetext,
    "aria-labelledby": 'uis-' + uid,
    valueLabelDisplay: schema.getIn(['view', 'tooltip']),
    step: typeof enumVal !== 'undefined' || typeof constVal !== 'undefined' ? null : multipleOf,
    track: schema.getIn(['view', 'track']),
    marks: marks.length ? marks : schema.getIn(['view', 'marks']),
    min: min,
    max: max,
    ThumbComponent: hasMulti ? function (p) {
      return /*#__PURE__*/_react["default"].createElement(ThumbComponent, (0, _extends2["default"])({}, p, {
        onClick: function onClick(index) {
          return _onChange({
            storeKeys: storeKeys,
            scopes: ['value'],
            type: 'update',
            updater: function updater(_ref3) {
              var storeValue = _ref3.value;
              return {
                value: storeValue.splice(index, 1)
              };
            },
            schema: schema,
            required: required
          });
        },
        canDelete: value && value.size > minItems
      }));
    } : undefined,
    value: (0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) === 'array' ? value && value.size ? value.toJS() : defaultVal : typeof value === 'number' ? value : defaultVal,
    onChange: function onChange(e, newValue) {
      if ((0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) !== 'array' && isNaN(newValue * 1)) {
        console.error('Invalid Type: input not a number in:', e.target, newValue);
        return;
      }

      if (schema.get('readOnly')) {
        return;
      }

      _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'update',
        updater: function updater() {
          return {
            value: (0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) === 'array' ? (0, _immutable.List)(newValue) : newValue * 1
          };
        },
        schema: schema,
        required: required
      });
    }
  }), !schema.get('readOnly') && hasMulti ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: 'small',
    disabled: !canAdd,
    style: {
      margin: 'auto 6px'
    },
    onClick: function onClick() {
      return _onChange({
        storeKeys: storeKeys,
        scopes: ['value'],
        type: 'update',
        updater: function updater(_ref4) {
          var storeValue = _ref4.value;
          return {
            value: storeValue ? storeValue.push(min) : (0, _immutable.List)(defaultVal).push(min)
          };
        },
        schema: schema,
        required: required
      });
    }
  }, /*#__PURE__*/_react["default"].createElement(_Tooltip.AccessTooltipIcon, {
    title: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      text: 'labels.add-number'
    })
  }, /*#__PURE__*/_react["default"].createElement(_Add["default"], {
    fontSize: 'inherit'
  }))) : null), /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

var ValueNumberSliderRenderer = (0, _uiSchema.extractValue)((0, _uiSchema.memo)(NumberSliderRenderer));

var NumberSlider = function NumberSlider(_ref5) {
  var schema = _ref5.schema,
      props = (0, _objectWithoutProperties2["default"])(_ref5, _excluded2);
  var min = 0;
  var max = 100;
  var defaultVal;
  var multipleOf = undefined;
  var minItems = undefined;
  var maxItems = undefined;

  if ((0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) === 'array') {
    if (!(0, _uiSchema.schemaTypeIsNumeric)(schema.getIn(['items', 'type']))) {
      return null;
    }

    min = typeof schema.getIn(['items', 'minimum']) === 'number' ? schema.getIn(['items', 'minimum']) : typeof schema.getIn(['items', 'exclusiveMinimum']) === 'number' ? schema.getIn(['items', 'exclusiveMinimum']) + 1 : min;
    max = typeof schema.getIn(['items', 'maximum']) === 'number' ? schema.getIn(['items', 'maximum']) : typeof schema.getIn(['items', 'exclusiveMaximum']) === 'number' ? schema.getIn(['items', 'exclusiveMaximum']) - 1 : max;
    multipleOf = schema.getIn(['items', 'multipleOf']);
    minItems = schema.get('minItems');
    maxItems = schema.get('maxItems');

    if (minItems < 2 || !minItems) {
      minItems = 2;
    }

    defaultVal = new Array(minItems).fill(null).map(function () {
      return min;
    });

    if (schema.getIn(['view', 'track']) === 'inverted') {
      defaultVal[defaultVal.length - 1] = max;
    }
  } else {
    min = typeof schema.get('minimum') === 'number' ? schema.get('minimum') : typeof schema.get('exclusiveMinimum') === 'number' ? schema.get('exclusiveMinimum') + 1 : min;
    max = typeof schema.get('maximum') === 'number' ? schema.get('maximum') : typeof schema.get('exclusiveMaximum') === 'number' ? schema.get('exclusiveMaximum') - 1 : max;
    multipleOf = schema.get('multipleOf');
    defaultVal = min;
  } // todo: happy-path issue with multiple types: `array | number | integer`, will always select array component


  var Component = (0, _uiSchema.schemaTypeIs)(schema.get('type'), 'array') ? ValueNumberSliderRenderer : NumberSliderRenderer;
  return /*#__PURE__*/_react["default"].createElement(Component, (0, _extends2["default"])({
    multipleOf: multipleOf,
    min: min,
    max: max,
    minItems: minItems,
    maxItems: maxItems,
    enumVal: schema.get('enum'),
    constVal: schema.get('const'),
    defaultVal: defaultVal,
    schema: schema
  }, props));
};

exports.NumberSlider = NumberSlider;