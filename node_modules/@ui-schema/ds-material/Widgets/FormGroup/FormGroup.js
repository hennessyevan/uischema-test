"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormGroupBase = exports.FormGroup = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _FormLabel = _interopRequireDefault(require("@material-ui/core/FormLabel"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _FormGroup = _interopRequireDefault(require("@material-ui/core/FormGroup"));

var _styles = require("@material-ui/core/styles");

var _UIStore = require("@ui-schema/ui-schema/UIStore");

var _Utils = require("@ui-schema/ui-schema/Utils");

var _TransTitle = require("@ui-schema/ui-schema/Translate/TransTitle");

var FormGroupBase = function FormGroupBase(props) {
  var storeKeys = props.storeKeys,
      ownKey = props.ownKey,
      widgets = props.widgets;
  var WidgetRenderer = widgets.WidgetRenderer;

  var _useTheme = (0, _styles.useTheme)(),
      spacing = _useTheme.spacing;

  var schema = props.schema; // deleting the `widget` to directly use `PluginStack` for nesting
  // with `widget` it would lead to an endless loop
  // using e.g. default `object` renderer then
  // @ts-ignore

  schema = schema["delete"]('widget');
  return /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
    component: "fieldset",
    style: {
      display: 'block',
      marginBottom: spacing(1)
    }
  }, /*#__PURE__*/_react["default"].createElement(_FormLabel["default"], {
    component: "legend"
  }, /*#__PURE__*/_react["default"].createElement(_TransTitle.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], {
    style: {
      marginTop: spacing(1),
      marginBottom: spacing(1)
    }
  }, /*#__PURE__*/_react["default"].createElement(WidgetRenderer, (0, _extends2["default"])({}, props, {
    schema: schema
  }))));
};

exports.FormGroupBase = FormGroupBase;
var FormGroup = (0, _UIStore.extractValue)((0, _Utils.memo)(FormGroupBase));
exports.FormGroup = FormGroup;