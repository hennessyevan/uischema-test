import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import Grid from '@material-ui/core/Grid';
import { getNextPlugin } from '@ui-schema/ui-schema/PluginStack';
export const SchemaGridItem = ({
  schema,
  children,
  defaultMd,
  style,
  className,
  classes
}) => {
  const view = schema ? schema.get('view') : undefined;
  const viewXs = view ? view.get('sizeXs') || 12 : 12;
  const viewSm = view ? view.get('sizeSm') : undefined;
  const viewMd = view ? view.get('sizeMd') : defaultMd;
  const viewLg = view ? view.get('sizeLg') : undefined;
  const viewXl = view ? view.get('sizeXl') : undefined;
  return /*#__PURE__*/React.createElement(Grid, {
    item: true,
    xs: viewXs,
    sm: viewSm,
    md: viewMd,
    lg: viewLg,
    xl: viewXl,
    style: style,
    className: className,
    classes: classes
  }, children);
};
export const RootRenderer = ({
  children
}) => /*#__PURE__*/React.createElement(Grid, {
  container: true,
  spacing: 0
}, children);
export const GroupRenderer = ({
  schema,
  noGrid,
  spacing = 2,
  style,
  className,
  children
}) => noGrid ? children : /*#__PURE__*/React.createElement(Grid, {
  container: true,
  wrap: 'wrap',
  spacing: typeof schema.getIn(['view', 'spacing']) === 'number' ? schema.getIn(['view', 'spacing']) : spacing,
  style: style,
  className: className
}, children);
export const SchemaGridHandler = props => {
  const {
    schema,
    noGrid,
    isVirtual,
    currentPluginIndex
  } = props;
  const next = currentPluginIndex + 1;
  const Plugin = getNextPlugin(next, props.widgets);

  if (noGrid || isVirtual || schema.getIn(['view', 'noGrid'])) {
    return /*#__PURE__*/React.createElement(Plugin, _extends({}, props, {
      currentPluginIndex: next
    }));
  }

  const align = schema.getIn(['view', 'align']);
  const style = React.useMemo(() => ({
    textAlign: align
  }), [align]);
  return /*#__PURE__*/React.createElement(SchemaGridItem, {
    schema: schema,
    style: style
  }, /*#__PURE__*/React.createElement(Plugin, _extends({}, props, {
    currentPluginIndex: next
  })));
};