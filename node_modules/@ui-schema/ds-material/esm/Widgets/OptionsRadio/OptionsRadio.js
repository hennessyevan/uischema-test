import React from 'react';
import { Map, List } from 'immutable';
import { FormControl, FormLabel, FormControlLabel, RadioGroup, Radio } from '@material-ui/core';
import { TransTitle, Trans, beautifyKey } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import { getTranslatableEnum } from '@ui-schema/ui-schema/Translate';

const OptionsRadio = ({
  ownKey,
  schema,
  value,
  onChange,
  storeKeys,
  showValidity,
  valid,
  required,
  errors,
  row,
  widgets
}) => {
  const enumVal = schema.get('enum');
  if (!enumVal) return null;
  const isActive = typeof value !== 'undefined' ? value : schema.get('default') || '';
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/React.createElement(FormLabel, {
    component: "legend",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }), InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(InfoRenderer, {
    schema: schema,
    variant: 'icon',
    openAs: 'modal',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors,
    align: 'right',
    dense: true
  }) : undefined), /*#__PURE__*/React.createElement(RadioGroup, {
    row: row,
    disabled: schema.get('readOnly')
  }, enumVal ? enumVal.map(enum_name => {
    return /*#__PURE__*/React.createElement(FormControlLabel, {
      key: enum_name,
      control: /*#__PURE__*/React.createElement(Radio, {
        value: enum_name,
        checked: enum_name === isActive,
        onChange: () => !schema.get('readOnly') && onChange({
          storeKeys,
          scopes: ['value'],
          type: 'set',
          schema,
          required,
          data: {
            value: enum_name
          }
        })
      }),
      label: /*#__PURE__*/React.createElement(Trans, {
        schema: schema.get('t'),
        text: storeKeys.insert(0, 'widget').concat(List(['enum', getTranslatableEnum(enum_name)])).join('.'),
        context: Map({
          'relative': List(['enum', getTranslatableEnum(enum_name)])
        }),
        fallback: beautifyKey(getTranslatableEnum(enum_name), schema.get('ttEnum'))
      })
    });
  }).valueSeq() : null), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

export { OptionsRadio };