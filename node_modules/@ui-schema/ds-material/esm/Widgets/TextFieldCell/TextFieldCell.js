import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["schema"];
import React from 'react';
import { useUID } from 'react-uid';
import { TransTitle } from '@ui-schema/ui-schema/Translate/TransTitle';
import { schemaTypeIs, schemaTypeIsNumeric } from '@ui-schema/ui-schema/Utils/schemaTypeIs';
import { mapSchema } from '@ui-schema/ui-schema/Utils/schemaToNative';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import InputBase from '@material-ui/core/InputBase';
import Typography from '@material-ui/core/Typography';
import { convertStringToNumber } from '@ui-schema/ds-material/Utils/convertStringToNumber';
import { forbidInvalidNumber } from '@ui-schema/ds-material/Utils';
export const StringRendererCell = ({
  type,
  multiline,
  rows,
  rowsMax,
  storeKeys,
  ownKey,
  schema,
  value,
  onChange,
  showValidity,
  valid,
  errors,
  required,
  style = {},
  onClick,
  onFocus,
  onBlur,
  onKeyUp,
  onKeyDown,
  onKeyPress,
  inputProps = {},
  inputRef: customInputRef,
  labelledBy,
  widgets
}) => {
  const uid = useUID(); // todo: this could break law-of-hooks

  const inputRef = customInputRef || React.useRef();
  const format = schema.get('format');
  const currentRef = inputRef.current;
  inputProps = mapSchema(inputProps, schema);

  if (schemaTypeIs(schema.get('type'), 'number') && typeof inputProps['step'] === 'undefined') {//inputProps['step'] = 'any'
  }

  if (typeof labelledBy === 'string') {
    inputProps['aria-labelledby'] = labelledBy;
  } else {
    inputProps['aria-labelledby'] = 'uis-' + uid;
  }

  if (!inputProps.style) {
    inputProps.style = {};
  }

  const schemaAlign = schema.getIn(['view', 'align']);

  if (!inputProps.style.textAlign && schemaAlign) {
    inputProps.style.textAlign = schemaAlign;
  }

  if (type === 'number') {
    // when a table cell is of type number, it should be aligned right
    if (!inputProps.style.textAlign) {
      inputProps.style.textAlign = 'right';
    }

    if (inputProps.style.textAlign === 'right' && !inputProps.style['MozAppearance']) {
      inputProps.style['MozAppearance'] = 'textfield';
    }
  }

  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/React.createElement(React.Fragment, null, !labelledBy ? /*#__PURE__*/React.createElement(Typography, {
    component: 'span',
    variant: 'srOnly',
    id: inputProps['aria-labelledby']
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })) : null, /*#__PURE__*/React.createElement(InputBase, {
    type: format || type,
    disabled: schema.get('readOnly'),
    multiline: multiline,
    required: required,
    error: !valid && showValidity,
    rows: rows,
    inputRef: inputRef,
    rowsMax: rowsMax,
    fullWidth: true,
    margin: schema.getIn(['view', 'margin']),
    value: typeof value === 'string' || typeof value === 'number' ? value : '',
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyPress: e => {
      const evt = e.nativeEvent;

      if (!forbidInvalidNumber(evt, schema.get('type'))) {
        onKeyPress && onKeyPress(evt);
      }
    },
    style: style,
    onKeyDown: onKeyDown,
    onChange: e => {
      const val = e.target.value;
      const schemaType = schema.get('type');
      const newVal = convertStringToNumber(val, schemaType);

      if (schemaTypeIsNumeric(schemaType) && newVal === '' && e.target.validity.badInput) {
        // forbid saving/deleting of invalid number at all
        return undefined;
      }

      onChange({
        storeKeys,
        scopes: ['value'],
        type: 'set',
        schema,
        required,
        data: {
          value: newVal
        }
      });
    },
    inputProps: inputProps,
    endAdornment: InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(InfoRenderer, {
      schema: schema,
      variant: 'icon',
      openAs: 'modal',
      storeKeys: storeKeys,
      valid: valid,
      errors: errors
    }) : undefined
  }), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema,
    browserError: currentRef ? currentRef.validationMessage : ''
  }));
};
export const TextRendererCell = _ref => {
  let {
    schema
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(StringRendererCell, _extends({}, props, {
    schema: schema,
    rows: schema.getIn(['view', 'rows']),
    rowsMax: schema.getIn(['view', 'rowsMax']),
    multiline: true
  }));
};
export const NumberRendererCell = props => {
  return /*#__PURE__*/React.createElement(StringRendererCell, _extends({}, props, {
    type: 'number'
  }));
};