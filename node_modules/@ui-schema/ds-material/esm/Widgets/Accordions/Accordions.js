import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["validity", "SummaryTitle"],
      _excluded2 = ["schema", "storeKeys", "level", "errors", "showValidity"];
import React from 'react';
import { useUID } from 'react-uid';
import { TransTitle, PluginStack, memo, extractValidity } from '@ui-schema/ui-schema';
import { isInvalid } from '@ui-schema/ui-schema/ValidityReporter';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText';
import Accordion from '@material-ui/core/Accordion';
import Box from '@material-ui/core/Box';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';

const AccordionStackBase = _ref => {
  let {
    validity,
    SummaryTitle
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const uid = useUID();
  const {
    storeKeys,
    schema,
    parentSchema,
    ownKey,
    showValidity,
    level,
    isOpen,
    setOpen,
    valid,
    widgets
  } = props;
  const [errors, setErrors] = React.useState();
  const elevation = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.getIn(['view', 'ev']);
  const variant = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.getIn(['view', 'variant']);
  const titleVariant = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.getIn(['view', 'titleVariant']);
  const childInvalid = isInvalid(validity);
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/React.createElement(Accordion, {
    style: {
      width: '100%'
    },
    expanded: isOpen,
    onChange: () => setOpen(k => k === ownKey ? '' : ownKey),
    variant: variant,
    elevation: elevation
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    id: 'uis-' + uid
  }, SummaryTitle ? /*#__PURE__*/React.createElement(SummaryTitle, {
    valid: Boolean(valid),
    childInvalid: childInvalid > 0,
    storeKeys: storeKeys,
    parentSchema: parentSchema,
    schema: schema,
    isOpen: isOpen
  }) : /*#__PURE__*/React.createElement(Typography, {
    color: !showValidity || !childInvalid && valid ? undefined : 'error',
    variant: titleVariant
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }))), /*#__PURE__*/React.createElement(AccordionDetails, {
    style: {
      flexDirection: 'column'
    }
  }, InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(InfoRenderer, {
    schema: schema,
    variant: 'preview',
    openAs: 'embed',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors
  })) : undefined, /*#__PURE__*/React.createElement(PluginStack, _extends({}, props, {
    schema: schema,
    parentSchema: parentSchema,
    storeKeys: storeKeys,
    level: level,
    onErrors: setErrors,
    isVirtual: props.isVirtual || (parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.get('onClosedHidden')) && !isOpen
  })), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  })));
}; // @ts-ignore


export const AccordionStack = extractValidity(memo(AccordionStackBase));
export const AccordionsRendererBase = _ref2 => {
  let {
    schema,
    storeKeys,
    level,
    errors,
    showValidity
  } = _ref2,
      props = _objectWithoutProperties(_ref2, _excluded2);

  const [open, setOpen] = React.useState(schema.get('defaultExpanded') || '');
  const properties = schema.get('properties');
  return /*#__PURE__*/React.createElement(React.Fragment, null, properties === null || properties === void 0 ? void 0 : properties.map((childSchema, childKey) => /*#__PURE__*/React.createElement(AccordionStack, _extends({
    key: childKey
  }, props, {
    schema: childSchema,
    ownKey: childKey,
    parentSchema: schema,
    storeKeys: storeKeys.push(childKey),
    level: level + 1,
    isOpen: open === childKey,
    setOpen: setOpen
  }))).valueSeq().toArray(), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};
export const AccordionsRenderer = memo(AccordionsRendererBase);