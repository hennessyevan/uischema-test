import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["value", "internalValue"];
import React from 'react';
import FormControl from '@material-ui/core/FormControl';
import Grid from '@material-ui/core/Grid';
import FormLabel from '@material-ui/core/FormLabel';
import IconButton from '@material-ui/core/IconButton';
import Add from '@material-ui/icons/Add';
import Remove from '@material-ui/icons/Remove';
import { TransTitle, extractValue, memo, PluginStack } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText';
import { AccessTooltipIcon } from '@ui-schema/ds-material/Component/Tooltip';
import { ListButton } from '@ui-schema/ds-material/Component/ListButton';
import { Trans } from '@ui-schema/ui-schema/Translate/Trans';
import { Map } from 'immutable';
export const SimpleListItemBase = ({
  showValidity,
  schema,
  schemaKeys,
  storeKeys,
  notDeletable,
  readOnly,
  required,
  onChange,
  level,
  index
}) => {
  return /*#__PURE__*/React.createElement(Grid, {
    key: index,
    item: true,
    xs: 12,
    style: {
      display: 'flex'
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      flexGrow: 2
    }
  }, /*#__PURE__*/React.createElement(PluginStack, {
    showValidity: showValidity,
    noGrid: true,
    schema: schema.get('items'),
    parentSchema: schema,
    storeKeys: storeKeys.push(index),
    level: level + 1,
    schemaKeys: schemaKeys === null || schemaKeys === void 0 ? void 0 : schemaKeys.push('items')
  })), !readOnly && !notDeletable ? /*#__PURE__*/React.createElement(IconButton, {
    onClick: () => {
      onChange({
        storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-delete',
        index: index,
        schema,
        required
      });
    },
    size: 'small',
    style: {
      margin: 'auto 6px',
      flexShrink: 0
    }
  }, /*#__PURE__*/React.createElement(AccessTooltipIcon, {
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'labels.remove-entry'
    })
  }, /*#__PURE__*/React.createElement(Remove, {
    fontSize: 'inherit',
    style: {
      margin: 2
    }
  }))) : null);
};
export const SimpleListItem = memo(SimpleListItemBase);
export const SimpleListInner = ({
  schemaKeys,
  storeKeys,
  ownKey,
  schema,
  listSize,
  onChange,
  showValidity,
  valid,
  errors,
  required,
  level,
  widgets,
  btnAddShowLabel,
  btnAddStyle,
  btnSize: btnSizeProp,
  btnVariant: btnVariantProp,
  btnColor: btnColorProp
}) => {
  const btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  const btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  const btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  const notAddable = schema.get('notAddable');
  const notDeletable = schema.get('notDeletable');
  const readOnly = schema.get('readOnly');
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(Grid, {
    container: true,
    spacing: 2
  }, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/React.createElement(Grid, {
    item: true,
    xs: 12
  }, /*#__PURE__*/React.createElement(FormLabel, {
    component: "legend"
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }))) : null, InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(Grid, {
    item: true,
    xs: 12
  }, /*#__PURE__*/React.createElement(InfoRenderer, {
    schema: schema,
    variant: 'preview',
    openAs: 'embed',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors
  })) : undefined, Array.from(Array(listSize || 0)).map((itemVal, i) => /*#__PURE__*/React.createElement(SimpleListItem, {
    key: i,
    index: i,
    showValidity: showValidity,
    schema: schema,
    storeKeys: storeKeys,
    schemaKeys: schemaKeys,
    btnSize: btnSize,
    level: level,
    notDeletable: notDeletable,
    readOnly: readOnly,
    required: required,
    onChange: onChange
  })), /*#__PURE__*/React.createElement(Grid, {
    item: true,
    xs: 12
  }, !readOnly && !notAddable ? /*#__PURE__*/React.createElement(ListButton, {
    onClick: () => {
      onChange({
        storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-add',
        schema,
        required
      });
    },
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    showLabel: btnAddShowLabel,
    style: btnAddStyle,
    Icon: Add,
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'labels.add-entry',
      context: Map({
        actionLabels: schema.get('tableActionLabels')
      })
    })
  }) : null, /*#__PURE__*/React.createElement(ValidityHelperText
  /* only pass down errors which are not for a specific sub-schema */
  , {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }))));
};
export const SimpleListBase = memo(SimpleListInner);
export const SimpleListWrapper = _ref => {
  let {
    value,
    // eslint-disable-next-line no-unused-vars
    internalValue
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(SimpleListBase, _extends({
    listSize: value === null || value === void 0 ? void 0 : value.size
  }, props));
};
export const SimpleList = extractValue(SimpleListWrapper);