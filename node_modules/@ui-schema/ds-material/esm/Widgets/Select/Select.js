import React from 'react';
import { Map, List } from 'immutable';
import { useUID } from 'react-uid';
import { FormControl, InputLabel, MenuItem, Select as MuiSelect } from '@material-ui/core';
import { TransTitle, Trans, beautifyKey } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText';
import { getTranslatableEnum } from '@ui-schema/ui-schema/Translate';
export const Select = ({
  storeKeys,
  ownKey,
  schema,
  value,
  onChange,
  showValidity,
  valid,
  required,
  errors,
  t
}) => {
  const uid = useUID();
  if (!schema) return null;
  const enum_val = schema.get('enum');
  if (!enum_val) return null;
  const currentValue = typeof value !== 'undefined' ? value : schema.get('default') || '';
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/React.createElement(InputLabel, {
    id: 'uis-' + uid
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/React.createElement(MuiSelect, {
    labelId: 'uis-' + uid,
    id: 'uis-' + uid + '-label',
    value: currentValue,
    renderValue: selected => {
      const Translated = t(selected, Map({
        relative: List(['enum', selected])
      }), schema.get('t'));
      return typeof Translated === 'string' || typeof Translated === 'number' ? Translated : beautifyKey(selected, schema.get('ttEnum')) + '';
    },
    disabled: schema.get('readOnly'),
    onChange: e => !schema.get('readOnly') && onChange({
      storeKeys,
      scopes: ['value'],
      type: 'set',
      schema,
      required,
      data: {
        value: e.target.value
      }
    })
  }, enum_val ? enum_val.map((enum_name, i) => /*#__PURE__*/React.createElement(MenuItem, {
    key: enum_name + '-' + i,
    value: enum_name,
    dense: schema.getIn(['view', 'denseOptions'])
  }, /*#__PURE__*/React.createElement(Trans, {
    schema: schema.get('t'),
    text: storeKeys.insert(0, 'widget').concat(List(['enum', getTranslatableEnum(enum_name)])).join('.'),
    context: Map({
      'relative': List(['enum', getTranslatableEnum(enum_name)])
    }),
    fallback: beautifyKey(getTranslatableEnum(enum_name), schema.get('ttEnum')) + ''
  }))).valueSeq() : null), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};