import React from 'react';
import { Map, List } from 'immutable';
import { useUID } from 'react-uid';
import { FormControl, Checkbox, InputLabel, MenuItem, Select as MuiSelect, ListItemText } from '@material-ui/core';
import { TransTitle, Trans, beautifyKey, extractValue, memo } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText';
import { sortScalarList } from '@ui-schema/ui-schema/Utils/sortScalarList';
export const SelectMultiBase = ({
  storeKeys,
  ownKey,
  schema,
  value,
  onChange,
  showValidity,
  valid,
  required,
  errors,
  t
}) => {
  const uid = useUID();
  if (!schema) return null;
  const oneOfValues = schema.getIn(['items', 'oneOf']);
  if (!oneOfValues) return null;
  const currentValue = typeof value !== 'undefined' ? value : schema.get('default') ? List(schema.get('default')) : List();
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    fullWidth: true,
    disabled: schema.get('readOnly'),
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined
  }, /*#__PURE__*/React.createElement(InputLabel, {
    id: 'uis-' + uid
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/React.createElement(MuiSelect, {
    labelId: 'uis-' + uid,
    id: 'uis-' + uid + '-label',
    value: currentValue.toArray(),
    multiple: true,
    renderValue: selected => {
      const sel = selected;
      return sel.map(s => {
        s = s + '';
        const oneOfValue = oneOfValues.find(oof => oof.get('const') === s);
        const Translated = t(s, Map({
          relative: List(['title'])
        }), oneOfValue === null || oneOfValue === void 0 ? void 0 : oneOfValue.get('t'));
        return typeof Translated === 'string' || typeof Translated === 'number' ? Translated : beautifyKey(s, oneOfValue === null || oneOfValue === void 0 ? void 0 : oneOfValue.get('tt')) + '';
      }).join(', ');
    },
    disabled: schema.get('readOnly'),
    onChange: e => !schema.get('readOnly') && onChange({
      storeKeys,
      scopes: ['value'],
      type: 'set',
      schema,
      required,
      data: {
        value: sortScalarList(List(e.target.value))
      }
    })
  }, oneOfValues ? oneOfValues.map((oneOfSchema, i) => /*#__PURE__*/React.createElement(MenuItem, {
    key: oneOfSchema.get('const') + '-' + i,
    value: oneOfSchema.get('const'),
    dense: schema.getIn(['view', 'denseOptions']),
    disabled: oneOfSchema.get('readOnly')
  }, /*#__PURE__*/React.createElement(Checkbox, {
    checked: currentValue.contains(oneOfSchema.get('const'))
  }), /*#__PURE__*/React.createElement(ListItemText, {
    primary: /*#__PURE__*/React.createElement(Trans, {
      schema: oneOfSchema.get('t'),
      text: oneOfSchema.get('title') || oneOfSchema.get('const'),
      context: Map({
        'relative': List(['title'])
      }),
      fallback: oneOfSchema.get('title') || beautifyKey(oneOfSchema.get('const'), oneOfSchema.get('tt'))
    })
  }))).valueSeq() : null), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};
export const SelectMulti = extractValue(memo(SelectMultiBase));