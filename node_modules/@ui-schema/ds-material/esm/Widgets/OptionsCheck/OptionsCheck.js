import React from 'react';
import { FormControl, FormLabel, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';
import { Map, List } from 'immutable';
import { TransTitle, Trans, beautifyKey, extractValue, memo } from '@ui-schema/ui-schema';
import { useUID } from 'react-uid';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import { sortScalarList } from '@ui-schema/ui-schema/Utils/sortScalarList';

const OptionCheck = ({
  disabled,
  checked,
  label,
  onChange
}) => {
  const uid = useUID();
  return /*#__PURE__*/React.createElement(FormControlLabel, {
    id: 'uis-' + uid,
    control: /*#__PURE__*/React.createElement(Checkbox, {
      id: 'uis-' + uid,
      checked: checked,
      onChange: onChange,
      disabled: disabled
    }),
    disabled: disabled,
    label: label
  });
};

const checkActive = (list, name) => list && list.contains && typeof list.contains(name) !== 'undefined' ? list.contains(name) : false;

const OptionsCheckValueBase = ({
  oneOfValues,
  storeKeys,
  value,
  onChange,
  required,
  schema,
  disabled
}) => oneOfValues ? oneOfValues.map(oneOfSchema => {
  const oneOfVal = oneOfSchema.get('const');
  const isActive = checkActive(value, oneOfVal);
  return /*#__PURE__*/React.createElement(OptionCheck, {
    key: oneOfVal,
    checked: isActive,
    disabled: Boolean(disabled || oneOfSchema.get('readOnly')),
    onChange: () => {
      onChange({
        storeKeys,
        scopes: ['value'],
        type: 'update',
        updater: ({
          value: val = List()
        }) => ({
          value: sortScalarList(checkActive(val, oneOfVal) ? val.delete(val.indexOf(oneOfVal)) : val.push(oneOfVal))
        }),
        schema,
        required
      });
    },
    label: /*#__PURE__*/React.createElement(Trans, {
      schema: oneOfSchema.get('t'),
      text: oneOfSchema.get('title') || oneOfSchema.get('const'),
      context: Map({
        'relative': List(['title'])
      }),
      fallback: oneOfSchema.get('title') || beautifyKey(oneOfSchema.get('const'), oneOfSchema.get('tt'))
    })
  });
}).valueSeq() : null;

const OptionsCheckValue = extractValue(memo(OptionsCheckValueBase));
export const OptionsCheck = ({
  ownKey,
  schema,
  storeKeys,
  showValidity,
  valid,
  required,
  errors,
  row,
  widgets
}) => {
  const oneOfVal = schema.getIn(['items', 'oneOf']);
  if (!oneOfVal) return null;
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    fullWidth: true,
    size: schema.getIn(['view', 'dense']) ? 'small' : undefined,
    disabled: schema.get('readOnly')
  }, /*#__PURE__*/React.createElement(FormLabel, {
    component: "legend",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }), InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(InfoRenderer, {
    schema: schema,
    variant: 'icon',
    openAs: 'modal',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors,
    align: 'right',
    dense: true
  }) : undefined), /*#__PURE__*/React.createElement(FormGroup, {
    row: row
  }, /*#__PURE__*/React.createElement(OptionsCheckValue, {
    oneOfValues: oneOfVal,
    storeKeys: storeKeys,
    required: required,
    schema: schema,
    disabled: schema.get('readOnly')
  })), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};