import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["schema"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import { useUID } from 'react-uid';
import { TransTitle } from '@ui-schema/ui-schema/Translate/TransTitle';
import { mapSchema } from '@ui-schema/ui-schema/Utils/schemaToNative';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import { convertStringToNumber } from '@ui-schema/ds-material/Utils/convertStringToNumber';
import { forbidInvalidNumber } from '@ui-schema/ds-material/Utils';
import { schemaTypeIs, schemaTypeIsNumeric } from '@ui-schema/ui-schema/Utils/schemaTypeIs';
export const StringRenderer = ({
  type,
  multiline,
  // eslint-disable-next-line deprecation/deprecation
  rows,
  rowsMax,
  minRows,
  maxRows,
  storeKeys,
  ownKey,
  schema,
  value,
  onChange,
  showValidity,
  valid,
  errors,
  required,
  style,
  onClick,
  onFocus,
  onBlur,
  onKeyUp,
  onKeyDown,
  onKeyPressNative: onKeyPress,
  // eslint-disable-next-line deprecation/deprecation
  onKeyPress: onKeyPressDeprecated,
  inputProps = {},
  InputProps = {},
  inputRef: customInputRef,
  widgets
}) => {
  const uid = useUID(); // todo: this could break law-of-hooks

  const inputRef = customInputRef || React.useRef();
  const format = schema.get('format');
  inputProps = mapSchema(inputProps, schema);
  const hideTitle = schema.getIn(['view', 'hideTitle']);
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;

  if (InfoRenderer && schema !== null && schema !== void 0 && schema.get('info')) {
    InputProps['endAdornment'] = /*#__PURE__*/React.createElement(InputAdornment, {
      position: "end"
    }, /*#__PURE__*/React.createElement(InfoRenderer, {
      schema: schema,
      variant: 'icon',
      openAs: 'modal',
      storeKeys: storeKeys,
      valid: valid,
      errors: errors
    }));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextField, {
    label: hideTitle ? undefined : /*#__PURE__*/React.createElement(TransTitle, {
      schema: schema,
      storeKeys: storeKeys,
      ownKey: ownKey
    }),
    "aria-label": hideTitle ? /*#__PURE__*/React.createElement(TransTitle, {
      schema: schema,
      storeKeys: storeKeys,
      ownKey: ownKey
    }) : undefined // changing `type` to `text`, to be able to change invalid data
    ,
    type: format || (typeof value === 'string' && type === 'number' ? 'text' : type),
    disabled: schema.get('readOnly'),
    multiline: multiline,
    required: required,
    error: !valid && showValidity,
    minRows: typeof minRows === 'number' ? minRows : rows,
    maxRows: typeof maxRows === 'number' ? maxRows : rowsMax,
    inputRef: inputRef,
    fullWidth: true,
    variant: schema.getIn(['view', 'variant']),
    margin: schema.getIn(['view', 'margin']),
    size: schema.getIn(['view', 'dense']) ? 'small' : 'medium',
    value: typeof value === 'string' || typeof value === 'number' ? value : '',
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur,
    onKeyUp: onKeyUp,
    onKeyPress: onKeyPress ? onKeyPress : e => {
      const evt = e.nativeEvent;

      if (!forbidInvalidNumber(evt, schema.get('type'))) {
        onKeyPressDeprecated && onKeyPressDeprecated(evt);
      }
    },
    id: 'uis-' + uid,
    style: style,
    onKeyDown: onKeyDown,
    onChange: e => {
      const val = e.target.value;
      const schemaType = schema.get('type');
      const newVal = convertStringToNumber(val, schemaType);

      if (schemaTypeIsNumeric(schemaType) && newVal === '' && e.target.validity.badInput) {
        // forbid saving/deleting of invalid number at all
        return undefined;
      }

      onChange({
        storeKeys,
        scopes: ['value'],
        type: 'set',
        schema,
        required,
        data: {
          value: newVal
        }
      });
    },
    InputLabelProps: {
      shrink: schema.getIn(['view', 'shrink'])
    },
    InputProps: InputProps,
    inputProps: inputProps
  }), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};
export const TextRenderer = _ref => {
  let {
    schema
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(StringRenderer, _extends({}, props, {
    schema: schema,
    minRows: typeof props.minRows === 'number' ? props.minRows : // eslint-disable-next-line deprecation/deprecation
    props.rows || schema.getIn(['view', 'rows']),
    maxRows: typeof props.maxRows === 'number' ? props.maxRows : // eslint-disable-next-line deprecation/deprecation
    props.rowsMax || schema.getIn(['view', 'rowsMax']),
    multiline: true
  }));
};
export const NumberRenderer = props => {
  const {
    schema,
    inputProps: inputPropsProps = {},
    steps = 'any'
  } = props;
  const schemaType = schema.get('type');
  const inputProps = React.useMemo(() => {
    if (schemaTypeIs(schemaType, 'number') && typeof inputPropsProps['step'] === 'undefined') {
      return _objectSpread(_objectSpread({}, inputPropsProps), {}, {
        step: steps
      });
    }

    return inputPropsProps;
  }, [inputPropsProps, schemaType]);
  return /*#__PURE__*/React.createElement(StringRenderer, _extends({}, props, {
    inputProps: inputProps,
    type: 'number'
  }));
};