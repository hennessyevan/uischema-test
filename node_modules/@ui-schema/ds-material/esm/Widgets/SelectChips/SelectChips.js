import React from 'react';
import { beautifyKey, extractValue, memo, sortScalarList, Trans } from '@ui-schema/ui-schema';
import { TransTitle } from '@ui-schema/ui-schema/Translate/TransTitle';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import Typography from '@material-ui/core/Typography';
import Chip from '@material-ui/core/Chip';
import Box from '@material-ui/core/Box';
import { List, Map } from 'immutable';
export const SelectChipsBase = ({
  storeKeys,
  ownKey,
  schema,
  value,
  onChange,
  showValidity,
  errors,
  required,
  valid
}) => {
  if (!schema) return null;
  const oneOfVal = schema.getIn(['items', 'oneOf']);
  if (!oneOfVal) return null;
  const currentValue = typeof value !== 'undefined' ? value : List(schema.get('default')) || List();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Typography, {
    color: showValidity && !valid ? 'error' : undefined
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  })), /*#__PURE__*/React.createElement(Box, {
    mt: 1,
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, oneOfVal ? oneOfVal.map(oneOfSchema => /*#__PURE__*/React.createElement(Chip, {
    key: oneOfSchema.get('const'),
    label: /*#__PURE__*/React.createElement(Trans, {
      schema: oneOfSchema.get('t'),
      text: oneOfSchema.get('title') || oneOfSchema.get('const'),
      context: Map({
        'relative': List(['title'])
      }),
      fallback: oneOfSchema.get('title') || beautifyKey(oneOfSchema.get('const'), oneOfSchema.get('tt'))
    }),
    style: {
      marginRight: 4,
      marginBottom: 4
    },
    size: schema.getIn(['view', 'size']) === 'medium' ? 'medium' : 'small',
    variant: (currentValue === null || currentValue === void 0 ? void 0 : currentValue.indexOf(oneOfSchema.get('const'))) === -1 ? 'outlined' : 'default',
    disabled: schema.get('readOnly') || oneOfSchema.get('readOnly'),
    color: 'primary',
    onClick: () => {
      !schema.get('readOnly') && onChange({
        storeKeys,
        scopes: ['value'],
        type: 'update',
        schema,
        required,
        updater: ({
          value = List()
        }) => ({
          value: value.indexOf(oneOfSchema.get('const')) === -1 ? sortScalarList(value.push(oneOfSchema.get('const'))) : sortScalarList(value.splice(value.indexOf(oneOfSchema.get('const')), 1))
        })
      });
    }
  })).valueSeq() : null), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};
export const SelectChips = extractValue(memo(SelectChipsBase));