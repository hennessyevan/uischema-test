import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogActions from '@material-ui/core/DialogActions';
import IcInfo from '@material-ui/icons/Info';
import React from 'react';
import { List } from 'immutable';
export const InfoRenderer = ({
  schema,
  variant,
  openAs,
  align,
  dense
}) => {
  const [open, setOpen] = React.useState(false);
  const content = /*#__PURE__*/React.createElement(React.Fragment, null, List.isList(schema.get('info')) ? schema.get('info').map((line, i) => /*#__PURE__*/React.createElement(Typography, {
    key: i,
    gutterBottom: true
  }, line)).valueSeq() : typeof schema.get('info') === 'string' ? schema.get('info') : null);
  return /*#__PURE__*/React.createElement(React.Fragment, null, variant === 'icon' ? /*#__PURE__*/React.createElement(IconButton, {
    onClick: () => setOpen(true),
    size: dense ? 'small' : 'medium',
    style: {
      float: align ? align : undefined
    }
  }, /*#__PURE__*/React.createElement(IcInfo, null)) : /*#__PURE__*/React.createElement(Button, {
    onClick: () => setOpen(o => !o)
  }, "Show Info"), openAs === 'modal' ? /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: () => setOpen(false)
  }, /*#__PURE__*/React.createElement(DialogTitle, null, "Info"), /*#__PURE__*/React.createElement(DialogContent, null, content), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    onClick: () => setOpen(false)
  }, "close"))) : open ? content : null);
};