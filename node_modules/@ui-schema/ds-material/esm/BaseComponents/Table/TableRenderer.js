import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["value", "internalValue", "errors", "valid"];
import React from 'react';
import { useUID } from 'react-uid';
import { TransTitle, extractValue, memo, PluginStack, useUIMeta, schemaTypeIsAny } from '@ui-schema/ui-schema';
import { Map } from 'immutable';
import MuiTable from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableContainer from '@material-ui/core/TableContainer';
import { TableContext } from '@ui-schema/ds-material/BaseComponents/Table/TableContext';
export const TableRendererBase = ({
  storeKeys,
  ownKey,
  schema,
  onChange,
  showValidity,
  level,
  // widgets must come from an own wrapper component, to overwrite/enable any widgets for special `TableCell` formatting
  widgets,
  TableRowRenderer,
  TableFooter,
  TableHeader,
  listSize,
  t,
  noFirstPageButton,
  noLastPageButton,
  btnAddShowLabel,
  btnAddStyle,
  rowsPerPage,
  rowsShowAll,
  btnSize: btnSizeProp,
  btnVariant: btnVariantProp,
  btnColor: btnColorProp
}) => {
  var _itemsSchema$get, _itemsSchema$get2;

  const uid = useUID();
  const [page, setPage] = React.useState(0);
  const [rows, setRows] = React.useState(rowsPerPage.first());
  const btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  const btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  const btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  const dense = schema.getIn(['view', 'dense']) || false;
  const itemsSchema = schema.get('items');
  const readOnly = schema.get('readOnly');
  const currentRows = rows === -1 ? listSize || 0 : rows;
  const currentRowsStartVisible = page * currentRows;
  const validItemSchema = itemsSchema && Map.isMap(itemsSchema) && schemaTypeIsAny(itemsSchema.get('type'), ['array', 'object']);

  if (process.env.NODE_ENV === 'development' && !validItemSchema) {
    console.error('TableRenderer invalid `items` schema at storeKeys:', storeKeys === null || storeKeys === void 0 ? void 0 : storeKeys.toJS(), itemsSchema.toJS());
  }

  const visibleCols = ((_itemsSchema$get = itemsSchema.get('items')) === null || _itemsSchema$get === void 0 ? void 0 : _itemsSchema$get.filter(p => !p.get('hidden'))) || ((_itemsSchema$get2 = itemsSchema.get('properties')) === null || _itemsSchema$get2 === void 0 ? void 0 : _itemsSchema$get2.filter(p => !p.get('hidden')).keySeq());
  return /*#__PURE__*/React.createElement(React.Fragment, null, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }) : null, /*#__PURE__*/React.createElement(TableContainer, null, /*#__PURE__*/React.createElement(MuiTable, {
    size: dense ? 'small' : 'medium'
  }, /*#__PURE__*/React.createElement(TableHeader, {
    uid: uid,
    validItemSchema: validItemSchema,
    itemsSchema: itemsSchema,
    schema: schema,
    storeKeys: storeKeys,
    dense: dense,
    readOnly: readOnly
  }), /*#__PURE__*/React.createElement(TableBody, null, validItemSchema && listSize ? Array(listSize).fill(null).map((_val, i) => {
    const isVirtual = i < currentRowsStartVisible || i >= currentRowsStartVisible + currentRows;
    return /*#__PURE__*/React.createElement(PluginStack, {
      key: i,
      storeKeys: storeKeys.push(i),
      schema: itemsSchema,
      parentSchema: schema,
      level: level,
      isVirtual: isVirtual,
      noGrid: true,
      widgets: widgets,
      WidgetOverride: TableRowRenderer,
      setPage: setPage,
      showRows: isVirtual ? undefined : rows,
      uid: uid // todo: some table rows like `DragDrop` would need info like "is-first-row", "is-last-row", "is-only-row"
      //listSize={listSize}
      ,
      dense: dense
    });
  }) : null), /*#__PURE__*/React.createElement(TableFooter, {
    colSize: (visibleCols === null || visibleCols === void 0 ? void 0 : visibleCols.size) || 0,
    t: t,
    listSize: listSize,
    listSizeCurrent: listSize,
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    btnShowLabel: btnAddShowLabel,
    btnStyle: btnAddStyle,
    schema: schema,
    setPage: setPage,
    page: page,
    setRows: setRows,
    rows: rows,
    storeKeys: storeKeys,
    showValidity: showValidity,
    onChange: onChange,
    dense: dense,
    readOnly: readOnly,
    rowsPerPage: rowsPerPage,
    rowsShowAll: rowsShowAll,
    noFirstPageButton: noFirstPageButton,
    noLastPageButton: noLastPageButton
  }))));
};
export const TableRendererBaseMemo = memo(TableRendererBase);
export const TableRendererExtractor = _ref => {
  let {
    value,
    // remove `internalValue` from the table widget, performance optimize
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    internalValue,
    // remove `errors` from the table widget, performance optimize
    errors,
    // remove `valid` from the table widget, performance optimize
    valid
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const {
    t
  } = useUIMeta(); // extracting and calculating the list size here, not passing down the actual list for performance reasons
  // https://github.com/ui-schema/ui-schema/issues/115

  return /*#__PURE__*/React.createElement(TableContext.Provider, {
    value: {
      errors,
      valid
    }
  }, /*#__PURE__*/React.createElement(TableRendererBaseMemo, _extends({}, props, {
    listSize: (value === null || value === void 0 ? void 0 : value.size) || 0,
    t: t
  })));
};
export const TableRendererMemo = memo(TableRendererExtractor);
export const TableRenderer = extractValue(TableRendererMemo);