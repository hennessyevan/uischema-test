import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["noFirstPageButton"],
      _excluded2 = ["noLastPageButton"];
import React from 'react';
import { makeStyles, useTheme, createStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import FirstPageIcon from '@material-ui/icons/FirstPage';
import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';
import KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';
import LastPageIcon from '@material-ui/icons/LastPage';
import { AccessTooltipIcon } from '@ui-schema/ds-material';
import { Trans } from '@ui-schema/ui-schema';
const useStyles1 = makeStyles(theme => createStyles({
  root: {
    flexShrink: 0,
    marginLeft: theme.spacing(2.5)
  }
}));
export const TablePaginationActions = props => {
  const classes = useStyles1();
  const theme = useTheme();
  const {
    count,
    page,
    rowsPerPage,
    onPageChange,
    backIconButtonProps: backIconButtonPropsTmp,
    nextIconButtonProps: nextIconButtonPropsTmp
  } = props;
  const btnSize = backIconButtonPropsTmp === null || backIconButtonPropsTmp === void 0 ? void 0 : backIconButtonPropsTmp.size; // @ts-ignore

  const _ref = backIconButtonPropsTmp || {},
        {
    noFirstPageButton
  } = _ref,
        backIconButtonProps = _objectWithoutProperties(_ref, _excluded); // @ts-ignore


  const _ref2 = nextIconButtonPropsTmp || {},
        {
    noLastPageButton
  } = _ref2,
        nextIconButtonProps = _objectWithoutProperties(_ref2, _excluded2);

  const handleFirstPageButtonClick = event => {
    onPageChange(event, 0);
  };

  const handleBackButtonClick = event => {
    onPageChange(event, page - 1);
  };

  const handleNextButtonClick = event => {
    onPageChange(event, page + 1);
  };

  const handleLastPageButtonClick = event => {
    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
  };

  const iconStyle = {
    padding: btnSize === 'small' ? 2 : undefined
  };
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, noFirstPageButton ? null : /*#__PURE__*/React.createElement(IconButton, {
    onClick: handleFirstPageButtonClick,
    disabled: page === 0,
    size: btnSize
  }, /*#__PURE__*/React.createElement(AccessTooltipIcon, {
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'pagination.first-page'
    })
  }, theme.direction === 'rtl' ? /*#__PURE__*/React.createElement(LastPageIcon, {
    style: iconStyle
  }) : /*#__PURE__*/React.createElement(FirstPageIcon, {
    style: iconStyle
  }))), /*#__PURE__*/React.createElement(IconButton, _extends({
    onClick: handleBackButtonClick,
    disabled: page === 0,
    size: btnSize
  }, backIconButtonProps), /*#__PURE__*/React.createElement(AccessTooltipIcon, {
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'pagination.prev-page'
    })
  }, theme.direction === 'rtl' ? /*#__PURE__*/React.createElement(KeyboardArrowRight, {
    style: iconStyle
  }) : /*#__PURE__*/React.createElement(KeyboardArrowLeft, {
    style: iconStyle
  }))), /*#__PURE__*/React.createElement(IconButton, _extends({
    onClick: handleNextButtonClick,
    disabled: page >= Math.ceil(count / rowsPerPage) - 1,
    style: {
      padding: btnSize === 'small' ? 2 : undefined
    },
    size: btnSize
  }, nextIconButtonProps), /*#__PURE__*/React.createElement(AccessTooltipIcon, {
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'pagination.next-page'
    })
  }, theme.direction === 'rtl' ? /*#__PURE__*/React.createElement(KeyboardArrowLeft, {
    style: iconStyle
  }) : /*#__PURE__*/React.createElement(KeyboardArrowRight, {
    style: iconStyle
  }))), noLastPageButton ? null : /*#__PURE__*/React.createElement(IconButton, {
    onClick: handleLastPageButtonClick,
    disabled: page >= Math.ceil(count / rowsPerPage) - 1,
    size: btnSize,
    style: {
      padding: btnSize === 'small' ? 2 : undefined
    }
  }, /*#__PURE__*/React.createElement(AccessTooltipIcon, {
    title: /*#__PURE__*/React.createElement(Trans, {
      text: 'pagination.last-page'
    })
  }, theme.direction === 'rtl' ? /*#__PURE__*/React.createElement(FirstPageIcon, {
    style: iconStyle
  }) : /*#__PURE__*/React.createElement(LastPageIcon, {
    style: iconStyle
  }))));
};