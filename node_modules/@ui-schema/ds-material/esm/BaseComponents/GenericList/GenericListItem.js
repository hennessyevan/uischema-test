import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["ComponentPos", "ComponentMore", "spacing", "btnSize"];
import React from 'react';
import Grid from '@material-ui/core/Grid';
import Divider from '@material-ui/core/Divider';
import { memo, PluginStack, schemaTypeToDistinct } from '@ui-schema/ui-schema';
import { List } from 'immutable';
export const GenericListItemBase = _ref => {
  var _itemsSchema$get;

  let {
    ComponentPos,
    ComponentMore,
    spacing = 2,
    btnSize
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const {
    index,
    listSize,
    schema,
    storeKeys,
    schemaKeys,
    level,
    showValidity
  } = props;
  const ownKeys = storeKeys.push(index);
  const itemsSchema = schema.get('items');
  return [/*#__PURE__*/React.createElement(Grid, {
    key: 'a',
    item: true,
    xs: 12,
    style: {
      display: 'flex'
    }
  }, /*#__PURE__*/React.createElement(Grid, {
    container: true,
    spacing: spacing,
    wrap: 'nowrap'
  }, ComponentPos ? /*#__PURE__*/React.createElement(Grid, {
    item: true,
    style: {
      display: 'flex',
      flexDirection: 'column',
      flexShrink: 0
    }
  }, /*#__PURE__*/React.createElement(ComponentPos, props)) : null, itemsSchema && List.isList(itemsSchema) ? // tuples in root level not possible
  // was wrong implementation <= 0.2.2
  null : schemaTypeToDistinct(itemsSchema.get('type')) === 'array' && itemsSchema.get('items') ? /*#__PURE__*/React.createElement(Grid, {
    item: true,
    style: {
      display: 'flex',
      flexDirection: 'column',
      flexGrow: 2
    }
  }, /*#__PURE__*/React.createElement(Grid, {
    container: true,
    spacing: 2
  }, (_itemsSchema$get = itemsSchema.get('items')) === null || _itemsSchema$get === void 0 ? void 0 : _itemsSchema$get.map((item, j) => /*#__PURE__*/React.createElement(PluginStack, {
    key: j,
    showValidity: showValidity,
    schemaKeys: schemaKeys === null || schemaKeys === void 0 ? void 0 : schemaKeys.push('items').push('items').push(j),
    storeKeys: ownKeys.push(j),
    schema: item,
    parentSchema: schema,
    level: level + 1
  })).valueSeq())) : /*#__PURE__*/React.createElement(PluginStack, {
    showValidity: showValidity,
    schema: itemsSchema,
    parentSchema: schema,
    storeKeys: ownKeys,
    level: level + 1,
    schemaKeys: schemaKeys === null || schemaKeys === void 0 ? void 0 : schemaKeys.push('items')
  }), ComponentMore ? /*#__PURE__*/React.createElement(Grid, {
    item: true,
    style: {
      display: 'flex',
      flexShrink: 0
    }
  }, /*#__PURE__*/React.createElement(ComponentMore, _extends({}, props, {
    btnSize: btnSize
  }))) : null)), index < listSize - 1 ? /*#__PURE__*/React.createElement(Divider, {
    key: 'b',
    style: {
      width: '100%'
    }
  }) : null];
};
export const GenericListItem = memo(GenericListItemBase);