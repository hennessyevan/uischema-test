import React from 'react';
import FormControl from '@material-ui/core/FormControl';
import Grid from '@material-ui/core/Grid';
import FormLabel from '@material-ui/core/FormLabel';
import { TransTitle } from '@ui-schema/ui-schema';
import Box from '@material-ui/core/Box';
export const GenericListContent = ({
  storeKeys,
  schemaKeys,
  ownKey,
  schema,
  listSize,
  onChange,
  showValidity,
  valid,
  errors,
  required,
  level,
  widgets,
  ComponentItemMore,
  ComponentItemPos,
  ComponentItem,
  ComponentFooter,
  btnAddShowLabel,
  btnAddStyle,
  btnSize: btnSizeProp,
  btnVariant: btnVariantProp,
  btnColor: btnColorProp,
  listSpacing = 3
}) => {
  const btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  const deleteBtnSize = schema.getIn(['view', 'deleteBtnSize']) || btnSizeProp || 'small';
  const btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  const btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  const notSortable = schema.get('notSortable');
  const notAddable = schema.get('notAddable');
  const notDeletable = schema.get('notDeletable');
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const info = InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/React.createElement(InfoRenderer, {
    schema: schema,
    variant: 'preview',
    openAs: 'embed',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors
  }) : null;
  return /*#__PURE__*/React.createElement(FormControl, {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    style: {
      width: '100%'
    }
  }, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/React.createElement(Box, {
    mb: 1
  }, /*#__PURE__*/React.createElement(Box, {
    mb: 1
  }, /*#__PURE__*/React.createElement(FormLabel, {
    component: "legend"
  }, /*#__PURE__*/React.createElement(TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }))), info) : null, schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/React.createElement(Box, {
    mb: 1
  }, info) : null, /*#__PURE__*/React.createElement(Grid, {
    container: true,
    spacing: listSpacing
  }, Array(listSize).fill(null).map((_val, i) => /*#__PURE__*/React.createElement(ComponentItem, {
    key: i,
    index: i,
    listSize: listSize,
    storeKeys: storeKeys,
    schemaKeys: schemaKeys,
    schema: schema,
    onChange: onChange,
    level: level,
    listRequired: required,
    btnSize: deleteBtnSize,
    notSortable: notSortable,
    notDeletable: notDeletable,
    showValidity: showValidity,
    ComponentPos: ComponentItemPos,
    ComponentMore: ComponentItemMore
  }))), ComponentFooter ? /*#__PURE__*/React.createElement(ComponentFooter, {
    schema: schema,
    required: required,
    storeKeys: storeKeys,
    onChange: onChange,
    errors: errors,
    showValidity: showValidity,
    btnSize: btnSize,
    btnAddShowLabel: btnAddShowLabel,
    btnAddStyle: btnAddStyle,
    btnColor: btnColor,
    btnVariant: btnVariant,
    notAddable: notAddable,
    notSortable: notSortable,
    notDeletable: notDeletable
  }) : null);
};