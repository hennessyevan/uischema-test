import React from 'react';
import { Map, List } from 'immutable';
import { Trans, beautifyKey, extractValue, memo, useUIMeta } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import Box from '@material-ui/core/Box';
import { TitleBoxRead } from '@ui-schema/ds-material/Component/TitleBoxRead';
import Typography from '@material-ui/core/Typography';

const checkActive = (list, name) => list && list.contains && typeof list.contains(name) !== 'undefined' ? list.contains(name) : false;

const OneOfArrayValuesBase = ({
  oneOfValues,
  value,
  dense
}) => {
  const vals = oneOfValues === null || oneOfValues === void 0 ? void 0 : oneOfValues.filter(v => checkActive(value, v.get('const')));
  return vals !== null && vals !== void 0 && vals.size ? vals.map((oneOfSchema, i) => {
    return /*#__PURE__*/React.createElement(Typography, {
      variant: dense ? 'body2' : 'body1',
      style: {
        paddingRight: i < vals.size - 1 ? 4 : 0
      },
      key: oneOfSchema.get('const')
    }, /*#__PURE__*/React.createElement(Trans, {
      schema: oneOfSchema.get('t'),
      text: oneOfSchema.get('title') || oneOfSchema.get('const'),
      context: Map({
        'relative': List(['title'])
      }),
      fallback: oneOfSchema.get('title') || beautifyKey(oneOfSchema.get('const'), oneOfSchema.get('tt'))
    }), i < vals.size - 1 ? ', ' : '');
  }).valueSeq() : /*#__PURE__*/React.createElement(Typography, {
    variant: dense ? 'body2' : 'body1',
    style: {
      opacity: 0.65
    }
  }, "-");
};

const OneOfArrayValues = extractValue(memo(OneOfArrayValuesBase));
export const WidgetOneOfRead = ({
  schema,
  storeKeys,
  showValidity,
  valid,
  errors,
  widgets
}) => {
  const hideTitle = schema.getIn(['view', 'hideTitle']);
  const oneOfVal = schema.getIn(['items', 'oneOf']);
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const hasInfo = Boolean(InfoRenderer && (schema === null || schema === void 0 ? void 0 : schema.get('info')));
  if (!oneOfVal) return null;
  const {
    readDense
  } = useUIMeta();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(TitleBoxRead, {
    hideTitle: hideTitle,
    hasInfo: hasInfo,
    InfoRenderer: InfoRenderer,
    valid: valid,
    errors: errors,
    storeKeys: storeKeys,
    schema: schema
  }), /*#__PURE__*/React.createElement(Box, {
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/React.createElement(OneOfArrayValues, {
    oneOfValues: oneOfVal,
    storeKeys: storeKeys,
    schema: schema,
    dense: Boolean(readDense)
  })), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};