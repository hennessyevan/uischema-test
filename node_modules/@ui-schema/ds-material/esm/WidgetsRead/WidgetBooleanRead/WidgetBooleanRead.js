import React from 'react';
import Box from '@material-ui/core/Box';
import IcYes from '@material-ui/icons/CheckCircle';
import IcNo from '@material-ui/icons/CancelOutlined';
import Typography from '@material-ui/core/Typography';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import { useUIMeta } from '@ui-schema/ui-schema';
import { TitleBoxRead } from '@ui-schema/ds-material/Component/TitleBoxRead';
export const WidgetBooleanRead = ({
  storeKeys,
  schema,
  value,
  showValidity,
  valid,
  errors,
  style,
  widgets,
  IconYes,
  IconNo
}) => {
  const hideTitle = Boolean(schema.getIn(['view', 'hideTitle']));
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const hasInfo = Boolean(InfoRenderer && (schema === null || schema === void 0 ? void 0 : schema.get('info')));
  const {
    readDense
  } = useUIMeta();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    style: style
  }, /*#__PURE__*/React.createElement(TitleBoxRead, {
    hideTitle: hideTitle,
    hasInfo: hasInfo,
    InfoRenderer: InfoRenderer,
    valid: valid,
    errors: errors,
    storeKeys: storeKeys,
    schema: schema
  }), /*#__PURE__*/React.createElement(Typography, {
    variant: readDense ? 'body2' : 'body1'
  }, value ? IconYes ? /*#__PURE__*/React.createElement(IconYes, {
    fontSize: 'small'
  }) : /*#__PURE__*/React.createElement(IcYes, {
    fontSize: 'small'
  }) : IconNo ? /*#__PURE__*/React.createElement(IconNo, {
    fontSize: 'small'
  }) : /*#__PURE__*/React.createElement(IcNo, {
    fontSize: 'small'
  })), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  })));
};