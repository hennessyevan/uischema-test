import React from 'react';
import { beautifyKey, extractValue, memo, Trans, useUIMeta } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import Chip from '@material-ui/core/Chip';
import Box from '@material-ui/core/Box';
import { List, Map } from 'immutable';
import { TitleBoxRead } from '@ui-schema/ds-material/Component/TitleBoxRead';
import Typography from '@material-ui/core/Typography';
export const WidgetChipsReadBase = ({
  storeKeys,
  schema,
  value,
  showValidity,
  errors,
  valid,
  widgets
}) => {
  const {
    readDense
  } = useUIMeta();
  if (!schema) return null;
  const oneOfVal = schema.getIn(['items', 'oneOf']);
  if (!oneOfVal) return null;
  const hideTitle = schema.getIn(['view', 'hideTitle']);
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const hasInfo = Boolean(InfoRenderer && (schema === null || schema === void 0 ? void 0 : schema.get('info')));
  const currentValue = typeof value !== 'undefined' ? value : List(schema.get('default')) || List();
  const oneOfValues = oneOfVal.filter(v => (currentValue === null || currentValue === void 0 ? void 0 : currentValue.indexOf(v.get('const'))) !== -1);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(TitleBoxRead, {
    hideTitle: hideTitle,
    hasInfo: hasInfo,
    InfoRenderer: InfoRenderer,
    valid: valid,
    errors: errors,
    storeKeys: storeKeys,
    schema: schema
  }), /*#__PURE__*/React.createElement(Box, {
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, oneOfValues !== null && oneOfValues !== void 0 && oneOfValues.size ? oneOfValues.map(oneOfSchema => /*#__PURE__*/React.createElement(Chip, {
    key: oneOfSchema.get('const'),
    label: /*#__PURE__*/React.createElement(Trans, {
      schema: oneOfSchema.get('t'),
      text: oneOfSchema.get('title') || oneOfSchema.get('const'),
      context: Map({
        'relative': List(['title'])
      }),
      fallback: oneOfSchema.get('title') || beautifyKey(oneOfSchema.get('const'), oneOfSchema.get('tt'))
    }),
    style: {
      marginRight: 4,
      marginBottom: readDense ? 2 : 4
    },
    size: !readDense && schema.getIn(['view', 'size']) === 'medium' ? 'medium' : 'small',
    variant: 'default',
    color: 'primary'
  })).valueSeq() : /*#__PURE__*/React.createElement(Typography, {
    variant: readDense ? 'body2' : 'body1',
    style: {
      opacity: 0.65
    }
  }, "-")), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};
export const WidgetChipsRead = extractValue(memo(WidgetChipsReadBase));