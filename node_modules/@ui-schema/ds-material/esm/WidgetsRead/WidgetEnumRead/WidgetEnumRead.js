import { Map, List } from 'immutable';
import { useUIMeta, beautifyKey } from '@ui-schema/ui-schema';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText';
import React from 'react';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { TitleBoxRead } from '@ui-schema/ds-material/Component/TitleBoxRead';
export const WidgetEnumRead = ({
  storeKeys,
  schema,
  value,
  showValidity,
  valid,
  errors,
  style,
  onClick,
  t,
  widgets
}) => {
  const hideTitle = schema.getIn(['view', 'hideTitle']);
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const hasInfo = Boolean(InfoRenderer && (schema === null || schema === void 0 ? void 0 : schema.get('info')));
  const {
    readDense
  } = useUIMeta();
  if (!schema) return null;
  const enum_val = schema.get('enum');
  if (!enum_val) return null;
  const Translated = typeof value === 'string' ? t(value, Map({
    relative: List(['enum', value])
  }), schema.get('t')) : undefined;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    onClick: onClick,
    style: style
  }, /*#__PURE__*/React.createElement(TitleBoxRead, {
    hideTitle: hideTitle,
    hasInfo: hasInfo,
    InfoRenderer: InfoRenderer,
    valid: valid,
    errors: errors,
    storeKeys: storeKeys,
    schema: schema
  }), /*#__PURE__*/React.createElement(Typography, {
    variant: readDense ? 'body2' : 'body1'
  }, typeof Translated === 'string' || typeof Translated === 'function' || typeof Translated === 'number' ? typeof Translated === 'function' ?
  /*#__PURE__*/
  // @ts-ignore
  React.createElement(Translated, null) : Translated : typeof value !== 'undefined' ? beautifyKey(value, schema.get('ttEnum')) + '' : /*#__PURE__*/React.createElement("span", {
    style: {
      opacity: 0.65
    }
  }, "-")), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  })));
};