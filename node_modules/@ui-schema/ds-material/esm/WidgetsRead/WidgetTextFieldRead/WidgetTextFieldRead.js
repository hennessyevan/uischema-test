import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["schema"];
import React from 'react';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { ValidityHelperText } from '@ui-schema/ds-material/Component/LocaleHelperText/LocaleHelperText';
import { useUIMeta } from '@ui-schema/ui-schema';
import { TitleBoxRead } from '@ui-schema/ds-material/Component/TitleBoxRead';
export const StringRendererRead = ({
  multiline,
  storeKeys,
  schema,
  value,
  showValidity,
  valid,
  errors,
  style,
  onClick,
  widgets
}) => {
  const hideTitle = Boolean(schema.getIn(['view', 'hideTitle']));
  const InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  const lines = multiline && typeof value === 'string' ? value.split('\n') : [];
  const hasInfo = Boolean(InfoRenderer && (schema === null || schema === void 0 ? void 0 : schema.get('info')));
  const {
    readDense
  } = useUIMeta();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    onClick: onClick,
    style: style
  }, /*#__PURE__*/React.createElement(TitleBoxRead, {
    hideTitle: hideTitle,
    hasInfo: hasInfo,
    InfoRenderer: InfoRenderer,
    valid: valid,
    errors: errors,
    storeKeys: storeKeys,
    schema: schema
  }), multiline ? typeof value === 'string' ? lines.map((line, i) => /*#__PURE__*/React.createElement(Typography, {
    key: i,
    gutterBottom: i < lines.length - 1,
    variant: readDense ? 'body2' : 'body1'
  }, line)) : /*#__PURE__*/React.createElement(Typography, null, /*#__PURE__*/React.createElement("span", {
    style: {
      opacity: 0.65
    }
  }, "-")) : /*#__PURE__*/React.createElement(Typography, {
    variant: readDense ? 'body2' : 'body1'
  }, typeof value === 'string' || typeof value === 'number' ? value : /*#__PURE__*/React.createElement("span", {
    style: {
      opacity: 0.65
    }
  }, "-")), /*#__PURE__*/React.createElement(ValidityHelperText, {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  })));
};
export const TextRendererRead = _ref => {
  let {
    schema
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(StringRendererRead, _extends({}, props, {
    schema: schema,
    multiline: true
  }));
};
export const NumberRendererRead = props => {
  return /*#__PURE__*/React.createElement(StringRendererRead, _extends({}, props, {
    type: 'number'
  }));
};