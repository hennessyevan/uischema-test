"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaGridItem = exports.SchemaGridHandler = exports.RootRenderer = exports.GroupRenderer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var SchemaGridItem = function SchemaGridItem(_ref) {
  var schema = _ref.schema,
      children = _ref.children,
      defaultMd = _ref.defaultMd,
      style = _ref.style,
      className = _ref.className,
      classes = _ref.classes;
  var view = schema ? schema.get('view') : undefined;
  var viewXs = view ? view.get('sizeXs') || 12 : 12;
  var viewSm = view ? view.get('sizeSm') : undefined;
  var viewMd = view ? view.get('sizeMd') : defaultMd;
  var viewLg = view ? view.get('sizeLg') : undefined;
  var viewXl = view ? view.get('sizeXl') : undefined;
  return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    item: true,
    xs: viewXs,
    sm: viewSm,
    md: viewMd,
    lg: viewLg,
    xl: viewXl,
    style: style,
    className: className,
    classes: classes
  }, children);
};

exports.SchemaGridItem = SchemaGridItem;

var RootRenderer = function RootRenderer(_ref2) {
  var children = _ref2.children;
  return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    container: true,
    spacing: 0
  }, children);
};

exports.RootRenderer = RootRenderer;

var GroupRenderer = function GroupRenderer(_ref3) {
  var schema = _ref3.schema,
      noGrid = _ref3.noGrid,
      _ref3$spacing = _ref3.spacing,
      spacing = _ref3$spacing === void 0 ? 2 : _ref3$spacing,
      style = _ref3.style,
      className = _ref3.className,
      children = _ref3.children;
  return noGrid ? children : /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    container: true,
    wrap: 'wrap',
    spacing: typeof schema.getIn(['view', 'spacing']) === 'number' ? schema.getIn(['view', 'spacing']) : spacing,
    style: style,
    className: className
  }, children);
};

exports.GroupRenderer = GroupRenderer;

var SchemaGridHandler = function SchemaGridHandler(props) {
  var schema = props.schema,
      noGrid = props.noGrid,
      isVirtual = props.isVirtual,
      currentPluginIndex = props.currentPluginIndex;
  var next = currentPluginIndex + 1;
  var Plugin = (0, _PluginStack.getNextPlugin)(next, props.widgets);

  if (noGrid || isVirtual || schema.getIn(['view', 'noGrid'])) {
    return /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
      currentPluginIndex: next
    }));
  }

  var align = schema.getIn(['view', 'align']);

  var style = _react["default"].useMemo(function () {
    return {
      textAlign: align
    };
  }, [align]);

  return /*#__PURE__*/_react["default"].createElement(SchemaGridItem, {
    schema: schema,
    style: style
  }, /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: next
  })));
};

exports.SchemaGridHandler = SchemaGridHandler;