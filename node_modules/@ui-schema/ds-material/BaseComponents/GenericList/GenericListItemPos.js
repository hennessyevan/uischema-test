"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericListItemPos = void 0;

var _react = _interopRequireDefault(require("react"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _KeyboardArrowUp = _interopRequireDefault(require("@material-ui/icons/KeyboardArrowUp"));

var _KeyboardArrowDown = _interopRequireDefault(require("@material-ui/icons/KeyboardArrowDown"));

var _uiSchema = require("@ui-schema/ui-schema");

var _immutable = require("immutable");

var _Tooltip = require("@ui-schema/ds-material/Component/Tooltip/Tooltip");

var GenericListItemPos = function GenericListItemPos(_ref) {
  var index = _ref.index,
      listSize = _ref.listSize,
      listRequired = _ref.listRequired,
      schema = _ref.schema,
      onChange = _ref.onChange,
      storeKeys = _ref.storeKeys,
      notSortable = _ref.notSortable,
      _ref$btnSize = _ref.btnSize,
      btnSize = _ref$btnSize === void 0 ? 'small' : _ref$btnSize;
  var readOnly = schema.get('readOnly');
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !readOnly && !notSortable && index > 0 ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: btnSize,
    style: {
      margin: '0 auto'
    },
    onClick: function onClick() {
      return onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-move',
        fromIndex: index,
        toIndex: index - 1,
        schema: schema,
        required: listRequired
      });
    }
  }, /*#__PURE__*/_react["default"].createElement(_Tooltip.AccessTooltipIcon, {
    title: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      text: 'labels.move-to-position',
      context: (0, _immutable.Map)({
        nextIndex: index + 1 - 1
      })
    })
  }, /*#__PURE__*/_react["default"].createElement(_KeyboardArrowUp["default"], {
    fontSize: 'inherit',
    style: {
      margin: btnSize === 'small' ? 2 : undefined
    }
  }))) : null, /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    component: 'p',
    variant: 'caption',
    align: 'center',
    style: {
      margin: '6px 0',
      minWidth: '2rem'
    }
  }, index + 1, ".", /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    component: 'span',
    variant: 'srOnly'
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
    text: 'labels.entry'
  }))), !readOnly && !notSortable && index < listSize - 1 ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    size: btnSize,
    style: {
      margin: '0 auto'
    },
    onClick: function onClick() {
      return onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-move',
        fromIndex: index,
        toIndex: index + 1,
        schema: schema,
        required: listRequired
      });
    }
  }, /*#__PURE__*/_react["default"].createElement(_Tooltip.AccessTooltipIcon, {
    title: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      text: 'labels.move-to-position',
      context: (0, _immutable.Map)({
        nextIndex: index + 1 + 1
      })
    })
  }, /*#__PURE__*/_react["default"].createElement(_KeyboardArrowDown["default"], {
    fontSize: 'inherit',
    style: {
      margin: btnSize === 'small' ? 2 : undefined
    }
  }))) : null);
};

exports.GenericListItemPos = GenericListItemPos;