"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericListFooter = void 0;

var _ListButton = require("@ui-schema/ds-material/Component/ListButton");

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _uiSchema = require("@ui-schema/ui-schema");

var _immutable = require("immutable");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText");

var _react = _interopRequireDefault(require("react"));

var _Box = _interopRequireDefault(require("@material-ui/core/Box"));

var GenericListFooter = function GenericListFooter(_ref) {
  var schema = _ref.schema,
      required = _ref.required,
      onChange = _ref.onChange,
      storeKeys = _ref.storeKeys,
      notAddable = _ref.notAddable,
      btnColor = _ref.btnColor,
      btnVariant = _ref.btnVariant,
      btnSize = _ref.btnSize,
      btnAddShowLabel = _ref.btnAddShowLabel,
      btnAddStyle = _ref.btnAddStyle,
      errors = _ref.errors,
      showValidity = _ref.showValidity;
  return /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    mt: 2
  }, !schema.get('readOnly') && !notAddable ? /*#__PURE__*/_react["default"].createElement(_ListButton.ListButton, {
    onClick: function onClick() {
      onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-add',
        schema: schema,
        required: required
      });
    },
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    showLabel: btnAddShowLabel,
    style: btnAddStyle,
    Icon: _Add["default"],
    title: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      text: 'labels.add-item',
      context: (0, _immutable.Map)({
        actionLabels: schema.get('listActionLabels')
      })
    })
  }) : null, /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText
  /*
   * only pass down errors which are not for a specific sub-schema
   * todo: check if all needed are passed down
   */
  , {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.GenericListFooter = GenericListFooter;