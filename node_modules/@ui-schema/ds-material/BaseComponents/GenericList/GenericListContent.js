"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericListContent = void 0;

var _react = _interopRequireDefault(require("react"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _FormLabel = _interopRequireDefault(require("@material-ui/core/FormLabel"));

var _uiSchema = require("@ui-schema/ui-schema");

var _Box = _interopRequireDefault(require("@material-ui/core/Box"));

var GenericListContent = function GenericListContent(_ref) {
  var storeKeys = _ref.storeKeys,
      schemaKeys = _ref.schemaKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      listSize = _ref.listSize,
      onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      valid = _ref.valid,
      errors = _ref.errors,
      required = _ref.required,
      level = _ref.level,
      widgets = _ref.widgets,
      ComponentItemMore = _ref.ComponentItemMore,
      ComponentItemPos = _ref.ComponentItemPos,
      ComponentItem = _ref.ComponentItem,
      ComponentFooter = _ref.ComponentFooter,
      btnAddShowLabel = _ref.btnAddShowLabel,
      btnAddStyle = _ref.btnAddStyle,
      btnSizeProp = _ref.btnSize,
      btnVariantProp = _ref.btnVariant,
      btnColorProp = _ref.btnColor,
      _ref$listSpacing = _ref.listSpacing,
      listSpacing = _ref$listSpacing === void 0 ? 3 : _ref$listSpacing;
  var btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  var deleteBtnSize = schema.getIn(['view', 'deleteBtnSize']) || btnSizeProp || 'small';
  var btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  var btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  var notSortable = schema.get('notSortable');
  var notAddable = schema.get('notAddable');
  var notDeletable = schema.get('notDeletable');
  var InfoRenderer = widgets === null || widgets === void 0 ? void 0 : widgets.InfoRenderer;
  var info = InfoRenderer && schema !== null && schema !== void 0 && schema.get('info') ? /*#__PURE__*/_react["default"].createElement(InfoRenderer, {
    schema: schema,
    variant: 'preview',
    openAs: 'embed',
    storeKeys: storeKeys,
    valid: valid,
    errors: errors
  }) : null;
  return /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
    required: required,
    error: !valid && showValidity,
    component: "fieldset",
    style: {
      width: '100%'
    }
  }, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    mb: 1
  }, /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    mb: 1
  }, /*#__PURE__*/_react["default"].createElement(_FormLabel["default"], {
    component: "legend"
  }, /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }))), info) : null, schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    mb: 1
  }, info) : null, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    container: true,
    spacing: listSpacing
  }, Array(listSize).fill(null).map(function (_val, i) {
    return /*#__PURE__*/_react["default"].createElement(ComponentItem, {
      key: i,
      index: i,
      listSize: listSize,
      storeKeys: storeKeys,
      schemaKeys: schemaKeys,
      schema: schema,
      onChange: onChange,
      level: level,
      listRequired: required,
      btnSize: deleteBtnSize,
      notSortable: notSortable,
      notDeletable: notDeletable,
      showValidity: showValidity,
      ComponentPos: ComponentItemPos,
      ComponentMore: ComponentItemMore
    });
  })), ComponentFooter ? /*#__PURE__*/_react["default"].createElement(ComponentFooter, {
    schema: schema,
    required: required,
    storeKeys: storeKeys,
    onChange: onChange,
    errors: errors,
    showValidity: showValidity,
    btnSize: btnSize,
    btnAddShowLabel: btnAddShowLabel,
    btnAddStyle: btnAddStyle,
    btnColor: btnColor,
    btnVariant: btnVariant,
    notAddable: notAddable,
    notSortable: notSortable,
    notDeletable: notDeletable
  }) : null);
};

exports.GenericListContent = GenericListContent;