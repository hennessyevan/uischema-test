"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableRendererMemo = exports.TableRendererExtractor = exports.TableRendererBaseMemo = exports.TableRendererBase = exports.TableRenderer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _reactUid = require("react-uid");

var _uiSchema = require("@ui-schema/ui-schema");

var _immutable = require("immutable");

var _Table = _interopRequireDefault(require("@material-ui/core/Table"));

var _TableBody = _interopRequireDefault(require("@material-ui/core/TableBody"));

var _TableContainer = _interopRequireDefault(require("@material-ui/core/TableContainer"));

var _TableContext = require("@ui-schema/ds-material/BaseComponents/Table/TableContext");

var _excluded = ["value", "internalValue", "errors", "valid"];

var TableRendererBase = function TableRendererBase(_ref) {
  var _itemsSchema$get, _itemsSchema$get2;

  var storeKeys = _ref.storeKeys,
      ownKey = _ref.ownKey,
      schema = _ref.schema,
      onChange = _ref.onChange,
      showValidity = _ref.showValidity,
      level = _ref.level,
      widgets = _ref.widgets,
      TableRowRenderer = _ref.TableRowRenderer,
      TableFooter = _ref.TableFooter,
      TableHeader = _ref.TableHeader,
      listSize = _ref.listSize,
      t = _ref.t,
      noFirstPageButton = _ref.noFirstPageButton,
      noLastPageButton = _ref.noLastPageButton,
      btnAddShowLabel = _ref.btnAddShowLabel,
      btnAddStyle = _ref.btnAddStyle,
      rowsPerPage = _ref.rowsPerPage,
      rowsShowAll = _ref.rowsShowAll,
      btnSizeProp = _ref.btnSize,
      btnVariantProp = _ref.btnVariant,
      btnColorProp = _ref.btnColor;
  var uid = (0, _reactUid.useUID)();

  var _React$useState = _react["default"].useState(0),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      page = _React$useState2[0],
      setPage = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(rowsPerPage.first()),
      _React$useState4 = (0, _slicedToArray2["default"])(_React$useState3, 2),
      rows = _React$useState4[0],
      setRows = _React$useState4[1];

  var btnSize = schema.getIn(['view', 'btnSize']) || btnSizeProp || 'small';
  var btnVariant = schema.getIn(['view', 'btnVariant']) || btnVariantProp || undefined;
  var btnColor = schema.getIn(['view', 'btnColor']) || btnColorProp || undefined;
  var dense = schema.getIn(['view', 'dense']) || false;
  var itemsSchema = schema.get('items');
  var readOnly = schema.get('readOnly');
  var currentRows = rows === -1 ? listSize || 0 : rows;
  var currentRowsStartVisible = page * currentRows;
  var validItemSchema = itemsSchema && _immutable.Map.isMap(itemsSchema) && (0, _uiSchema.schemaTypeIsAny)(itemsSchema.get('type'), ['array', 'object']);

  if (process.env.NODE_ENV === 'development' && !validItemSchema) {
    console.error('TableRenderer invalid `items` schema at storeKeys:', storeKeys === null || storeKeys === void 0 ? void 0 : storeKeys.toJS(), itemsSchema.toJS());
  }

  var visibleCols = ((_itemsSchema$get = itemsSchema.get('items')) === null || _itemsSchema$get === void 0 ? void 0 : _itemsSchema$get.filter(function (p) {
    return !p.get('hidden');
  })) || ((_itemsSchema$get2 = itemsSchema.get('properties')) === null || _itemsSchema$get2 === void 0 ? void 0 : _itemsSchema$get2.filter(function (p) {
    return !p.get('hidden');
  }).keySeq());
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !schema.getIn(['view', 'hideTitle']) ? /*#__PURE__*/_react["default"].createElement(_uiSchema.TransTitle, {
    schema: schema,
    storeKeys: storeKeys,
    ownKey: ownKey
  }) : null, /*#__PURE__*/_react["default"].createElement(_TableContainer["default"], null, /*#__PURE__*/_react["default"].createElement(_Table["default"], {
    size: dense ? 'small' : 'medium'
  }, /*#__PURE__*/_react["default"].createElement(TableHeader, {
    uid: uid,
    validItemSchema: validItemSchema,
    itemsSchema: itemsSchema,
    schema: schema,
    storeKeys: storeKeys,
    dense: dense,
    readOnly: readOnly
  }), /*#__PURE__*/_react["default"].createElement(_TableBody["default"], null, validItemSchema && listSize ? Array(listSize).fill(null).map(function (_val, i) {
    var isVirtual = i < currentRowsStartVisible || i >= currentRowsStartVisible + currentRows;
    return /*#__PURE__*/_react["default"].createElement(_uiSchema.PluginStack, {
      key: i,
      storeKeys: storeKeys.push(i),
      schema: itemsSchema,
      parentSchema: schema,
      level: level,
      isVirtual: isVirtual,
      noGrid: true,
      widgets: widgets,
      WidgetOverride: TableRowRenderer,
      setPage: setPage,
      showRows: isVirtual ? undefined : rows,
      uid: uid // todo: some table rows like `DragDrop` would need info like "is-first-row", "is-last-row", "is-only-row"
      //listSize={listSize}
      ,
      dense: dense
    });
  }) : null), /*#__PURE__*/_react["default"].createElement(TableFooter, {
    colSize: (visibleCols === null || visibleCols === void 0 ? void 0 : visibleCols.size) || 0,
    t: t,
    listSize: listSize,
    listSizeCurrent: listSize,
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    btnShowLabel: btnAddShowLabel,
    btnStyle: btnAddStyle,
    schema: schema,
    setPage: setPage,
    page: page,
    setRows: setRows,
    rows: rows,
    storeKeys: storeKeys,
    showValidity: showValidity,
    onChange: onChange,
    dense: dense,
    readOnly: readOnly,
    rowsPerPage: rowsPerPage,
    rowsShowAll: rowsShowAll,
    noFirstPageButton: noFirstPageButton,
    noLastPageButton: noLastPageButton
  }))));
};

exports.TableRendererBase = TableRendererBase;
var TableRendererBaseMemo = (0, _uiSchema.memo)(TableRendererBase);
exports.TableRendererBaseMemo = TableRendererBaseMemo;

var TableRendererExtractor = function TableRendererExtractor(_ref2) {
  var value = _ref2.value,
      internalValue = _ref2.internalValue,
      errors = _ref2.errors,
      valid = _ref2.valid,
      props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);

  var _useUIMeta = (0, _uiSchema.useUIMeta)(),
      t = _useUIMeta.t; // extracting and calculating the list size here, not passing down the actual list for performance reasons
  // https://github.com/ui-schema/ui-schema/issues/115


  return /*#__PURE__*/_react["default"].createElement(_TableContext.TableContext.Provider, {
    value: {
      errors: errors,
      valid: valid
    }
  }, /*#__PURE__*/_react["default"].createElement(TableRendererBaseMemo, (0, _extends2["default"])({}, props, {
    listSize: (value === null || value === void 0 ? void 0 : value.size) || 0,
    t: t
  })));
};

exports.TableRendererExtractor = TableRendererExtractor;
var TableRendererMemo = (0, _uiSchema.memo)(TableRendererExtractor);
exports.TableRendererMemo = TableRendererMemo;
var TableRenderer = (0, _uiSchema.extractValue)(TableRendererMemo);
exports.TableRenderer = TableRenderer;