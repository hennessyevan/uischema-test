"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableFooterErrorsBase = exports.TableFooterErrors = exports.TableFooterBase = exports.TableFooter = void 0;

var _react = _interopRequireDefault(require("react"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _uiSchema = require("@ui-schema/ui-schema");

var _LocaleHelperText = require("@ui-schema/ds-material/Component/LocaleHelperText");

var _TablePagination = _interopRequireDefault(require("@material-ui/core/TablePagination"));

var _TableFooter = _interopRequireDefault(require("@material-ui/core/TableFooter"));

var _TableCell = _interopRequireDefault(require("@material-ui/core/TableCell"));

var _TableRow = _interopRequireDefault(require("@material-ui/core/TableRow"));

var _TablePaginationActions = require("@ui-schema/ds-material/BaseComponents/Table/TablePaginationActions");

var _TableContext = require("@ui-schema/ds-material/BaseComponents/Table/TableContext");

var _immutable = require("immutable");

var _Component = require("@ui-schema/ds-material/Component");

var TableFooterErrorsBase = function TableFooterErrorsBase(_ref) {
  var _ref$colSize = _ref.colSize,
      colSize = _ref$colSize === void 0 ? 0 : _ref$colSize,
      showValidity = _ref.showValidity,
      schema = _ref.schema,
      valid = _ref.valid,
      errors = _ref.errors;
  return !valid && showValidity ? /*#__PURE__*/_react["default"].createElement(_TableRow["default"], null, /*#__PURE__*/_react["default"].createElement(_TableCell["default"], {
    colSpan: colSize + 1
  }, /*#__PURE__*/_react["default"].createElement(_LocaleHelperText.ValidityHelperText
  /*
   * only pass down errors which are not for a specific sub-schema
   * todo: check if all needed are passed down
   */
  , {
    errors: errors,
    showValidity: showValidity,
    schema: schema
  }))) : null;
};

exports.TableFooterErrorsBase = TableFooterErrorsBase;
var TableFooterErrors = (0, _TableContext.withTable)((0, _uiSchema.memo)(TableFooterErrorsBase));
exports.TableFooterErrors = TableFooterErrors;

var TableFooterBase = function TableFooterBase(_ref2) {
  var t = _ref2.t,
      dense = _ref2.dense,
      readOnly = _ref2.readOnly,
      page = _ref2.page,
      setPage = _ref2.setPage,
      setRows = _ref2.setRows,
      listSize = _ref2.listSize,
      listSizeCurrent = _ref2.listSizeCurrent,
      rows = _ref2.rows,
      onChange = _ref2.onChange,
      storeKeys = _ref2.storeKeys,
      schema = _ref2.schema,
      btnSize = _ref2.btnSize,
      btnStyle = _ref2.btnStyle,
      btnVariant = _ref2.btnVariant,
      btnColor = _ref2.btnColor,
      btnShowLabel = _ref2.btnShowLabel,
      colSize = _ref2.colSize,
      showValidity = _ref2.showValidity,
      rowsPerPage = _ref2.rowsPerPage,
      rowsShowAll = _ref2.rowsShowAll,
      noFirstPageButton = _ref2.noFirstPageButton,
      noLastPageButton = _ref2.noLastPageButton;
  return /*#__PURE__*/_react["default"].createElement(_TableFooter["default"], null, /*#__PURE__*/_react["default"].createElement(_TableRow["default"], null, /*#__PURE__*/_react["default"].createElement(_TableCell["default"], {
    size: dense ? 'small' : 'medium'
  }, !readOnly ? /*#__PURE__*/_react["default"].createElement(_Component.ListButton, {
    onClick: function onClick() {
      if (rows !== -1) {
        setPage(Number(Math.ceil((listSizeCurrent + 1) / rows)) - 1);
      }

      onChange({
        storeKeys: storeKeys,
        scopes: ['value', 'internal'],
        type: 'list-item-add',
        schema: schema
      });
    },
    btnSize: btnSize,
    btnVariant: btnVariant,
    btnColor: btnColor,
    showLabel: btnShowLabel,
    style: btnStyle,
    Icon: _Add["default"],
    title: /*#__PURE__*/_react["default"].createElement(_uiSchema.Trans, {
      text: 'labels.add-row',
      context: (0, _immutable.Map)({
        actionLabels: schema.get('tableActionLabels')
      })
    })
  }) : null), /*#__PURE__*/_react["default"].createElement(_TablePagination["default"] //rowsPerPageOptions={[5, 10, 25, 50, {label: t('pagination.all') as string, value: -1}]}
  , {
    rowsPerPageOptions: rowsShowAll ? rowsPerPage.push({
      label: t ? t('pagination.all') : 'all',
      value: -1
    }).toArray() : rowsPerPage.toArray(),
    colSpan: colSize + 1,
    count: listSize || 0,
    rowsPerPage: rows,
    page: page,
    SelectProps: {
      inputProps: {
        'aria-label': t ? t('pagination.rows-per-page') : 'per Page'
      } //native: true,

    },
    onPageChange: function onPageChange(_e, p) {
      return setPage(p);
    },
    onRowsPerPageChange: function onRowsPerPageChange(e) {
      setPage(0);
      setRows(Number(e.target.value));
    },
    backIconButtonProps: {
      size: btnSize,
      // using these props as a wrapper - as otherwise not possible to pass down
      noFirstPageButton: noFirstPageButton
    },
    nextIconButtonProps: {
      size: btnSize,
      style: {
        padding: btnSize === 'small' ? 2 : undefined
      },
      // using these props as a wrapper - as otherwise not possible to pass down
      noLastPageButton: noLastPageButton
    },
    ActionsComponent: _TablePaginationActions.TablePaginationActions,
    labelRowsPerPage: t ? t('pagination.rows-per-page') + ':' : undefined,
    labelDisplayedRows: function labelDisplayedRows(_ref3) {
      var from = _ref3.from,
          to = _ref3.to,
          count = _ref3.count;
      return "".concat(to !== -1 ? from + '-' + to : count, " ").concat(t ? t('pagination.of') : 'of', " ").concat(count !== -1 ? count : 0);
    }
  })), /*#__PURE__*/_react["default"].createElement(TableFooterErrors, {
    colSize: colSize,
    showValidity: showValidity,
    schema: schema
  }));
};

exports.TableFooterBase = TableFooterBase;
var TableFooter = (0, _uiSchema.memo)(TableFooterBase);
exports.TableFooter = TableFooter;