"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableRowRenderer = void 0;

var _react = _interopRequireDefault(require("react"));

var _uiSchema = require("@ui-schema/ui-schema");

var _immutable = require("immutable");

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _TableCell = _interopRequireDefault(require("@material-ui/core/TableCell"));

var _TableRow = _interopRequireDefault(require("@material-ui/core/TableRow"));

var _TableRowActionDelete = require("@ui-schema/ds-material/BaseComponents/Table/TableRowActionDelete");

var useTableRowStyle = (0, _makeStyles["default"])(function (theme) {
  return {
    cell: {
      padding: function padding(_ref) {
        var dense = _ref.dense;
        return dense ? "".concat(theme.spacing(0), "px ").concat(theme.spacing(0.5), "px") : "".concat(theme.spacing(1), "px ").concat(theme.spacing(1.5), "px");
      },
      overflow: 'hidden'
    },
    groupRenderer: {
      /*padding: ({dense}) =>
          dense ? `${theme.spacing(1)}px ${theme.spacing(0.5)}px` :
              `${theme.spacing(1.5)}px ${theme.spacing(1)}px`,*/
    }
  };
});
var PluginStackMemo = (0, _uiSchema.memo)(_uiSchema.PluginStack);

var TableRowRenderer = function TableRowRenderer(_ref2) {
  var _schema$getIn;

  var parentSchema = _ref2.parentSchema,
      schema = _ref2.schema,
      showValidity = _ref2.showValidity,
      widgets = _ref2.widgets,
      storeKeys = _ref2.storeKeys,
      ownKey = _ref2.ownKey,
      level = _ref2.level,
      uid = _ref2.uid,
      onChange = _ref2.onChange,
      required = _ref2.required,
      dense = _ref2.dense,
      setPage = _ref2.setPage,
      showRows = _ref2.showRows;
  var classes = useTableRowStyle({
    dense: dense
  }); // only supporting array tuple schemas or objects for table rows / items

  var cellSchema = schema.get('items') || schema.get('properties');
  var readOnly = Boolean(parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.get('readOnly'));
  var deleteOnEmpty = (parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.get('deleteOnEmpty')) || required;

  if ((0, _uiSchema.schemaTypeToDistinct)(schema.get('type')) === 'object' && (_schema$getIn = schema.getIn(['rowSortOrder'])) !== null && _schema$getIn !== void 0 && _schema$getIn.size) {
    var orderedCellSchema = (0, _immutable.OrderedMap)();
    schema.getIn(['rowSortOrder']).forEach(function (key) {
      orderedCellSchema = orderedCellSchema.set(key, cellSchema.get(key));
    }); // @ts-ignore

    cellSchema = orderedCellSchema;
  }

  var GroupRenderer = widgets.GroupRenderer;
  return /*#__PURE__*/_react["default"].createElement(_TableRow["default"], null, cellSchema.map(function (item, j) {
    return item.get('hidden') === true ? /*#__PURE__*/_react["default"].createElement(PluginStackMemo, {
      key: j,
      storeKeys: storeKeys.push(j),
      schema: item,
      parentSchema: parentSchema,
      level: level + 1,
      isVirtual: true
    }) : /*#__PURE__*/_react["default"].createElement(_TableCell["default"], {
      key: j,
      className: classes.cell,
      align: (0, _uiSchema.schemaTypeToDistinct)(item.get('type')) === 'boolean' ? 'center' : undefined
    }, (0, _uiSchema.schemaTypeToDistinct)(item.get('type')) === 'object' ? /*#__PURE__*/_react["default"].createElement(GroupRenderer, {
      level: 0,
      schema: item,
      className: classes.groupRenderer,
      storeKeys: storeKeys
    }, /*#__PURE__*/_react["default"].createElement(PluginStackMemo, {
      showValidity: showValidity,
      storeKeys: storeKeys.push(j),
      schema: item.setIn(['view', 'hideTitle'], true),
      parentSchema: parentSchema,
      level: level + 1,
      readOnly: readOnly // overwriting `widgets`, needs to be passed down further on depending on use cases:
      ,
      widgets: widgets // table field a11y labelling not supported for object,
      // must be done by in-cell translation
      // labelledBy={'uis-' + uid + '-tbl-' + j}

    })) : /*#__PURE__*/_react["default"].createElement(PluginStackMemo, {
      showValidity: showValidity,
      storeKeys: storeKeys.push(j),
      schema: item.setIn(['view', 'hideTitle'], true),
      parentSchema: parentSchema,
      level: level + 1,
      readOnly: readOnly,
      noGrid: true // overwriting `widgets`, needs to be passed down further on depending on use cases:
      ,
      widgets: widgets // custom table field prop for a11y labelling
      // todo: `j` is correct for lists, as it mimics the tuple part
      //       for Maps, this must be the property name
      ,
      labelledBy: 'uis-' + uid + '-tbl-' + j
    }));
  }).valueSeq(), !readOnly ? /*#__PURE__*/_react["default"].createElement(_TableCell["default"], {
    className: classes.cell
  }, /*#__PURE__*/_react["default"].createElement(_TableRowActionDelete.TableRowActionDelete, {
    storeKeys: storeKeys,
    onChange: onChange,
    setPage: setPage,
    index: ownKey,
    deleteOnEmpty: deleteOnEmpty,
    showRows: showRows,
    schema: parentSchema
  })) : null);
};

exports.TableRowRenderer = TableRowRenderer;