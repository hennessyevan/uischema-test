"use strict";

var _immutable = require("immutable");

var _ArrayValidator = require("@ui-schema/ui-schema/Validators/ArrayValidator");

var _Utils = require("@ui-schema/ui-schema/Utils");

var _ArrayValidator2 = require("@ui-schema/ui-schema/Validators/ArrayValidator/ArrayValidator");

var _TypeValidator = require("@ui-schema/ui-schema/Validators/TypeValidator/TypeValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

describe('validateArrayContent', function () {
  test.each([[(0, _Utils.createOrderedMap)({
    type: 'number'
  }), [1, 2, 3], undefined, 0], [(0, _Utils.createOrderedMap)({
    type: 'number'
  }), ['1'], undefined, 1], [(0, _Utils.createOrderedMap)({
    type: 'number'
  }), [1, 2, 3], undefined, 0], [(0, _Utils.createOrderedMap)({
    type: 'number'
  }), ['1'], undefined, 1], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }) // at <= 0.2.0-rc.3 this was correct (errCount: 0),
  // assuming this was correct, but resulted from incorrect array tuple implementation,
  // `items` array tuple validation is now implemented with:
  // - correct nesting in `GenericList`/`Table`/`VirtualWidgetRenderer`
  // - validation of arrays in `validateItems()`
  // - todo: currently only supporting one level of arrays in conditionals like `if`/`else`
  //         no problem for rendering, as validated by next schema level
  ]), [[1, 2, 3], [1, 2, 3], [1, 2, 3]], true, 0], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  })]), [1, 2, 3], true, 0], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  })]), [1, 2, 3], false, 0], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  })]), 'no-tuple', false, 1], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  }), (0, _Utils.createOrderedMap)({
    type: 'number'
  })]), [1, 2, 3, 4], false, 1], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  })]), [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3]], false, 0], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  })]), [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3]], true, 0], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  })]), [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6]], false, 1], [(0, _immutable.List)([(0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  }), (0, _Utils.createOrderedMap)({
    type: 'array'
  })]), [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], false, 1]
  /*
  `validateArrayContent` is only responsible for tuple validation `additionalItems` and checking if a tuple is really a tuple
  deep-schema validation is not it's responsible
   [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, 2, 3, 4], false, undefined, 1],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, 2, 3, 4], true, undefined, 0],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'string'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, 2, 3], false, undefined, 1],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, '2', false], false, undefined, 2],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, 2, 3, 4], false, false, 1],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'number'
      })
  ]), [1, 2, 3, 4], true, false, 0],
  [List([
      createOrderedMap({
          type: 'number'
      }),
      createOrderedMap({
          type: 'string'
      }),
      createOrderedMap({
          type: 'boolean'
      })
  ]), [1, 'text', true], true, false, 0],*/
  ])('validateArrayContent(%j, %j, %s): %s', function (schema, value, additionalItems, expected) {
    var r = (0, _ArrayValidator.validateArrayContent)(schema, value, additionalItems);

    if (r.err.errCount !== expected) {
      // @ts-ignore
      console.log('failed validateArrayContent', schema.toJS(), value && value.toJS ? value.toJS() : value, r.err.toJS());
    }

    expect(r.err.errCount).toBe(expected);
  });
});
describe('validateItems', function () {
  test.each([[{
    type: 'array',
    items: {
      type: 'number'
    }
  }, [1, 2, 3], 0], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, ['1', 2, 3], 1], [{
    type: 'array',
    items: {
      type: 'null'
    }
  }, [null, null, null], 0], [{
    type: 'array',
    items: {
      type: 'null'
    }
  }, [null, 0, null], 1], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, ['1', '2', 3], 2], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, (0, _immutable.List)([1, 2, 3]), 0], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, (0, _immutable.List)(['1', 2, 3]), 1], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, (0, _immutable.List)(['1', '2', 3]), 2], [{
    type: 'array'
  }, (0, _immutable.List)(['1', '2', 3]), 0], [{
    type: 'array',
    additionalItems: true,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }]
  }, [1, 2, 3], 0], [{
    type: 'array',
    additionalItems: false,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }]
  }, [1, 2, 3], 0], [{
    type: 'array',
    additionalItems: false,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }]
  }, 'no-tuple', 1], [{
    type: 'array',
    additionalItems: false,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }] // todo: currently `0` error, but for full `if` support needed
    //       only validating nested tuple schemas in render-flow

  }, ['no-tuple', 3, 'no-tuple'], 0], [{
    type: 'array',
    additionalItems: false,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }]
  }, [1, 2, 3, 4], 1], [{
    type: 'array',
    additionalItems: true,
    items: [{
      type: 'number'
    }, {
      type: 'number'
    }, {
      type: 'number'
    }]
  }, [1, 2, 3, 4], 0], [{
    type: 'array',
    items: {
      type: 'array',
      additionalItems: false,
      items: [{
        type: 'number'
      }, {
        type: 'number'
      }, {
        type: 'number'
      }]
    } // todo: currently `0` error, but for full `if` support needed
    //       only validating nested tuple schemas in render-flow

  }, [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3]], 0]])('validateItems(%j, %j)', function (schema, value, expected) {
    var r = (0, _ArrayValidator.validateItems)((0, _Utils.createOrderedMap)(schema), value);

    if (r.errCount !== expected) {
      // @ts-ignore
      console.log('failed validateItems', schema.toJS(), value && value.toJS ? value.toJS() : value, r.toJS());
    }

    expect(r.errCount).toBe(expected);
  });
});
describe('validateContains', function () {
  test.each([[{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, [1, 2, 3], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, ['1', '2', '3'], 3], [{
    type: 'array',
    contains: {
      type: 'null'
    }
  }, [1, 2, 3], 3], [{
    type: 'array',
    contains: {
      type: 'null'
    }
  }, [null, null, null], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, (0, _immutable.List)([1, 2, 3]), 0], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, (0, _immutable.List)(['1', '2', '3']), 3], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, ['1', '2', 3], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, [1, '2', '3'], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, [1], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2
  }, [1], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2
  }, [1, 2], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 0
  }, [], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2,
    maxContains: 4
  }, [1], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2,
    maxContains: 4
  }, [1, 2], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2,
    maxContains: 4
  }, [1, 2, 3], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2,
    maxContains: 4
  }, [1, 2, 3, 4], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 2,
    maxContains: 4
  }, [1, 2, 3, 4, 5], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    minContains: 0,
    maxContains: 1
  }, [], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    maxContains: 2
  }, [1, 2, 3], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    maxContains: 2
  }, [1, 2, 3, '3'], 2], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    maxContains: 2
  }, [1, 2], 0], [{
    type: 'array',
    contains: {
      type: 'number'
    },
    maxContains: 2
  }, [], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, [], 1], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, (0, _immutable.List)([]), 1], [{
    type: 'array'
  }, (0, _immutable.List)([]), 0], [{
    type: 'array',
    contains: {}
  }, (0, _immutable.List)([]), 0]])('validateContains(%j, %j)', function (schema, value, expected) {
    expect((0, _ArrayValidator.validateContains)((0, _Utils.createOrderedMap)(schema), value).errCount).toBe(expected);
  });
});
describe('validateAdditionalItems', function () {
  test.each([[true, [1], [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], true], [true, [1, 2], [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], true], [false, [1, 2], [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], false], [false, [1], [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], true], [false, (0, _immutable.List)([1, 2]), [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], false], [false, (0, _immutable.List)([1]), [(0, _Utils.createOrderedMap)({
    type: 'number'
  })], true]])('validateAdditionalItems(%s, %j, %j)', function (additionalItems, value, schema, expected) {
    expect((0, _ArrayValidator2.validateAdditionalItems)(additionalItems, value, (0, _immutable.List)(schema))).toBe(expected);
  });
});
describe('validateUniqueItems', function () {
  test.each([[{
    type: 'array',
    uniqueItems: true
  }, [1, 2, 3], true], [{
    type: 'array',
    uniqueItems: true
  }, [1, 2, 2], false], [{
    type: 'array',
    uniqueItems: false
  }, [2, 2], true], [{
    type: 'array'
  }, [2, 2], true], [{
    type: 'array',
    uniqueItems: true
  }, (0, _immutable.List)([1, 2, 3]), true], [{
    type: 'array',
    uniqueItems: true
  }, (0, _immutable.List)([1, 2, 2]), false], [{
    type: 'array',
    uniqueItems: true
  }, (0, _immutable.Map)({
    prop_a: 2,
    prop_b: 2
  }), true]])('validateUniqueItems(%j, %j)', function (schema, value, expected) {
    expect((0, _ArrayValidator.validateUniqueItems)((0, _Utils.createOrderedMap)(schema), value)).toBe(expected);
  });
});
describe('arrayValidator', function () {
  test.each([[(0, _immutable.OrderedMap)({
    type: 'array'
  }), (0, _immutable.List)(), true], [(0, _immutable.OrderedMap)({
    type: 'array'
  }), (0, _immutable.Map)(), false], [(0, _immutable.OrderedMap)({
    type: 'string'
  }), (0, _immutable.List)(), false], [(0, _immutable.OrderedMap)({}), (0, _immutable.List)(), false]])('.should(%j, %s)', function (schema, value, expectedValid) {
    // @ts-ignore
    expect(_ArrayValidator.arrayValidator.should({
      schema: schema,
      value: value
    })).toBe(expectedValid);
  });
  test.each([[{
    type: 'array',
    uniqueItems: true
  }, ['text1'], (0, _immutable.List)([_ArrayValidator.ERROR_DUPLICATE_ITEMS, (0, _immutable.Map)()]), true, false], [{
    type: 'array',
    uniqueItems: true
  }, ['text1', 'text1'], (0, _immutable.List)([_ArrayValidator.ERROR_DUPLICATE_ITEMS, (0, _immutable.Map)()]), false, true], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, [1, 2], (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)()]), true, false], [{
    type: 'array',
    items: {
      type: 'number'
    }
  }, ['1', 2], // has error, but childError, thus empty errors
  (0, _immutable.List)(), false, true], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, ['1', 2], (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)()]), true, false], [{
    type: 'array',
    contains: {
      type: 'number'
    }
  }, ['1'], (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)()]), false, true]])('.handle(%j, %s)', function (schema, value, error, expectedValid, expectedError) {
    var result = _ArrayValidator.arrayValidator.handle({
      schema: (0, _Utils.createOrderedMap)(schema),
      // @ts-ignore
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);

    if (error.size) {
      expect(result.errors.hasError(error.get(0))).toBe(expectedError);

      if (result.errors.hasError(error.get(0))) {
        var _result$errors$getErr;

        expect((_result$errors$getErr = result.errors.getError(error.get(0)).get(0)) === null || _result$errors$getErr === void 0 ? void 0 : _result$errors$getErr.equals(error.get(1))).toBe(expectedError);
      }
    } else {// todo: test childErrors for array items
    }
  });
});