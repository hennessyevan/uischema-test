"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateUniqueItems = exports.validateItems = exports.validateContains = exports.validateArrayContent = exports.validateAdditionalItems = exports.arrayValidator = exports.ERROR_NOT_FOUND_CONTAINS = exports.ERROR_MIN_CONTAINS = exports.ERROR_MAX_CONTAINS = exports.ERROR_DUPLICATE_ITEMS = exports.ERROR_ADDITIONAL_ITEMS = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _immutable = require("immutable");

var _validateSchema = require("@ui-schema/ui-schema/validateSchema");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

var _TypeValidator = require("@ui-schema/ui-schema/Validators/TypeValidator/TypeValidator");

var _schemaTypeIs = require("@ui-schema/ui-schema/Utils/schemaTypeIs");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ERROR_DUPLICATE_ITEMS = 'duplicate-items';
exports.ERROR_DUPLICATE_ITEMS = ERROR_DUPLICATE_ITEMS;
var ERROR_NOT_FOUND_CONTAINS = 'not-found-contains';
exports.ERROR_NOT_FOUND_CONTAINS = ERROR_NOT_FOUND_CONTAINS;
var ERROR_MIN_CONTAINS = 'min-contains';
exports.ERROR_MIN_CONTAINS = ERROR_MIN_CONTAINS;
var ERROR_MAX_CONTAINS = 'max-contains';
exports.ERROR_MAX_CONTAINS = ERROR_MAX_CONTAINS;
var ERROR_ADDITIONAL_ITEMS = 'additional-items';
exports.ERROR_ADDITIONAL_ITEMS = ERROR_ADDITIONAL_ITEMS;

var findDuplicates = function findDuplicates(arr) {
  return arr.filter(function (item, index) {
    return arr.indexOf(item) !== index;
  });
};
/**
 * @param itemsSchema single schema or tuple schema
 * @param value
 * @param additionalItems
 * @return {{err: ValidatorErrorsType, found: number}}
 */


var validateArrayContent = function validateArrayContent(itemsSchema, value) {
  var additionalItems = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var err = (0, _ValidatorErrors.createValidatorErrors)();
  var found = 0;

  if (_immutable.List.isList(itemsSchema) || Array.isArray(itemsSchema)) {
    // tuple validation
    if (_immutable.List.isList(value) || Array.isArray(value)) {
      // for tuples, the actual item must be an array/list also
      // todo: add values as array support
      // todo: implement tuple validation
      //   actually, only `additionalItems` should be needed to be validated here, the other values should be validated when the input for them is rendered
      //   as "only what is mounted can be entered and validated"
      //   but they must be usable for within conditional schemas
      if (!validateAdditionalItems(additionalItems, value, itemsSchema)) {
        // todo: add index of erroneous item; or at all as one context list, only one error instead of multiple?
        err = err.addError(ERROR_ADDITIONAL_ITEMS, (0, _immutable.Map)({}));
        found++;
      }
      /* example: further nested validation
      const listSize = itemsSchema.size || 0
      value.forEach((val, i) => {
          if(i < listSize) {
              let tmpErr = validateSchema(itemsSchema.get(i), val);
              if(tmpErr.hasError()) {
                  err = err.addErrors(tmpErr)
                  found++
              }
          }
      })*/

    } else {
      //console.log('val?.toJS()', /*val,*/ schema?.toJS(), value?.toJS())
      // when tuple schema but no-tuple value
      err = err.addError(_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
        actual: (0, _typeof2["default"])(value),
        arrayTupleValidation: true
      }));
      found++;
    }
  }
  /* else if(
     itemsSchema.get('type') === 'array' &&
     (List.isList(nestedItemsSchema) || Array.isArray(nestedItemsSchema))
  ) {
     // nested tuple validation
     console.log('nested tuple validation', itemsSchema?.toJS())
  } else if(
     itemsSchema.get('type') === 'array' &&
     (Map.isMap(nestedItemsSchema) || typeof nestedItemsSchema === 'object')
  ) {
     // a nested "one-schema-for-all" array, nested in the current array
     console.log('nested one-schema-for-all', itemsSchema?.toJS())
  }*/
  else if (!(0, _schemaTypeIs.schemaTypeIs)(itemsSchema.get('type'), 'array')) {
    // no nested array, one-schema for all items
    // not validating array content of array here, must be validated with next schema level
    var _iterator = _createForOfIteratorHelper(value),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var val = _step.value;
        var tmpErr = (0, _ValidatorErrors.createValidatorErrors)(); // single-validation
        // Cite from json-schema.org: When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.

        var tmpErr2 = (0, _validateSchema.validateSchema)(itemsSchema, val);

        if (tmpErr2.hasError()) {
          tmpErr = tmpErr.addErrors(tmpErr2);
        }

        if (tmpErr.errCount === 0) {
          found++;
        } else {
          err = err.addErrors(tmpErr);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return {
    err: err,
    found: found
  };
};

exports.validateArrayContent = validateArrayContent;

var validateAdditionalItems = function validateAdditionalItems(additionalItems, value, schema) {
  return additionalItems === true || additionalItems === false && (_immutable.List.isList(value) && value.size <= schema.size || Array.isArray(value) && value.length <= schema.size);
};

exports.validateAdditionalItems = validateAdditionalItems;

var validateItems = function validateItems(schema, value) {
  var items = schema.get('items');

  if (items && value) {
    var item_err = validateArrayContent(items, value, schema.get('additionalItems'));
    return item_err.err;
  }

  return (0, _ValidatorErrors.createValidatorErrors)();
};

exports.validateItems = validateItems;

var validateContains = function validateContains(schema, value) {
  var errors = (0, _ValidatorErrors.createValidatorErrors)();
  if (!(0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'array')) return errors;
  var contains = schema.get('contains');
  if (!contains) return errors;
  var contains_type = contains.get('type');
  if (!contains_type) return errors;
  var minContains = schema.get('minContains');
  var maxContains = schema.get('maxContains');
  var item_err = validateArrayContent(contains, value, undefined);

  if (item_err.found < 1 && typeof minContains === 'undefined' && typeof maxContains === 'undefined' || typeof minContains === 'number' && minContains > item_err.found || typeof maxContains === 'number' && maxContains < item_err.found) {
    if (item_err.err.errCount !== 0) {
      errors = errors.addErrors(item_err.err);
    }
  }

  if (typeof minContains === 'number' && minContains > item_err.found) {
    errors = errors.addError(ERROR_MIN_CONTAINS, (0, _immutable.Map)({
      minContains: minContains
    }));
  }

  if (typeof maxContains === 'number' && maxContains < item_err.found) {
    errors = errors.addError(ERROR_MAX_CONTAINS, (0, _immutable.Map)({
      maxContains: maxContains
    }));
  }

  if (minContains !== 0 && (Array.isArray(value) && value.length === 0 || _immutable.List.isList(value) && value.size === 0)) {
    errors = errors.addError(ERROR_NOT_FOUND_CONTAINS);
  }

  return errors;
};

exports.validateContains = validateContains;

var validateUniqueItems = function validateUniqueItems(schema, value) {
  var uniqueItems = schema.get('uniqueItems');

  if (uniqueItems && (_immutable.List.isList(value) || Array.isArray(value))) {
    var duplicates = findDuplicates(value);

    if (Array.isArray(duplicates)) {
      return duplicates.length === 0;
    } else if (_immutable.List.isList(duplicates)) {
      return duplicates.size === 0;
    }
  }

  return true;
};

exports.validateUniqueItems = validateUniqueItems;
var arrayValidator = {
  should: function should(_ref) {
    var schema = _ref.schema,
        value = _ref.value;
    return (0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'array') && (_immutable.List.isList(value) || Array.isArray(value));
  },
  handle: function handle(_ref2) {
    var schema = _ref2.schema,
        value = _ref2.value,
        errors = _ref2.errors,
        valid = _ref2.valid;
    // unique-items sub-schema is intended for dynamics and for statics, e.g. Selects could have duplicates but also a SimpleList of strings
    var uniqueItems = schema.get('uniqueItems');

    if (uniqueItems && value) {
      if (!validateUniqueItems(schema, value)) {
        valid = false;
        errors = errors.addError(ERROR_DUPLICATE_ITEMS);
      }
    }
    /*
     * `items` sub-schema validation is intended for dynamic-inputs like SimpleList or GenericList
     * - thus the validity must also be checked in the components rendering the sub-schema,
     * - when validation is done here, the parent receives the invalidations instead of the actual component that is invalid
     * - e.g. 2 out of 3 are invalid, only one error is visible on the parent-component
     * - but when the items are not valid, the parent should also know that something is invalid
     * - providing context `arrayItems = true` for errors makes it possible to distinct the errors in the parent-component
     * - full sub-schema validation is done (and possible) if the sub-schema is rendered through e.g. PluginStack isVirtual
     */


    var items = schema.get('items');

    if (items && value) {
      var items_err = validateItems(schema, value);

      if (items_err.hasError()) {
        valid = false; //errors = errors.addChildErrors(items_err);

        errors = errors.addErrorsToChild(items_err);
      }
    } // `contains` sub-schema is intended for components which may be dynamic, but the error is intended to be shown on the root-component and not the sub-schema, as not clear which-sub-schema it is, "1 out of n sub-schemas must be valid" can not logically translated to "specific sub-schema X is invalid"
    // todo: the error displayed on the the array component may be confusing, it should be possible to distinct between "own-errors" and child-errors
    //    maybe adding a possibility to update the validity for sub-schemas from the parent-component?


    var contains = schema.get('contains');

    if (contains && value) {
      var containsError = validateContains(schema, value);

      if (containsError.hasError()) {
        valid = false;
        errors = errors.addErrors(containsError);
      }
    }

    return {
      errors: errors,
      valid: valid
    };
  }
};
exports.arrayValidator = arrayValidator;