"use strict";

var _immutable = require("immutable");

var _ValueValidator = require("@ui-schema/ui-schema/Validators/ValueValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

/**
 * npm run tdd -- -u --testPathPattern=src/Validators/ValueValidator/ValueValidator-Enum.test.ts
 */
describe('validateEnum', function () {
  test.each([[(0, _immutable.List)(['text1', 'text2']), 'text1', true], [(0, _immutable.List)(['text1', 'text2']), 'text3', false], [(0, _immutable.List)(['text1', 'text2']), 'text1', true], [(0, _immutable.List)(['text1', 'text2']), 'text3', false], [(0, _immutable.List)(['text1', 'text2']), 'text1', true], [(0, _immutable.List)(['text1', 'text2']), 'text3', false], [(0, _immutable.List)([null]), null, true], [(0, _immutable.List)([null]), null, true], [(0, _immutable.List)(['text1', 'text2', null]), 'text1', true], [(0, _immutable.List)(['text1', 'text2', null]), null, true], [(0, _immutable.List)(['text1', 'text2']), 'text3', false], [['text1', 'text2'], 'text1', true], [['text1', 'text2'], 'text3', false], [(0, _immutable.List)([1, 2]), 1, true], [(0, _immutable.List)([1, 2]), 3, false], [(0, _immutable.List)([1, 2]), 1, true], [(0, _immutable.List)([1, 2]), 3, false], [(0, _immutable.List)([true]), true, true], [(0, _immutable.List)([true]), false, false], [(0, _immutable.List)([null]), null, true], [(0, _immutable.List)([null]), 'null', false], [(0, _immutable.List)([]), [], false], [[], [], false], [(0, _immutable.List)([(0, _immutable.List)([])]), [], true], [[[]], [], true], [(0, _immutable.List)([(0, _immutable.List)(['a', 'b']), (0, _immutable.List)([1, 2])]), ['a', 'b'], true], [(0, _immutable.List)([(0, _immutable.List)(['a', 'b']), (0, _immutable.List)([1, 2])]), ['b', 'a'], false], [(0, _immutable.List)([(0, _immutable.List)(['a', 'b']), (0, _immutable.List)([1, 2])]), [1, 2], true], [(0, _immutable.List)([(0, _immutable.List)(['a', 'b']), (0, _immutable.List)([1, 2])]), [2, 1], false], [[['a', 'b']], ['a', 'b'], true], [[['a', 'b']], ['b', 'a'], false], [[{}], {}, true], [[], {}, false], [[{
    a: 1
  }, {
    b: 2
  }], {
    a: 1
  }, true], [[{
    a: 1
  }, {
    b: 2
  }], {
    b: 2
  }, true], [(0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), true], [// note: even when the order is correct, an `OrderedMap` can be the same as a `Map`
  (0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.OrderedMap)({
    c: 3,
    d: 4
  }), false], [(0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.OrderedMap)({
    d: 4,
    c: 3
  }), false], [(0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.Map)({
    c: 3,
    d: 4
  }), true], [// note: even when the order is correct, an `Map` can be the same as a `OrderedMap`
  (0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.Map)({
    a: 1,
    b: 2
  }), false], [(0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.OrderedMap)({
    b: 2,
    a: 1
  }), false], [(0, _immutable.List)([(0, _immutable.OrderedMap)({
    a: 1,
    b: 2
  }), (0, _immutable.Map)({
    c: 3,
    d: 4
  })]), (0, _immutable.Map)({
    d: 4,
    c: 3
  }), true]])('validateEnum(%j, %j): %j', function (_enum, value, expected) {
    expect((0, _ValueValidator.validateEnum)(_enum, value)).toBe(expected);
  });
});
describe('valueValidatorEnum', function () {
  test.each([[{
    "enum": []
  }, 'text1', true], [{}, 'text1', false], [{
    "enum": []
  }, undefined, false]])('.should(%j, %s)', function (schema, value, expected) {
    expect(_ValueValidator.valueValidatorEnum.should({
      schema: (0, _immutable.OrderedMap)(schema),
      // @ts-ignore
      value: value
    })).toBe(expected);
  });
  test.each([[{
    type: 'string',
    "enum": (0, _immutable.List)(['text1', 'text2'])
  }, 'text1', _ValueValidator.ERROR_ENUM_MISMATCH, true, false], [{
    type: 'string',
    "enum": (0, _immutable.List)(['text1', 'text2'])
  }, 'text3', _ValueValidator.ERROR_ENUM_MISMATCH, false, true], [{
    type: 'string'
  }, 'text3', _ValueValidator.ERROR_ENUM_MISMATCH, true, false]])('.handle(%j, %s)', function (schema, value, error, expectedValid, expectedError) {
    var result = _ValueValidator.valueValidatorEnum.handle({
      schema: (0, _immutable.OrderedMap)(schema),
      // @ts-ignore
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);
    expect(result.errors.hasError(error)).toBe(expectedError);
  });
});