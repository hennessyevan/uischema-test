"use strict";

var _immutable = require("immutable");

var _ValueValidator = require("@ui-schema/ui-schema/Validators/ValueValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

describe('validateConst', function () {
  test('validateConst', function () {
    expect((0, _ValueValidator.validateConst)('text1', 'text1')).toBe(true);
    expect((0, _ValueValidator.validateConst)('text1', 'text2')).toBe(false);
    expect((0, _ValueValidator.validateConst)(null, null)).toBe(true);
    expect((0, _ValueValidator.validateConst)(1, 1)).toBe(true);
    expect((0, _ValueValidator.validateConst)(1, 2)).toBe(false);
    expect((0, _ValueValidator.validateConst)(true, true)).toBe(true);
    expect((0, _ValueValidator.validateConst)(true, false)).toBe(false);
    expect((0, _ValueValidator.validateConst)(null, null)).toBe(true);
    expect((0, _ValueValidator.validateConst)(null, 'null')).toBe(false);
  });
});
describe('valueValidatorConst', function () {
  test.each([[{
    "const": ''
  }, 'text1', true], [{}, 'text1', false], [{
    "const": ''
  }, undefined, false]])('.should(%j, %s)', function (schema, value, expected) {
    expect(_ValueValidator.valueValidatorConst.should({
      schema: (0, _immutable.OrderedMap)(schema),
      // @ts-ignore
      value: value
    })).toBe(expected);
  });
  var valueValidatorConstTestValues = [[{
    "const": 'text1'
  }, 'text1', (0, _immutable.List)([_ValueValidator.ERROR_CONST_MISMATCH, (0, _immutable.Map)({
    "const": 'text1'
  })]), true, false], [{
    "const": 'text1'
  }, 'text3', (0, _immutable.List)([_ValueValidator.ERROR_CONST_MISMATCH, (0, _immutable.Map)({
    "const": 'text1'
  })]), false, true], [{}, 'text3', (0, _immutable.List)([_ValueValidator.ERROR_CONST_MISMATCH, (0, _immutable.Map)({
    "const": 'text1'
  })]), true, false]];
  test.each(valueValidatorConstTestValues)('.handle(%j, %s)', function (schema, value, error, expectedValid, expectedError) {
    var result = _ValueValidator.valueValidatorConst.handle({
      schema: (0, _immutable.OrderedMap)(schema),
      // @ts-ignore
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);
    expect(result.errors.hasError(error.get(0))).toBe(expectedError);

    if (result.errors.hasError(error.get(0))) {
      var _result$errors$getErr;

      expect((_result$errors$getErr = result.errors.getError(error.get(0)).get(0)) === null || _result$errors$getErr === void 0 ? void 0 : _result$errors$getErr.equals(error.get(1))).toBe(expectedError);
    }
  });
});