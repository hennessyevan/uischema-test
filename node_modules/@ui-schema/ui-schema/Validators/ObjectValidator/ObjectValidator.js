"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateObject = exports.objectValidator = exports.ERROR_ADDITIONAL_PROPERTIES = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _immutable = require("immutable");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

var _validateSchema = require("@ui-schema/ui-schema/validateSchema");

var _schemaTypeIs = require("@ui-schema/ui-schema/Utils/schemaTypeIs");

var ERROR_ADDITIONAL_PROPERTIES = 'additional-properties';
exports.ERROR_ADDITIONAL_PROPERTIES = ERROR_ADDITIONAL_PROPERTIES;

var validateObject = function validateObject(schema, value) {
  var err = (0, _ValidatorErrors.createValidatorErrors)();

  if (!(0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'object') || !(_immutable.Map.isMap(value) || _immutable.Record.isRecord(value) || (0, _typeof2["default"])(value) === 'object') || _immutable.List.isList(value) || Array.isArray(value)) {
    return err;
  }

  if (schema.get('additionalProperties') === false && schema.get('properties') && (0, _typeof2["default"])(value) === 'object') {
    var hasAdditional = false;
    var keys = _immutable.Map.isMap(value) || _immutable.Record.isRecord(value) ? value.keySeq() : Object.keys(value);
    var schemaKeys = schema.get('properties').keySeq();
    keys.forEach(function (key) {
      // todo: add all invalid additional or change to `for key of value` to break after first invalid
      if (schemaKeys.indexOf(key) === -1) hasAdditional = true;
    });

    if (hasAdditional) {
      err = err.addError(ERROR_ADDITIONAL_PROPERTIES);
    }
  }

  if (schema.get('propertyNames') && (0, _typeof2["default"])(value) === 'object') {
    var _keys = _immutable.Map.isMap(value) || _immutable.Record.isRecord(value) ? value.keySeq() : Object.keys(value);

    _keys.forEach(function (key) {
      var tmp_err = (0, _validateSchema.validateSchema)(schema.get('propertyNames').set('type', 'string'), key);

      if (tmp_err.hasError()) {
        err = err.addErrors(tmp_err);
      }
    });
  }

  return err;
};

exports.validateObject = validateObject;
var objectValidator = {
  should: function should(_ref) {
    var schema = _ref.schema;
    return (0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'object');
  },
  handle: function handle(_ref2) {
    var schema = _ref2.schema,
        value = _ref2.value,
        errors = _ref2.errors,
        valid = _ref2.valid;
    var objectErrors = validateObject(schema, value);

    if (objectErrors !== null && objectErrors !== void 0 && objectErrors.hasError()) {
      valid = false;
      errors = errors.addErrors(objectErrors);
    }

    return {
      errors: errors,
      valid: valid
    };
  }
};
exports.objectValidator = objectValidator;