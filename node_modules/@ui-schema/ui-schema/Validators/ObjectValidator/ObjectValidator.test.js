"use strict";

var _immutable = require("immutable");

var _ObjectValidator = require("@ui-schema/ui-schema/Validators/ObjectValidator");

var _Utils = require("@ui-schema/ui-schema/Utils");

var _PatternValidator = require("@ui-schema/ui-schema/Validators/PatternValidator/PatternValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

describe('validateObject', function () {
  test.each([[{
    type: 'object'
  }, {}, 0], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'string'
      }
    }
  }, {
    name: 'demo'
  }, 0], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, {
    name: 'demo'
  }, 0], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, {
    name: 'demo',
    street: 'long-street'
  }, 1], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, (0, _Utils.createMap)({
    name: 'demo'
  }), 0], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, (0, _Utils.createMap)({
    name: 'demo',
    street: 'long-street'
  }), 1], [{
    type: 'object',
    propertyNames: {
      pattern: '^((?!user).)*$'
    }
  }, (0, _Utils.createMap)({
    name: 'abc'
  }), 0], [{
    type: 'object',
    propertyNames: {
      pattern: '^((?!user).)*$'
    }
  }, {
    name: 'abc'
  }, 0], [{
    type: 'object',
    propertyNames: {
      pattern: '^((?!user).)*$'
    }
  }, {
    name_user: 'abc'
  }, 1]])('validateObject(%j, %j)', function (schema, value, expected) {
    var r = (0, _ObjectValidator.validateObject)((0, _Utils.createOrderedMap)(schema), value);
    expect(r.errCount).toBe(expected);
  });
});
describe('objectValidator', function () {
  test.each([[(0, _immutable.OrderedMap)({
    type: 'object'
  }), true], [(0, _immutable.OrderedMap)({
    type: (0, _immutable.List)(['object'])
  }), true], [(0, _immutable.OrderedMap)({
    type: (0, _immutable.List)(['string'])
  }), false], [(0, _immutable.OrderedMap)({
    type: (0, _immutable.List)(['string', 'object'])
  }), true], [(0, _immutable.OrderedMap)({
    type: 'string'
  }), false], [(0, _immutable.OrderedMap)({}), false]])('.should(%j, %s)', function (schema, expectedValid) {
    expect(_ObjectValidator.objectValidator.should({
      schema: schema
    })).toBe(expectedValid);
  });
  test.each([[{
    type: 'object'
  }, {}, _ObjectValidator.ERROR_ADDITIONAL_PROPERTIES, true, false], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, {
    name: 'demo'
  }, _ObjectValidator.ERROR_ADDITIONAL_PROPERTIES, true, false], [{
    type: 'object',
    additionalProperties: false,
    properties: {
      name: {
        type: 'number'
      }
    }
  }, {
    name: 'demo',
    street: 'long-street'
  }, _ObjectValidator.ERROR_ADDITIONAL_PROPERTIES, false, true], [{
    type: 'object',
    propertyNames: {
      pattern: '^((?!user).)*$'
    }
  }, {
    name: 'demo'
  }, _PatternValidator.ERROR_PATTERN, true, false], [{
    type: 'object',
    propertyNames: {
      pattern: '^((?!user).)*$'
    }
  }, {
    name_user: 'demo'
  }, _PatternValidator.ERROR_PATTERN, false, true]])('.handle(%j, %s)', function (schema, value, error, expectedValid, expectedError) {
    var result = _ObjectValidator.objectValidator.handle({
      schema: (0, _Utils.createOrderedMap)(schema),
      // @ts-ignore
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);
    expect(result.errors.hasError(error)).toBe(expectedError);
  });
});