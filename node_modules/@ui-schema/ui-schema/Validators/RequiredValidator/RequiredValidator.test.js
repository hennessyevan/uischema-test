"use strict";

var _immutable = require("immutable");

var _RequiredValidator = require("@ui-schema/ui-schema/Validators/RequiredValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors/ValidatorErrors");

describe('checkValueExists', function () {
  test.each([['text1', 'string', true], ['', 'string', false], [undefined, 'string', false], [0, 'string', true], [true, 'string', true], [[], 'string', true], [{}, 'string', true], [0, 'number', true], ['', 'number', false], ['', 'number', false], [0, 'integer', true], ['', 'integer', false], ['', 'integer', false], [true, 'boolean', true], [false, 'boolean', true], [undefined, 'boolean', false], [[], 'array', true], ['', 'array', true], [undefined, 'array', false], [{}, 'object', true], ['', 'object', true], [undefined, 'object', false]])('checkValueExists(%j, %s)', function (value, type, expected) {
    expect((0, _RequiredValidator.checkValueExists)(type, value)).toBe(expected);
  });
});
describe('requiredValidator', function () {
  test.each([[(0, _immutable.List)(['name']), 'name', true], [(0, _immutable.List)(['name']), 'street', false], [undefined, 'name', false], [undefined, 'name', false]])('.should(%j, %s)', function (requiredList, ownKey, expectedValid) {
    expect(_RequiredValidator.requiredValidator.should({
      requiredList: requiredList,
      ownKey: ownKey
    })).toBe(expectedValid);
  });
  test.each([['string', 'text1', _RequiredValidator.ERROR_NOT_SET, true, false], ['string', 2, _RequiredValidator.ERROR_NOT_SET, true, false], ['string', '2', _RequiredValidator.ERROR_NOT_SET, true, false], ['string', '', _RequiredValidator.ERROR_NOT_SET, false, true], ['string', undefined, _RequiredValidator.ERROR_NOT_SET, false, true]])('.handle(%j, %s)', function (type, value, error, expectedValid, expectedError) {
    var result = _RequiredValidator.requiredValidator.handle({
      schema: (0, _immutable.OrderedMap)({
        type: type
      }),
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);
    expect(result.errors.hasError(error)).toBe(expectedError);
  });
  test('.noHandle(%j, %s)', function () {
    var result = _RequiredValidator.requiredValidator.noHandle();

    expect(result.required).toBe(false);
  });
});