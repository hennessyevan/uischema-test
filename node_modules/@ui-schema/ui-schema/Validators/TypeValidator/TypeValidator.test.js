"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _immutable = require("immutable");

var _TypeValidator = require("@ui-schema/ui-schema/Validators/TypeValidator");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

describe('validateType', function () {
  test.each([// unknown types are never valid, but on value `undefined`
  ['text1', 'stringiiii', false], [undefined, 'stringiiii', true], ['text1', 'string', true], [undefined, 'string', true], [1, 'string', false], [null, 'string', false], [1, 'number', true], [1.1, 'number', true], ['1', 'number', false], [1, 'integer', true], [1.1, 'integer', false], ['1', 'integer', false], [true, 'boolean', true], [false, 'boolean', true], [0, 'boolean', false], ['0', 'boolean', false], [[], 'boolean', false], [[], 'array', true], [(0, _immutable.List)([]), 'array', true], ['text', 'array', false], [{}, 'array', false], [{}, 'object', true], [undefined, 'object', true], [(0, _immutable.Map)({}), 'object', true], [(0, _immutable.OrderedMap)({}), 'object', true], ['text', 'object', false], [[], 'object', false], [null, 'null', true], ['null', 'null', false]])('validateType(%j, %s): %j', function (value, type, expected) {
    expect((0, _TypeValidator.validateType)(value, type)).toBe(expected);
  });
});
describe('typeValidator', function () {
  test.each([['string', 'text1', (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])('text1')
  })]), true, false], ['string', 2, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(2)
  })]), false, true], ['string', undefined, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: typeof undefined === "undefined" ? "undefined" : (0, _typeof2["default"])(undefined)
  })]), true, false], ['string', false, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(false)
  })]), false, true], ['string', '2', (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])('2')
  })]), true, false], [(0, _immutable.List)(['string']), false, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(false)
  })]), false, true], [(0, _immutable.List)(['string']), '2', (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])('2')
  })]), true, false], [(0, _immutable.List)(['string', 'null']), false, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(false)
  })]), false, true], [(0, _immutable.List)(['null', 'string']), false, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(false)
  })]), false, true], [(0, _immutable.List)(['string', 'null']), '2', (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])('2')
  })]), true, false], [(0, _immutable.List)(['null', 'string']), '2', (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])('2')
  })]), true, false], [(0, _immutable.List)(['string', 'null']), null, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(null)
  })]), true, false], [(0, _immutable.List)(['null', 'string']), null, (0, _immutable.List)([_TypeValidator.ERROR_WRONG_TYPE, (0, _immutable.Map)({
    actual: (0, _typeof2["default"])(null)
  })]), true, false]])('.should(%j, %s)', function (type, value, error, expectedValid, expectedError) {
    var result = _TypeValidator.typeValidator.handle({
      schema: (0, _immutable.OrderedMap)({
        type: type
      }),
      // @ts-ignore
      value: value,
      errors: (0, _ValidatorErrors.createValidatorErrors)(),
      valid: true
    });

    expect(result.valid).toBe(expectedValid);
    expect(result.errors.hasError(error.get(0))).toBe(expectedError);

    if (result.errors.hasError(error.get(0))) {
      var _result$errors$getErr;

      expect((_result$errors$getErr = result.errors.getError(error.get(0)).get(0)) === null || _result$errors$getErr === void 0 ? void 0 : _result$errors$getErr.equals(error.get(1))).toBe(expectedError);
    }
  });
});