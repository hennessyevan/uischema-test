"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidityReporter = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _useImmutable = require("@ui-schema/ui-schema/Utils/useImmutable");

var ValidityReporter = function ValidityReporter(props) {
  var _React$useState = _react["default"].useState(false),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      customError = _React$useState2[0],
      setCustomError = _React$useState2[1];

  var onChange = props.onChange,
      showValidity = props.showValidity,
      storeKeys = props.storeKeys,
      valid = props.valid,
      currentPluginIndex = props.currentPluginIndex;
  var storeKeysRef = (0, _useImmutable.useImmutable)(storeKeys);
  var realValid = !customError && valid;

  _react["default"].useEffect(function () {
    // todo: use `errors` instead of `valid`, but only if not `valid` and `hasErrors`
    // todo: this will run on each mount, check if necessary
    onChange({
      type: 'set',
      storeKeys: storeKeysRef,
      scopes: ['valid'],
      data: {
        valid: realValid
      }
    });
  }, [realValid, onChange, storeKeysRef]);

  _react["default"].useEffect(function () {
    // delete own validity state on component unmount
    //return () => onChange(storeKeysRef, ['valid'], () => ({valid: undefined}))
    return function () {
      return onChange({
        type: 'set',
        storeKeys: storeKeysRef,
        scopes: ['valid'],
        data: {
          valid: undefined
        }
      });
    };
    /*return () => onChange({
        type: 'element-delete',
        storeKeys: storeKeysRef,
        scopes: ['valid'],
    })*/
  }, [onChange, storeKeysRef]);

  var next = currentPluginIndex + 1;
  var Plugin = (0, _PluginStack.getNextPlugin)(next, props.widgets);
  return /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: next,
    valid: valid,
    showValidity: showValidity,
    setCustomError: setCustomError
  }));
};

exports.ValidityReporter = ValidityReporter;