import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["children"],
      _excluded2 = ["children", "showValidity", "onChange", "store"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { UIStoreActionsProvider } from '@ui-schema/ui-schema/UIStoreActions';
// @ts-ignore
const UIStoreContextObj = /*#__PURE__*/React.createContext({}); // @ts-ignore

const UIConfigContextObj = /*#__PURE__*/React.createContext({});
export const UIConfigProvider = _ref => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const value = React.useMemo(() => _objectSpread({}, props), [...Object.values(props)]);
  return /*#__PURE__*/React.createElement(UIConfigContextObj.Provider, {
    value: value
  }, children);
};
export function UIStoreProvider(_ref2) {
  let {
    children,
    showValidity,
    onChange,
    store
  } = _ref2,
      props = _objectWithoutProperties(_ref2, _excluded2);

  const ctx = React.useMemo(() => ({
    showValidity,
    store
  }), [showValidity, store]);
  return /*#__PURE__*/React.createElement(UIStoreContextObj.Provider, {
    value: ctx
  }, /*#__PURE__*/React.createElement(UIConfigProvider, props, /*#__PURE__*/React.createElement(UIStoreActionsProvider, {
    onChange: onChange
  }, children)));
}
/**
 * @deprecated
 */

export const useUI = () => {
  return useUIStore();
}; // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-constraint

export const useUIStore = () => {
  return React.useContext(UIStoreContextObj);
};
export function useUIConfig() {
  // @ts-ignore
  return React.useContext(UIConfigContextObj);
}