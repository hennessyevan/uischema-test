import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { getDisplayName } from '@ui-schema/ui-schema/Utils/memo';
// @ts-ignore
const UIMetaContextObj = /*#__PURE__*/React.createContext({});
export function UIMetaProvider(_ref) {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const ctx = React.useMemo(() => _objectSpread({}, props), [...Object.values(props)]);
  return /*#__PURE__*/React.createElement(UIMetaContextObj.Provider, {
    value: ctx
  }, children);
}
export const useUIMeta = () => {
  // @ts-ignore
  return React.useContext(UIMetaContextObj);
};
export const withUIMeta = Component => {
  const WithUIMeta = p => {
    const meta = useUIMeta();
    return /*#__PURE__*/React.createElement(Component, _extends({}, meta, p));
  };

  WithUIMeta.displayName = "WithUIMeta(".concat(getDisplayName(Component), ")");
  return WithUIMeta;
};