import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["rootContext"],
      _excluded2 = ["schema", "definitions"];
import React from 'react';
import { Trans } from '@ui-schema/ui-schema/Translate';
import { isRootSchema, SchemaRootProvider, useSchemaRoot } from '@ui-schema/ui-schema/SchemaRootProvider';
import { useSchemaRef } from '@ui-schema/ui-schema/Plugins/ReferencingHandler';
import { NextPluginRendererMemo } from '@ui-schema/ui-schema/PluginStack';
import { getSchemaId } from '@ui-schema/ui-schema/Utils/getSchema';
export const ReferencingHandler = _ref => {
  let {
    rootContext
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const {
    schema: baseSchema,
    isVirtual
  } = props;

  const _useSchemaRoot = useSchemaRoot(),
        {
    schema: maybeRootSchema,
    definitions: maybeDefinitions
  } = _useSchemaRoot,
        nestedRootProps = _objectWithoutProperties(_useSchemaRoot, _excluded2);

  const isRoot = Boolean(isRootSchema(baseSchema) || rootContext || baseSchema.get('definitions') || baseSchema.get('$defs'));
  const definitions = isRoot ? baseSchema.get('definitions') || baseSchema.get('$defs') : maybeDefinitions;
  const {
    schema,
    refsPending
  } = useSchemaRef(maybeRootSchema, definitions, isRoot, baseSchema);
  return refsPending && refsPending.size > 0 ? isVirtual ? null : /*#__PURE__*/React.createElement(Trans, {
    text: 'labels.loading',
    fallback: 'Loading'
  }) : isRoot ? /*#__PURE__*/React.createElement(SchemaRootProvider, _extends({}, nestedRootProps, rootContext || {}, {
    id: getSchemaId(schema),
    schema: schema,
    definitions: definitions
  }), /*#__PURE__*/React.createElement(NextPluginRendererMemo, _extends({}, props, {
    schema: schema
  }))) : /*#__PURE__*/React.createElement(NextPluginRendererMemo, _extends({}, props, {
    schema: schema
  }));
};