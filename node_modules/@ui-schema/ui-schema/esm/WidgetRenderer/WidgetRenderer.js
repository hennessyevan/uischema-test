import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["value", "internalValue", "WidgetOverride", "NoWidget", "errors", "onErrors", "requiredList", "currentPluginIndex"];
import React from 'react';
import { useImmutable } from '@ui-schema/ui-schema/Utils';
import { widgetMatcher } from '@ui-schema/ui-schema/widgetMatcher';
import { List } from 'immutable';
export const WidgetRenderer = _ref => {
  let {
    // we do not want `value`/`internalValue` to be passed to non-scalar widgets for performance reasons
    value,
    internalValue,
    WidgetOverride,
    NoWidget,
    errors,
    onErrors,
    // we do not want `requiredList` to be passed to the final widget for performance reasons
    // eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars
    requiredList,
    // eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars
    currentPluginIndex
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const {
    schema,
    widgets,
    isVirtual
  } = props;
  const currentErrors = useImmutable(errors);
  React.useEffect(() => onErrors && onErrors(currentErrors), [onErrors, currentErrors]);
  const schemaType = schema.get('type');
  const widgetName = schema.get('widget');
  const Widget = widgetMatcher({
    isVirtual: Boolean(isVirtual),
    WidgetOverride: WidgetOverride,
    NoWidget: NoWidget,
    widgetName: widgetName,
    schemaType: schemaType,
    widgets: widgets
  });
  const noExtractValue = !isVirtual && (schemaType === 'array' || schemaType === 'object' || List.isList(schemaType) && (schemaType.indexOf('array') !== -1 || schemaType.indexOf('object') !== -1));
  return Widget ? /*#__PURE__*/React.createElement(Widget, _extends({}, props, {
    value: noExtractValue ? undefined : value,
    internalValue: noExtractValue ? undefined : internalValue,
    errors: currentErrors
  })) : null;
};