/**
 * @jest-environment jsdom
 */
import { test, expect, describe } from '@jest/globals';
import { toBeInTheDocument, toHaveClass // @ts-ignore
} from '@testing-library/jest-dom/matchers';
import { List, Map } from 'immutable';
import { UIStore } from '@ui-schema/ui-schema/UIStore/UIStore';
import { scopeUpdaterInternals } from '@ui-schema/ui-schema/storeScopeUpdater/scopeUpdaterInternals';
expect.extend({
  toBeInTheDocument,
  toHaveClass
});
/**
 * npm run tdd -- -u --testPathPattern=src/storeScopeUpdater/scopeUpdaterInternals.test.tsx
 */

describe('scopeUpdaterInternals', () => {
  test.each([[new UIStore({
    internals: Map({})
  }), List([]), undefined, //Map({}),
  new UIStore({
    internals: Map({})
  })], [new UIStore({
    internals: Map({})
  }), List([]), Map({
    value: 'some-state',
    internals: Map({})
  }), //Map({}),
  new UIStore({
    internals: Map({
      value: 'some-state',
      internals: Map({})
    })
  })], [new UIStore({
    internals: Map({})
  }), List([]), Map({
    value: 'some-state',
    internals: Map({})
  }), //Map({}),
  new UIStore({
    internals: Map({
      value: 'some-state',
      internals: Map({})
    })
  })], [new UIStore({
    internals: Map({})
  }), List(['prop_a']), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          value: 'some-state'
        })
      })
    })
  })], [new UIStore({
    internals: Map({})
  }), List(['prop_a']), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          value: 'some-state'
        })
      })
    })
  })], [new UIStore({
    internals: Map({})
  }), List(['prop_a', 0]), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            value: 'some-state'
          })])
        })
      })
    })
  })], [new UIStore({
    internals: Map({})
  }), List(['prop_a', 0, 'sub_a']), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            internals: Map({
              sub_a: Map({
                value: 'some-state'
              })
            })
          })])
        })
      })
    })
  })], [new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            internals: Map({})
          })])
        })
      })
    })
  }), List(['prop_a', 0, 'sub_a']), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            internals: Map({
              sub_a: Map({
                value: 'some-state'
              })
            })
          })])
        })
      })
    })
  })], [new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            internals: Map({
              sub_a: Map({})
            })
          })])
        })
      })
    })
  }), List(['prop_a', 0, 'sub_a']), Map({
    value: 'some-state'
  }), new UIStore({
    internals: Map({
      internals: Map({
        prop_a: Map({
          internals: List([Map({
            internals: Map({
              sub_a: Map({
                value: 'some-state'
              })
            })
          })])
        })
      })
    })
  })]])('scopeUpdaterInternals(%j, %s, %j): %j', (store, storeKeys, newValue, expected) => {
    const r = scopeUpdaterInternals(store, storeKeys, newValue);
    const isExpected = r.equals(expected);

    if (!isExpected) {
      // @ts-ignore
      console.log('failed storeBuildScopeTree', storeKeys.toJS(), store.toJS(), r === null || r === void 0 ? void 0 : r.toJS(), expected === null || expected === void 0 ? void 0 : expected.toJS());
    }

    expect(isExpected).toBe(true);
  });
});