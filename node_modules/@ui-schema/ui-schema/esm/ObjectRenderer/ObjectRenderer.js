import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["level", "schema", "storeKeys", "schemaKeys", "errors"];
import React from 'react';
import { memo } from '@ui-schema/ui-schema/Utils/memo';
import { PluginStack } from '@ui-schema/ui-schema/PluginStack';

const ObjectRendererBase = _ref => {
  let {
    level,
    schema,
    storeKeys,
    schemaKeys,
    // for performance reasons, not pushing errors deeper
    // eslint-disable-next-line no-unused-vars
    errors
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const {
    isVirtual,
    widgets
  } = props;
  const properties = schema.get('properties');

  if (!isVirtual && !widgets.GroupRenderer) {
    if (process.env.NODE_ENV === 'development') {
      console.error('Widget GroupRenderer not existing');
    }

    return null;
  }

  const GroupRenderer = widgets.GroupRenderer;
  const propertyTree = (properties === null || properties === void 0 ? void 0 : properties.map((childSchema, childKey) => /*#__PURE__*/React.createElement(PluginStack, _extends({
    key: childKey
  }, props, {
    schema: childSchema,
    parentSchema: schema,
    storeKeys: storeKeys.push(childKey),
    schemaKeys: schemaKeys === null || schemaKeys === void 0 ? void 0 : schemaKeys.push('properties').push(childKey),
    level: level + 1
  }))).valueSeq()) || null; // no-properties could come from
  //   e.g. combining/conditional schemas which are currently not applied (e.g. a condition fails)

  return isVirtual ? propertyTree : properties ? /*#__PURE__*/React.createElement(GroupRenderer, {
    storeKeys: storeKeys,
    schemaKeys: schemaKeys,
    level: level,
    noGrid: props.noGrid,
    schema: schema
  }, propertyTree) : null;
};

export const ObjectRenderer = memo(ObjectRendererBase);