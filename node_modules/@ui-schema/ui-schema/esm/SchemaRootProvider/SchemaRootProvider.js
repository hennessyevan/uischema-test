import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["id", "schema", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { getSchemaId } from '@ui-schema/ui-schema/Utils/getSchema';
import { memo } from '@ui-schema/ui-schema/Utils/memo';
export const isRootSchema = schema => {
  const id = getSchemaId(schema); // todo: is this "no fragment beginning" really the correct root for everything? e.g. $defs?

  return id && id.indexOf('#') !== 0;
};
const SchemaRootContext = /*#__PURE__*/React.createContext({
  id: undefined,
  schema: undefined
});
export const SchemaRootProviderBase = (_ref = {}) => {
  let {
    id,
    schema,
    children
  } = _ref,
      further = _objectWithoutProperties(_ref, _excluded);

  const context = React.useMemo(() => _objectSpread({
    id,
    schema
  }, further), [id, schema, ...Object.values(further)]);
  return /*#__PURE__*/React.createElement(SchemaRootContext.Provider, {
    value: context
  }, children);
};
export const SchemaRootProvider = memo(SchemaRootProviderBase);
export const useSchemaRoot = () => {
  return React.useContext(SchemaRootContext);
};