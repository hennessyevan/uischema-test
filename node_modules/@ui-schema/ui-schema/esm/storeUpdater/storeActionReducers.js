import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
const _excluded = ["value", "internal"],
      _excluded2 = ["value", "internal"],
      _excluded3 = ["value", "internal"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { List, Map, OrderedMap } from 'immutable';
import { moveItem } from '@ui-schema/ui-schema/Utils/moveItem';
export const storeActionReducers = action => {
  switch (action.type) {
    case 'list-item-add':
      return _ref => {
        let {
          value = List(),
          internal = Map()
        } = _ref,
            r = _objectWithoutProperties(_ref, _excluded);

        if ('itemValue' in action) {
          value = value.push(action.itemValue);
        } else {
          const schema = action.schema;
          const items = schema.get('items');
          const type = schema.getIn(['items', 'type']);
          value = value.push( // todo: multi type support #68
          type === 'object' ? OrderedMap() : // todo: handle tuple items default / `undefined of unexisting keys`
          // `List.isList(items)` means it got tuple items
          List.isList(items) || type === 'array' ? List() : type === 'string' ? '' : type === 'null' ? null : undefined);
        }

        return _objectSpread({
          // todo: support `default` keyword
          //       https://github.com/ui-schema/ui-schema/issues/143
          value: value,
          internal: internal.update('internals', (internalInternals = List()) => internalInternals.push(Map()))
        }, r);
      };

    case 'list-item-delete':
      return _ref2 => {
        let {
          value = List(),
          internal = Map()
        } = _ref2,
            r = _objectWithoutProperties(_ref2, _excluded2);

        return _objectSpread({
          value: value.splice(action.index, 1),
          internal: internal.update('internals', (internalInternals = List()) => internalInternals.splice(action.index, 1))
        }, r);
      };

    case 'list-item-move':
      return _ref3 => {
        let {
          value = List(),
          internal = Map()
        } = _ref3,
            r = _objectWithoutProperties(_ref3, _excluded3);

        return _objectSpread({
          value: moveItem(value, action.fromIndex, action.toIndex),
          internal: internal.update('internals', (internalInternals = List()) => moveItem(internalInternals.size - 1 < action.toIndex ? // "set undefined at target":
          // - to fix "Cannot update within non-data-structure value in path ["values","options",0,"choices",0]: undefined"
          // - e.g. when rendering DND with existing data where not every item uses `internals`,
          //   the structures like [data1, data2] vs [internal1] can not be moved with splice
          internalInternals.set(action.toIndex, undefined) : internalInternals.size - 1 < action.fromIndex ? // "set undefined at target":
          // - to fix similar issue, but now when "switching" between two, where the from ist after already existing internals
          internalInternals.set(action.fromIndex, undefined) : internalInternals, action.fromIndex, action.toIndex))
        }, r);
      };

    case 'set':
      return action.data;

    case 'update':
      return action.updater;

    default:
      // @ts-ignore
      throw new Error('store updater for type not found: ' + action.type);
  }
};