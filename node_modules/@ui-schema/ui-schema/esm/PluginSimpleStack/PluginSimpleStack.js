import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
const _excluded = ["currentPluginIndex"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { getNextPlugin } from '@ui-schema/ui-schema/PluginStack/PluginStack';
export const handlePluginSimpleStack = (props, pluginSimpleStack) => {
  if (pluginSimpleStack && Array.isArray(pluginSimpleStack)) {
    pluginSimpleStack.forEach(propsPlugin => {
      if (typeof propsPlugin.handle !== 'function') {
        return;
      }

      if (typeof propsPlugin.should === 'function') {
        if (!propsPlugin.should(props)) {
          if (typeof propsPlugin.noHandle === 'function') {
            props = _objectSpread(_objectSpread({}, props), propsPlugin.noHandle(props));
          }

          return;
        }
      }

      props = _objectSpread(_objectSpread({}, props), propsPlugin.handle(props));
    });
  }

  return props;
};
export const PluginSimpleStack = _ref => {
  let {
    currentPluginIndex
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  const next = currentPluginIndex + 1;
  const Plugin = getNextPlugin(next, props.widgets);
  return /*#__PURE__*/React.createElement(Plugin, _extends({}, handlePluginSimpleStack(props, props.widgets.pluginSimpleStack), {
    currentPluginIndex: next
  }));
};