import React from 'react';
import { ComponentPluginType } from '@ui-schema/ui-schema/PluginStack/Plugin';
import { StoreSchemaType } from '@ui-schema/ui-schema/CommonTypings';
import { WidgetType } from '@ui-schema/ui-schema/Widget';
import { WidgetRendererProps } from '@ui-schema/ui-schema/WidgetRenderer';
import { PluginSimple } from '@ui-schema/ui-schema/PluginSimpleStack/PluginSimple';
import { StoreKeys } from '@ui-schema/ui-schema/UIStore';
import { List } from 'immutable';
export interface GroupRendererProps {
    storeKeys: StoreKeys;
    schemaKeys?: StoreKeys;
    level: number;
    schema: StoreSchemaType;
    noGrid?: boolean;
    style?: {};
    className?: string;
    spacing?: number;
}
export interface ErrorFallbackProps {
    error: any | null;
    storeKeys: StoreKeys;
    type?: string | List<string>;
    widget?: string;
}
export interface WidgetsBindingComponents {
    ErrorFallback?: React.ComponentType<ErrorFallbackProps>;
    RootRenderer: React.ComponentType<any>;
    GroupRenderer: React.ComponentType<GroupRendererProps>;
    WidgetRenderer: React.ComponentType<WidgetRendererProps>;
    pluginStack: ComponentPluginType[];
    pluginSimpleStack: PluginSimple[];
}
export interface WidgetsBindingWidgets<TW extends {} = {}, CW extends {} = {}> {
    types: TW;
    custom: CW;
}
/**
 * widget binding
 * - `C` = own `UIMetaContext` definition
 * - `TW` = own type widgets definition
 * - `CW` = own custom widgets definition
 */
export declare type WidgetsBindingFactory<W extends {} = {}, TW extends {} = {}, CW extends {} = {}> = WidgetsBindingComponents & W & WidgetsBindingWidgets<TW, CW>;
export declare type WidgetsBindingLooseComponents<C extends {} = {}, W extends WidgetsBindingFactory = WidgetsBindingFactory> = {
    [key: string]: WidgetType<C, W>;
};
