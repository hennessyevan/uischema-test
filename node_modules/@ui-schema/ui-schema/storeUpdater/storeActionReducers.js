"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeActionReducers = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _immutable = require("immutable");

var _moveItem = require("@ui-schema/ui-schema/Utils/moveItem");

var _excluded = ["value", "internal"],
    _excluded2 = ["value", "internal"],
    _excluded3 = ["value", "internal"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var storeActionReducers = function storeActionReducers(action) {
  switch (action.type) {
    case 'list-item-add':
      return function (_ref) {
        var _ref$value = _ref.value,
            value = _ref$value === void 0 ? (0, _immutable.List)() : _ref$value,
            _ref$internal = _ref.internal,
            internal = _ref$internal === void 0 ? (0, _immutable.Map)() : _ref$internal,
            r = (0, _objectWithoutProperties2["default"])(_ref, _excluded);

        if ('itemValue' in action) {
          value = value.push(action.itemValue);
        } else {
          var schema = action.schema;
          var items = schema.get('items');
          var type = schema.getIn(['items', 'type']);
          value = value.push( // todo: multi type support #68
          type === 'object' ? (0, _immutable.OrderedMap)() : // todo: handle tuple items default / `undefined of unexisting keys`
          // `List.isList(items)` means it got tuple items
          _immutable.List.isList(items) || type === 'array' ? (0, _immutable.List)() : type === 'string' ? '' : type === 'null' ? null : undefined);
        }

        return _objectSpread({
          // todo: support `default` keyword
          //       https://github.com/ui-schema/ui-schema/issues/143
          value: value,
          internal: internal.update('internals', function () {
            var internalInternals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.List)();
            return internalInternals.push((0, _immutable.Map)());
          })
        }, r);
      };

    case 'list-item-delete':
      return function (_ref2) {
        var _ref2$value = _ref2.value,
            value = _ref2$value === void 0 ? (0, _immutable.List)() : _ref2$value,
            _ref2$internal = _ref2.internal,
            internal = _ref2$internal === void 0 ? (0, _immutable.Map)() : _ref2$internal,
            r = (0, _objectWithoutProperties2["default"])(_ref2, _excluded2);
        return _objectSpread({
          value: value.splice(action.index, 1),
          internal: internal.update('internals', function () {
            var internalInternals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.List)();
            return internalInternals.splice(action.index, 1);
          })
        }, r);
      };

    case 'list-item-move':
      return function (_ref3) {
        var _ref3$value = _ref3.value,
            value = _ref3$value === void 0 ? (0, _immutable.List)() : _ref3$value,
            _ref3$internal = _ref3.internal,
            internal = _ref3$internal === void 0 ? (0, _immutable.Map)() : _ref3$internal,
            r = (0, _objectWithoutProperties2["default"])(_ref3, _excluded3);
        return _objectSpread({
          value: (0, _moveItem.moveItem)(value, action.fromIndex, action.toIndex),
          internal: internal.update('internals', function () {
            var internalInternals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.List)();
            return (0, _moveItem.moveItem)(internalInternals.size - 1 < action.toIndex ? // "set undefined at target":
            // - to fix "Cannot update within non-data-structure value in path ["values","options",0,"choices",0]: undefined"
            // - e.g. when rendering DND with existing data where not every item uses `internals`,
            //   the structures like [data1, data2] vs [internal1] can not be moved with splice
            internalInternals.set(action.toIndex, undefined) : internalInternals.size - 1 < action.fromIndex ? // "set undefined at target":
            // - to fix similar issue, but now when "switching" between two, where the from ist after already existing internals
            internalInternals.set(action.fromIndex, undefined) : internalInternals, action.fromIndex, action.toIndex);
          })
        }, r);
      };

    case 'set':
      return action.data;

    case 'update':
      return action.updater;

    default:
      // @ts-ignore
      throw new Error('store updater for type not found: ' + action.type);
  }
};

exports.storeActionReducers = storeActionReducers;