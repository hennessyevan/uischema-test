"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextPlugin = exports.PluginStack = exports.NextPluginRendererMemo = exports.NextPluginRenderer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _memo = require("@ui-schema/ui-schema/Utils/memo");

var _UIMeta = require("@ui-schema/ui-schema/UIMeta");

var _ValidatorErrors = require("@ui-schema/ui-schema/ValidatorErrors");

var _UIStore = require("@ui-schema/ui-schema/UIStore");

var _useImmutable = require("@ui-schema/ui-schema/Utils/useImmutable");

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _excluded = ["widgets"],
    _excluded2 = ["currentPluginIndex"];

// `extractValue` has moved to own plugin `ExtractStorePlugin` since `0.3.0`
// `withUIMeta` and `mema` are not needed for performance optimizing since `0.3.0` at this position
var PluginStack = function PluginStack(props) {
  var _useUIMeta = (0, _UIMeta.useUIMeta)(),
      widgets = _useUIMeta.widgets,
      meta = (0, _objectWithoutProperties2["default"])(_useUIMeta, _excluded);

  var config = (0, _UIStore.useUIConfig)();
  var _props$level = props.level,
      level = _props$level === void 0 ? 0 : _props$level,
      parentSchema = props.parentSchema,
      storeKeys = props.storeKeys,
      schema = props.schema,
      customWidgets = props.widgets; // central reference integrity of `storeKeys` for all plugins and the receiving widget, otherwise `useImmutable` is needed more times, e.g. 3 times in plugins + 1x time in widget

  var currentStoreKeys = (0, _useImmutable.useImmutable)(storeKeys);
  var activeWidgets = customWidgets || widgets;
  var isVirtual = Boolean(props.isVirtual || (schema === null || schema === void 0 ? void 0 : schema.get('hidden')));
  var required = (0, _immutable.List)([]);

  if (parentSchema) {
    // todo: resolving `required` here is wrong, must be done after merging schema / resolving referenced
    //      ! actual, it is correct here, as using `parentSchema`
    var tmp_required = parentSchema.get('required');

    if (tmp_required) {
      required = tmp_required;
    }
  }

  var ErrorBoundary = activeWidgets !== null && activeWidgets !== void 0 && activeWidgets.ErrorFallback ? _PluginStack.PluginStackErrorBoundary : _react["default"].Fragment;
  return props.schema ? /*#__PURE__*/_react["default"].createElement(ErrorBoundary, {
    FallbackComponent: activeWidgets === null || activeWidgets === void 0 ? void 0 : activeWidgets.ErrorFallback,
    type: schema.get('type'),
    widget: schema.get('widget'),
    storeKeys: currentStoreKeys
  }, /*#__PURE__*/_react["default"].createElement(NextPluginRenderer, (0, _extends2["default"])({}, meta, config, props, {
    currentPluginIndex: -1,
    widgets: activeWidgets,
    level: level,
    storeKeys: currentStoreKeys,
    ownKey: storeKeys.get(storeKeys.count() - 1),
    requiredList: required,
    required: false,
    errors: (0, _ValidatorErrors.createValidatorErrors)(),
    isVirtual: isVirtual,
    valid: true
  }))) : null;
};

exports.PluginStack = PluginStack;

var getNextPlugin = function getNextPlugin(next, _ref) {
  var ps = _ref.pluginStack,
      WidgetRenderer = _ref.WidgetRenderer;
  return next < ps.length ? ps[next] || function () {
    return 'plugin-error';
  } : WidgetRenderer;
};

exports.getNextPlugin = getNextPlugin;

var NextPluginRenderer = function NextPluginRenderer(_ref2) {
  var currentPluginIndex = _ref2.currentPluginIndex,
      props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded2);
  var next = currentPluginIndex + 1;
  var Plugin = getNextPlugin(next, props.widgets);
  return /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: next
  }));
};

exports.NextPluginRenderer = NextPluginRenderer;
var NextPluginRendererMemo = (0, _memo.memo)(NextPluginRenderer);
exports.NextPluginRendererMemo = NextPluginRendererMemo;