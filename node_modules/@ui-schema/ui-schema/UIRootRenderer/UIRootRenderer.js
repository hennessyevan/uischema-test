"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UIRootRenderer = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _memo = require("@ui-schema/ui-schema/Utils/memo");

var _UIMeta = require("@ui-schema/ui-schema/UIMeta");

var _excluded = ["rootRenderer"];

/**
 * @type {function({rootRenderer: *, ...}): *}
 */
var DumpRootRenderer = function DumpRootRenderer(_ref) {
  var RootRenderer = _ref.rootRenderer,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return props.isVirtual ? /*#__PURE__*/_react["default"].createElement(_PluginStack.PluginStack, props) : /*#__PURE__*/_react["default"].createElement(RootRenderer, null, /*#__PURE__*/_react["default"].createElement(_PluginStack.PluginStack, props));
};

DumpRootRenderer = (0, _memo.memo)(DumpRootRenderer);

var mustBeSet = function mustBeSet(name) {
  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
    console.error(name + ' must be set');
  }

  return null;
};
/**
 * Initial rendering of root container and invoking the first schema-group with the root-level-data of `schema`
 *
 * @return {null|*}
 */


var UIRootRenderer = function UIRootRenderer(_ref2) {
  var schema = _ref2.schema,
      rootContext = _ref2.rootContext;

  // getting the root level schema, all other schemas within an editor are property calculated
  var _useUIMeta = (0, _UIMeta.useUIMeta)(),
      widgets = _useUIMeta.widgets;

  if (!schema) {
    return mustBeSet('schema');
  }

  if (!widgets) {
    return mustBeSet('widgets');
  }

  var RootRenderer = widgets.RootRenderer;

  if (!RootRenderer) {
    if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
      console.error('Widget RootRenderer not existing');
    }

    return null;
  }

  return /*#__PURE__*/_react["default"].createElement(DumpRootRenderer, {
    rootRenderer: RootRenderer,
    isVirtual: schema === null || schema === void 0 ? void 0 : schema.get('hidden'),
    schema: schema,
    storeKeys: (0, _immutable.List)([]),
    schemaKeys: (0, _immutable.List)([]) // additional meta data, available from `SchemaRootProvider`
    ,
    rootContext: rootContext
  });
};

exports.UIRootRenderer = UIRootRenderer;