"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useImmutable = useImmutable;

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

/*
 * If the value passed in is structurally equal to the one saved in the ref,
 * it will return the one saved in the ref to preserve reference equality
 */
function useImmutable(value) {
  var _currentState$current;

  var currentState = _react["default"].useRef(value);

  if (!(0, _immutable.isImmutable)(currentState.current) && !_immutable.Record.isRecord(value) || !((_currentState$current = currentState.current) !== null && _currentState$current !== void 0 && _currentState$current.equals(value))) {
    // update the referenced immutable when:
    // - value is not a immutable (Map/List) AND is not a Record (as `isImmutable` doesn't check for records)
    // - the current state doesn't equal the next value - what must only be done when not an immutable data type
    currentState.current = value;
  }

  return currentState.current;
}