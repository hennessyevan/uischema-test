"use strict";

var _mergeSchema = require("@ui-schema/ui-schema/Utils/mergeSchema");

var _createMap = require("@ui-schema/ui-schema/Utils/createMap/createMap");

describe('mergeSchema', function () {
  /*test.each([
      [{a: 'name'}, {a: 'name'}, true],
      [{a: 'name'}, {a: 'names'}, false],
      [{a: 'name'}, {b: 'name'}, false],
      [{a: createMap({c: 'name'})}, {a: createMap({c: 'name'})}, true],
      [{a: createMap({c: 'name'})}, {a: createMap({c: 'names'})}, false],
      [{a: createMap({c: 'name'})}, {a: createMap({b: 'name'})}, false],
      [{a: List(['name'])}, {a: List(['name'])}, true],
      [{a: List(['name'])}, {a: List(['names'])}, false],
      [{a: List(['name'])}, {a: List(['name', 'street'])}, false],
      [{a: List(['name']), b: true}, {a: List(['name']), b: true}, true],
      [{a: List(['name']), b: true}, {a: List(['name']), b: false}, false],
  ])(
      'isEqual(%j, %s)',
      (prevProps, nextProps, expectedValid) => {
          expect(isEqual(prevProps, nextProps)).toBe(expectedValid)
      },
  )*/
  test('type', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'string'
    }), (0, _createMap.createOrderedMap)({
      type: 'number'
    }));
    expect(merged.get('type')).toEqual('number');
  });
  test('format', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      format: 'email'
    }), (0, _createMap.createOrderedMap)({
      format: 'text'
    }));
    expect(merged.get('format')).toEqual('text');
  });
  test('properties 1', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object'
    }), (0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        name: {
          type: 'string'
        }
      }
    }));
    expect((0, _createMap.createOrderedMap)({
      name: {
        type: 'string'
      }
    }).equals(merged.get('properties'))).toEqual(true);
  });
  test('properties 2', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        name: {
          type: 'string'
        }
      }
    }), (0, _createMap.createOrderedMap)({
      type: 'object'
    }));
    expect((0, _createMap.createOrderedMap)({
      name: {
        type: 'string'
      }
    }).equals(merged.get('properties'))).toEqual(true);
  });
  test('properties 3', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        name: {
          type: 'string',
          maxLength: 20
        }
      }
    }), (0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        name: {
          type: 'string',
          maxLength: 25,
          format: 'email'
        }
      }
    }));
    expect((0, _createMap.createOrderedMap)({
      name: {
        type: 'string',
        maxLength: 25,
        format: 'email'
      }
    }).equals(merged.get('properties'))).toEqual(true);
  });
  test('required 1', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['name']
    }), (0, _createMap.createOrderedMap)({
      type: 'object'
    }));
    expect((0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['name']
    }).equals(merged)).toEqual(true);
  });
  test('required 2', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object'
    }), (0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['name']
    }));
    expect((0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['name']
    }).equals(merged)).toEqual(true);
  });
  test('required 3', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['email']
    }), (0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['name']
    }));
    expect((0, _createMap.createOrderedMap)({
      type: 'object',
      required: ['email', 'name']
    }).equals(merged)).toEqual(true);
  });
  test('widget', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      widget: 'SimpleList'
    }), (0, _createMap.createOrderedMap)({
      widget: 'GenericList'
    }));
    expect((0, _createMap.createOrderedMap)({
      widget: 'GenericList'
    }).equals(merged)).toEqual(true);
  });
  test('enum 1', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      "enum": ['demo']
    }), (0, _createMap.createOrderedMap)({
      "enum": ['muster']
    }));
    expect((0, _createMap.createOrderedMap)({
      "enum": ['demo', 'muster']
    }).equals(merged)).toEqual(true);
  });
  test('enum 2', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      "enum": ['demo']
    }), (0, _createMap.createOrderedMap)({}));
    expect((0, _createMap.createOrderedMap)({
      "enum": ['demo']
    }).equals(merged)).toEqual(true);
  });
  test('const 1', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      "const": 'demo'
    }), (0, _createMap.createOrderedMap)({
      "const": 'muster'
    }));
    expect((0, _createMap.createOrderedMap)({
      "const": 'muster'
    }).equals(merged)).toEqual(true);
  });
  test('const 2', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      "const": 'demo'
    }), (0, _createMap.createOrderedMap)({}));
    expect((0, _createMap.createOrderedMap)({
      "const": 'demo'
    }).equals(merged)).toEqual(true);
  });
  test('not', function () {
    var merged = (0, _mergeSchema.mergeSchema)((0, _createMap.createOrderedMap)({
      not: {}
    }), (0, _createMap.createOrderedMap)({
      not: {
        type: 'string'
      }
    }));
    expect((0, _createMap.createOrderedMap)({
      not: {
        type: 'string'
      }
    }).equals(merged)).toEqual(true);
  });
});