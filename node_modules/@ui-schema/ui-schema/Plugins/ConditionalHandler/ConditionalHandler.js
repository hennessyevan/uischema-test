"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConditionalHandler = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _handleIfElseThen = require("./handleIfElseThen");

var _schemaTypeIs = require("@ui-schema/ui-schema/Utils/schemaTypeIs");

var ConditionalHandler = function ConditionalHandler(props) {
  var schema = props.schema,
      value = props.value;
  var keyIf = schema.get('if');

  if (keyIf && // when current schema does not have a type, it's a pure combining schema and it's conditionals can not be checked
  //   this can come from a state where the combining schema has not been resolved (yet)
  //   also an `if` can only be inside an `Map`/object
  // todo: only when `type` object?
  (0, _schemaTypeIs.schemaTypeIs)(schema.get('type'), 'object') && (_immutable.Map.isMap(value) || _immutable.Record.isRecord(value))) {
    schema = (0, _handleIfElseThen.handleIfElseThen)(schema, value, schema);
  }

  return /*#__PURE__*/_react["default"].createElement(_PluginStack.NextPluginRendererMemo, (0, _extends2["default"])({}, props, {
    schema: schema
  }));
};

exports.ConditionalHandler = ConditionalHandler;