"use strict";

var _globals = require("@jest/globals");

var _immutable = require("immutable");

var _parseRefs = require("./parseRefs");

var _createMap = require("@ui-schema/ui-schema/Utils/createMap/createMap");

var mockDefinitions = (0, _createMap.createOrderedMap)({
  country: {
    type: 'string',
    "enum": ['fr', 'de', 'it']
  },
  germany_anchor: {
    type: 'string',
    "const": 'de',
    '$anchor': 'germany_anchor'
  },
  germany_id: {
    type: 'string',
    "const": 'de',
    '$id': '#germany_id'
  },
  germany_id_old: {
    type: 'string',
    "const": 'de',
    'id': '#germany_id_old'
  },
  address: {
    type: 'object',
    properties: {
      state: {
        type: 'string'
      },
      country: {
        $ref: '#/$defs/country'
      }
    }
  },
  person: {
    type: 'object',
    properties: {
      name: {
        type: 'string'
      },
      children: {
        type: 'array',
        widget: 'GenericList',
        items: {
          $ref: '#/definitions/person'
        },
        'default': []
      }
    }
  }
});
(0, _globals.describe)('parseRefs', function () {
  test.each([[(0, _immutable.OrderedMap)({
    'type': 'string'
  }), {
    defs: (0, _immutable.OrderedMap)()
  }, (0, _immutable.OrderedMap)({
    'type': 'string'
  })], [(0, _immutable.OrderedMap)({
    '$ref': '#/$defs/country'
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, mockDefinitions.get('country')], [(0, _immutable.OrderedMap)({
    '$ref': '#/$defs/country'
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, mockDefinitions.get('country')], [(0, _immutable.OrderedMap)({
    "if": (0, _immutable.OrderedMap)({
      '$ref': '#germany_id'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('germany_id')
    })
  }, (0, _immutable.OrderedMap)({
    "if": mockDefinitions.get('germany_id')
  })], [(0, _immutable.OrderedMap)({
    then: (0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    then: mockDefinitions.get('country')
  })], [(0, _immutable.OrderedMap)({
    "else": (0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    "else": mockDefinitions.get('country')
  })], [(0, _immutable.OrderedMap)({
    not: (0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    not: mockDefinitions.get('country')
  })], [
  /*
   * if must be resolve recursively
   */
  (0, _immutable.OrderedMap)({
    "if": (0, _immutable.OrderedMap)({
      not: (0, _immutable.OrderedMap)({
        '$ref': '#germany_id'
      })
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('germany_id')
    })
  }, (0, _immutable.OrderedMap)({
    "if": (0, _immutable.OrderedMap)({
      not: mockDefinitions.get('germany_id')
    })
  })], [
  /*
   * contains must be resolve recursively
   */
  (0, _immutable.OrderedMap)({
    contains: (0, _immutable.OrderedMap)({
      type: 'object',
      properties: (0, _immutable.OrderedMap)({
        germany: (0, _immutable.OrderedMap)({
          '$ref': '#germany_id'
        })
      })
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('germany_id')
    })
  }, (0, _immutable.OrderedMap)({
    contains: (0, _immutable.OrderedMap)({
      type: 'object',
      properties: (0, _immutable.OrderedMap)({
        germany: mockDefinitions.get('germany_id')
      })
    })
  })], [
  /*
   * properties must not be resolve
   */
  (0, _immutable.OrderedMap)({
    type: 'object',
    properties: (0, _immutable.OrderedMap)({
      germany: (0, _immutable.OrderedMap)({
        '$ref': '#germany_id'
      })
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('germany_id')
    })
  }, (0, _immutable.OrderedMap)({
    type: 'object',
    properties: (0, _immutable.OrderedMap)({
      germany: (0, _immutable.OrderedMap)({
        '$ref': '#germany_id'
      })
    })
  })], [
  /*
   * items must be resolve
   */
  (0, _immutable.OrderedMap)({
    type: 'array',
    items: (0, _immutable.OrderedMap)({
      '$ref': '#germany_id'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('germany_id')
    })
  }, (0, _immutable.OrderedMap)({
    type: 'array',
    items: mockDefinitions.get('germany_id')
  })], [
  /*
   * property names must be resolved, as only `pattern` should be in use, recursive doesn't matter (but is enabled)
   */
  (0, _immutable.OrderedMap)({
    propertyNames: (0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    propertyNames: mockDefinitions.get('country')
  })], [
  /*
   * empty fragment test, must resolve to root
   */
  (0, _immutable.OrderedMap)({
    '$ref': '#'
  }), {
    root: (0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        user_id: {
          type: 'number'
        },
        sub_user: {
          '$ref': '#'
        }
      }
    })
  }, (0, _createMap.createOrderedMap)({
    type: 'object',
    properties: {
      user_id: {
        type: 'number'
      },
      sub_user: {
        '$ref': '#'
      }
    }
  })], [
  /*
   * dependencies must be resolved, recursively
   */
  (0, _immutable.OrderedMap)({
    type: 'object',
    dependencies: (0, _immutable.OrderedMap)({
      country: (0, _immutable.OrderedMap)({
        '$ref': '#/$defs/country'
      }),
      address: mockDefinitions.get('address')
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    type: 'object',
    dependencies: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country'),
      address: (0, _immutable.OrderedMap)({
        type: 'object',
        properties: (0, _immutable.OrderedMap)({
          state: (0, _immutable.OrderedMap)({
            type: 'string'
          }),
          country: mockDefinitions.get('country')
        })
      })
    })
  })], [
  /*
   * dependentSchemas must be resolved, recursively
   */
  (0, _immutable.OrderedMap)({
    type: 'object',
    dependentSchemas: (0, _immutable.OrderedMap)({
      country: (0, _immutable.OrderedMap)({
        '$ref': '#/$defs/country'
      }),
      address: mockDefinitions.get('address')
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    type: 'object',
    dependentSchemas: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country'),
      address: (0, _immutable.OrderedMap)({
        type: 'object',
        properties: (0, _immutable.OrderedMap)({
          state: (0, _immutable.OrderedMap)({
            type: 'string'
          }),
          country: mockDefinitions.get('country')
        })
      })
    })
  })], [
  /*
   * patternProperties names must be resolved recursively
   */
  (0, _immutable.OrderedMap)({
    patternProperties: (0, _immutable.OrderedMap)({
      '^s_': (0, _immutable.OrderedMap)({
        '$ref': '#/$defs/country'
      })
    })
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    patternProperties: (0, _immutable.OrderedMap)({
      '^s_': mockDefinitions.get('country')
    })
  })], [
  /*
   * allOf names must be resolved
   */
  (0, _immutable.OrderedMap)({
    allOf: (0, _immutable.List)([(0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })])
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    allOf: (0, _immutable.List)([mockDefinitions.get('country')])
  })], [
  /*
   * oneOf names must be resolved
   */
  (0, _immutable.OrderedMap)({
    oneOf: (0, _immutable.List)([(0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })])
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    oneOf: (0, _immutable.List)([mockDefinitions.get('country')])
  })], [
  /*
   * anyOf names must be resolved
   */
  (0, _immutable.OrderedMap)({
    anyOf: (0, _immutable.List)([(0, _immutable.OrderedMap)({
      '$ref': '#/$defs/country'
    })])
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    anyOf: (0, _immutable.List)([mockDefinitions.get('country')])
  })], [
  /*
   * testing general JSON pointer with `allOf`
   */
  (0, _immutable.OrderedMap)({
    allOf: (0, _immutable.List)([(0, _immutable.OrderedMap)({
      '$ref': '#/properties/user_id'
    })])
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    }),
    root: (0, _createMap.createOrderedMap)({
      type: 'object',
      properties: {
        address: {
          type: 'object',
          allOf: [{
            '$ref': '#/properties/user_id'
          }]
        },
        user_id: {
          type: 'number'
        }
      }
    })
  }, (0, _immutable.OrderedMap)({
    allOf: (0, _immutable.List)([(0, _immutable.OrderedMap)({
      type: 'number'
    })])
  })],
  /* [
   /*
    * testing general JSON pointer with `allOf`, re-supplying $id when existing
    *
   OrderedMap({
       allOf: List([
           OrderedMap({'$ref': '#/properties/user_id'}),
       ]),
   }) as StoreSchemaType,
   {
       defs: OrderedMap({country: mockDefinitions.get('country')}),
       root: createOrderedMap({
           type: 'object',
           properties: {
               address: {
                   type: 'object',
                   allOf: [
                       {'$ref': '#/properties/user_id'},
                   ],
               },
               user_id: {
                   type: 'number',
               },
           },
       }),
   },
   OrderedMap({
       allOf: List([
           OrderedMap({type: 'number'}),
       ]),
   }) as StoreSchemaType,
  ],*/
  [
  /*
   * tests for non-recursives, if they are inside `if` and must resolve recursive
   */
  (0, _createMap.createOrderedMap)({
    "if": {
      items: {
        '$ref': '#/$defs/country'
      }
    }
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _immutable.OrderedMap)({
    "if": (0, _immutable.OrderedMap)({
      items: mockDefinitions.get('country')
    })
  })], [
  /*
   * tests for non-recursives, if they are inside `if` and must resolve recursive
   */
  (0, _createMap.createOrderedMap)({
    "if": {
      items: [{
        '$ref': '#/$defs/country'
      }, {
        '$ref': '#/$defs/country'
      }]
    }
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _createMap.createOrderedMap)({
    "if": {
      items: [mockDefinitions.get('country').toJS(), mockDefinitions.get('country').toJS()]
    }
  })], [
  /*
   * tests for non-recursives, if they are inside `if` and must resolve recursive
   */
  (0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        country: {
          '$ref': '#/$defs/country'
        }
      }
    }
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        country: mockDefinitions.get('country').toJS()
      }
    }
  })], [
  /*
   * tests for nested root schema
   */
  (0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        location: {
          $id: 'https://localhost',
          type: 'object',
          $defs: {
            country: {
              type: 'string',
              "enum": ['fr', 'de', 'it', 'es']
            }
          },
          properties: {
            // this $ref needs to use the $defs of this level
            country: {
              '$ref': '#/$defs/country'
            }
          }
        },
        // this $ref needs to use the $defs of the known root-schema
        country: {
          '$ref': '#/$defs/country'
        }
      }
    }
  }), {
    defs: (0, _immutable.OrderedMap)({
      country: mockDefinitions.get('country')
    })
  }, (0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        location: {
          $id: 'https://localhost',
          type: 'object',
          $defs: {
            country: {
              type: 'string',
              "enum": ['fr', 'de', 'it', 'es']
            }
          },
          properties: {
            country: {
              type: 'string',
              "enum": ['fr', 'de', 'it', 'es']
            }
          }
        },
        country: mockDefinitions.get('country').toJS()
      }
    }
  })]])('parseRefs(%j, %j): %j', function (schema, context, expectedSchema) {
    var res = (0, _parseRefs.parseRefs)(schema, context);
    var r = res.schema.equals(expectedSchema);

    if (!r) {
      console.error(res.schema.toJS(), expectedSchema.toJS());
    }

    (0, _globals.expect)(r).toBe(true);
  });
  test.each([[(0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        location: {
          $id: 'https://localhost:8080/root-2.json',
          type: 'object',
          properties: {
            // this $ref needs to use the $id of this level
            country: {
              '$ref': 'dummy-1a.json'
            }
          }
        },
        // this $ref needs to use the $defs of the known root-schema
        country: {
          '$ref': 'https://localhost:3000/dummy-2.json'
        },
        state: {
          '$ref': 'dummy-3.json'
        }
      }
    }
  }), {}, (0, _createMap.createMap)({
    'https://localhost:8080/root-2.json': {
      'dummy-1a.json': ['*']
    },
    '#': {
      'https://localhost:3000/dummy-2.json': ['*'],
      'dummy-3.json': ['*']
    }
  })], [(0, _createMap.createOrderedMap)({
    "if": {
      properties: {
        location: {
          $id: 'https://localhost:8080/root-2.json',
          type: 'object',
          properties: {
            // this $ref needs to use the $id of this level
            country: {
              '$ref': 'dummy-1a.json'
            }
          }
        },
        // this $ref needs to use the $defs of the known root-schema
        country: {
          '$ref': 'https://localhost:3000/dummy-2.json'
        },
        state: {
          '$ref': 'dummy-3.json'
        }
      }
    }
  }), {
    getLoadedSchema: function getLoadedSchema(ref) {
      return ref === 'dummy-3.json' ? (0, _immutable.Map)() : undefined;
    }
  }, (0, _createMap.createMap)({
    'https://localhost:8080/root-2.json': {
      'dummy-1a.json': ['*']
    },
    '#': {
      'https://localhost:3000/dummy-2.json': ['*']
    }
  })]])('pending: parseRefs(%j, %j): %j', function (schema, context, expectedPending) {
    var res = (0, _parseRefs.parseRefs)(schema, context);
    var r = res.pending.equals(expectedPending);

    if (!r) {
      if (process.env.NODE_ENV === 'development') {
        console.error(res.pending.toJS(), expectedPending.toJS());
      }
    }

    (0, _globals.expect)(r).toBe(true);
  });
});