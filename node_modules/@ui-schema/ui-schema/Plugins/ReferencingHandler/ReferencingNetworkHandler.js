"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencingNetworkHandler = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _Trans = require("@ui-schema/ui-schema/Translate/Trans");

var _ReferencingHandler = require("@ui-schema/ui-schema/Plugins/ReferencingHandler");

var _excluded = ["Plugin", "currentPluginIndex"];

var RefLoader = function RefLoader(_ref) {
  var _schema;

  var Plugin = _ref.Plugin,
      currentPluginIndex = _ref.currentPluginIndex,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var schema = props.schema,
      schemaRef = props.schemaRef,
      isVirtual = props.isVirtual;

  var _useSchemaNetworkRef = (0, _ReferencingHandler.useSchemaNetworkRef)(),
      loadSchema = _useSchemaNetworkRef.loadSchema,
      getSchema = _useSchemaNetworkRef.getSchema;

  var schemaVersion = (_schema = schema) === null || _schema === void 0 ? void 0 : _schema.get('version');
  var loadedSchema = getSchema(schemaRef, undefined, schemaVersion);
  var loaded = Boolean(loadedSchema);

  if (loaded) {
    schema = loadedSchema;
  }

  _react["default"].useEffect(function () {
    if (!loaded) {
      loadSchema(schemaRef, undefined, [schemaVersion]);
    }
  }, [loadSchema, schemaRef, schemaVersion, loaded]);

  return !loaded ? // todo: add `could not be loaded` info output
  isVirtual ? null : /*#__PURE__*/_react["default"].createElement(_Trans.Trans, {
    text: 'labels.loading',
    fallback: 'Loading'
  }) : /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: currentPluginIndex,
    schema: schema
  }));
};

var ReferencingNetworkHandler = function ReferencingNetworkHandler(props) {
  var schema = props.schema,
      currentPluginIndex = props.currentPluginIndex;
  var next = currentPluginIndex + 1;
  var Plugin = (0, _PluginStack.getNextPlugin)(next, props.widgets);
  var ref = schema.get('$ref'); // network references do not begin with a hashtag
  // example in spec. for dereferencing https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.8.2.4.6

  return ref && ref.indexOf('#') !== 0 ? /*#__PURE__*/_react["default"].createElement(RefLoader, (0, _extends2["default"])({}, props, {
    Plugin: Plugin,
    currentPluginIndex: next,
    schemaRef: ref
  })) : /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: next
  }));
};

exports.ReferencingNetworkHandler = ReferencingNetworkHandler;