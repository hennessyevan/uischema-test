"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveRef = exports.SchemaRefPending = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _resolvePointer = require("@ui-schema/ui-schema/JSONPointer/resolvePointer");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SchemaRefPending = /*#__PURE__*/function (_Error) {
  (0, _inherits2["default"])(SchemaRefPending, _Error);

  var _super = _createSuper(SchemaRefPending);

  function SchemaRefPending() {
    (0, _classCallCheck2["default"])(this, SchemaRefPending);
    return _super.apply(this, arguments);
  }

  return (0, _createClass2["default"])(SchemaRefPending);
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));

exports.SchemaRefPending = SchemaRefPending;

var resolveRef = function resolveRef(ref, context, schemaVersion) {
  var id = context.id,
      defs = context.defs,
      rootSchema = context.root,
      getLoadedSchema = context.getLoadedSchema;
  var schema;

  if (ref.indexOf('#/definitions/') === 0 || ref.indexOf('#/$defs/') === 0) {
    // intercept JSON Pointer for definitions
    var refId = ref.replace(/^#\/definitions\//, '').replace(/^#\/\$defs\//, '');

    if (!defs) {
      if (process.env.NODE_ENV === 'development') {
        console.error('definitions needed for $ref resolution', ref);
      }
    } else if (defs.get(refId)) {
      schema = (0, _resolvePointer.resolvePointer)('#/' + refId, defs);
    } else {
      if (process.env.NODE_ENV === 'development') {
        console.error('definition not found for $ref', ref, refId);
      }
    }
  } else if (ref.indexOf('#/') === 0 || ref === '#') {
    // JSON Pointer
    if (!rootSchema) {
      if (process.env.NODE_ENV === 'development') {
        console.error('rootSchema needed for $ref resolution', ref);
      }
    } else {
      var targeted = (0, _resolvePointer.resolvePointer)(ref, rootSchema);

      if (targeted) {
        schema = targeted;
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.error('JSON Pointer target schema not found for $ref', ref, rootSchema === null || rootSchema === void 0 ? void 0 : rootSchema.toJS());
        }
      }
    }
  } else if (ref.indexOf('#') === 0) {
    // get by `$id` or since 2019-09 by `$anchor` in definitions
    if (!defs) {
      if (process.env.NODE_ENV === 'development') {
        console.error('definitions needed for $ref resolution', ref);
      }
    } else {
      var def = defs.find(function (def) {
        return (// till draft-06, no `$`, hashtag in id
          def.get('id') === ref || // till draft-07, hashtag in id
          def.get('$id') === ref || // from 2019-09, fragment in anchor, without leading hashtag
          def.get('$anchor') === ref.slice(1)
        );
      });

      if (def) {
        schema = def;
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.error('definition not found for $ref', ref);
        }
      }
    }
  } else {
    // todo:
    //   $recursiveRef
    //   $recursiveAnchor
    // handle network referenced schemas,
    // `getLoadedSchema` may be coming from `useNetworkRef`, which relies on the `UIApiProvider`
    // but could also be otherwise passed down with the context from a custom `ReferencingHandler` implementation
    if (getLoadedSchema) {
      var loadedSchema = getLoadedSchema(ref, id, schemaVersion);

      if (loadedSchema) {
        return loadedSchema;
      }
    } else if (process.env.NODE_ENV === 'development') {
      console.error('getLoadedSchema does not exist in resolveRef, maybe UIApiProvider missing?');
    }

    throw new SchemaRefPending(ref);
  }

  return schema;
};

exports.resolveRef = resolveRef;