"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependentHandler = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _PluginStack = require("@ui-schema/ui-schema/PluginStack");

var _UIStore = require("@ui-schema/ui-schema/UIStore");

var _mergeSchema = require("@ui-schema/ui-schema/Utils/mergeSchema");

var _immutable = require("immutable");

var _excluded = ["dependencies", "dependentSchemas", "dependentRequired"];

var DependentRenderer = function DependentRenderer(_ref) {
  var dependencies = _ref.dependencies,
      dependentSchemas = _ref.dependentSchemas,
      dependentRequired = _ref.dependentRequired,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var schema = props.schema,
      storeKeys = props.storeKeys;

  var _useUIStore = (0, _UIStore.useUIStore)(),
      store = _useUIStore.store;

  var currentValues = storeKeys.size ? store.getValues().getIn(storeKeys) : store.getValues();
  if (!currentValues) return /*#__PURE__*/_react["default"].createElement(_PluginStack.NextPluginRendererMemo, (0, _extends2["default"])({}, props, {
    schema: schema
  }));
  currentValues.keySeq().forEach(function (key) {
    var key_dependencies = dependencies ? dependencies.get(key) : undefined;
    var key_dependentSchemas = dependentSchemas ? dependentSchemas.get(key) : undefined;
    var key_dependentRequired = dependentRequired ? dependentRequired.get(key) : undefined; // todo: what if the `key`'s own schema should be dynamically changed?
    //   what to remove?
    //   what to keep? when keeping e.g. `const` it could destroy `enum`s
    // "if property is present", must not use "if correct type"

    if (typeof currentValues.get(key) !== 'undefined') {
      if (_immutable.Map.isMap(key_dependencies) || _immutable.Map.isMap(key_dependentSchemas)) {
        // schema-dependencies
        // value for dependency exist, so it should be used
        if (_immutable.Map.isMap(key_dependencies)) {
          schema = (0, _mergeSchema.mergeSchema)(schema, key_dependencies);
        } else {
          schema = (0, _mergeSchema.mergeSchema)(schema, key_dependentSchemas);
        }
      }

      if (_immutable.List.isList(key_dependencies) || _immutable.List.isList(key_dependentRequired)) {
        // property-dependencies
        // value for dependency exist, so it should be used
        var currentRequired = schema.get('required') || (0, _immutable.List)();

        if (_immutable.List.isList(key_dependencies)) {
          schema = schema.set('required', currentRequired.concat(key_dependencies));
        } else {
          schema = schema.set('required', currentRequired.concat(key_dependentRequired));
        }
      }
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_PluginStack.NextPluginRendererMemo, (0, _extends2["default"])({}, props, {
    schema: schema
  }));
};

var DependentHandler = function DependentHandler(props) {
  var storeKeys = props.storeKeys,
      ownKey = props.ownKey,
      schema = props.schema,
      currentPluginIndex = props.currentPluginIndex;
  var next = currentPluginIndex + 1;
  var Plugin = (0, _PluginStack.getNextPlugin)(next, props.widgets);
  var dependencies = schema.get('dependencies');
  var dependentSchemas = schema.get('dependentSchemas');
  var dependentRequired = schema.get('dependentRequired');
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, dependencies || dependentSchemas || dependentRequired ? /*#__PURE__*/_react["default"].createElement(DependentRenderer, (0, _extends2["default"])({
    dependencies: dependencies,
    dependentSchemas: dependentSchemas,
    dependentRequired: dependentRequired,
    storeKeys: storeKeys,
    ownKey: ownKey
  }, props)) : /*#__PURE__*/_react["default"].createElement(Plugin, (0, _extends2["default"])({}, props, {
    currentPluginIndex: next
  })));
};

exports.DependentHandler = DependentHandler;