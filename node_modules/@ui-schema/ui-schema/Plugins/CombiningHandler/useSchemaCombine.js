"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSchemaCombine = exports.handleSchemaCombine = void 0;

var _ConditionalHandler = require("@ui-schema/ui-schema/Plugins/ConditionalHandler");

var _mergeSchema = require("@ui-schema/ui-schema/Utils/mergeSchema");

var _immutable = require("immutable");

var _react = _interopRequireDefault(require("react"));

var handleSchemaCombine = function handleSchemaCombine(schema, value) {
  var allOf = schema.get('allOf');

  if (allOf) {
    allOf.forEach(function (subSchema) {
      // removing afterwards-handled keywords, otherwise they would merge wrongly/double evaluate
      schema = (0, _mergeSchema.mergeSchema)(schema, subSchema["delete"]('if')["delete"]('else')["delete"]('then')["delete"]('allOf'));

      if (value && (_immutable.Map.isMap(value) || _immutable.Record.isRecord(value))) {
        schema = (0, _ConditionalHandler.handleIfElseThen)(subSchema, value, schema);
      }

      var allOf1 = subSchema.get('allOf');

      if (allOf1) {
        // nested allOf may appear when using complex combining-conditional schemas
        allOf1.forEach(function (subSchema1) {
          // removing afterwards-handled keywords, otherwise they would merge wrongly/double evaluate
          // further on nested `allOf` will be resolved by render flow
          schema = (0, _mergeSchema.mergeSchema)(schema, subSchema1["delete"]('if')["delete"]('else')["delete"]('then'));

          if (value && (_immutable.Map.isMap(value) || _immutable.Record.isRecord(value))) {
            schema = (0, _ConditionalHandler.handleIfElseThen)(subSchema1, value, schema);
          }
        });
      }
    });
  }

  return schema;
};

exports.handleSchemaCombine = handleSchemaCombine;

var useSchemaCombine = function useSchemaCombine(schema, value) {
  return _react["default"].useMemo(function () {
    return handleSchemaCombine(schema, value);
  }, [schema, value]);
};

exports.useSchemaCombine = useSchemaCombine;