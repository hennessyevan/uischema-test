{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCmCgB,yCAAgB,CAAI,KAAgC,EAAE,KAAmB,EAAE,GAAiC,EAAqB,CAAC;IAChJ,GAAG,CAAC,CAAC,OAAA,IAAI,EAAA,CAAC,GAAG,KAAK;IAClB,GAAG,CAAC,QAAQ,GAAG,2BAAK;IACpB,GAAG,CAAC,QAAQ,GAAG,2BAAK;IACpB,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;IAChD,GAAG,CAAC,CAAC,YAAA,SAAS,EAAA,CAAC,GAAG,2CAAiB,CAAC,CAAC;QACnC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;QACxC,GAAG,EAAE,IAAI,CAAC,GAAG;aACb,GAAG;IACL,CAAC;IACD,GAAG,CAAC,CAAC,cAAA,WAAW,EAAA,CAAC,GAAG,gCAAS,CAAC,gCAAU,CAAC,SAAS,EAAS,CAAC;QAC1D,EAAE,EAAE,QAAQ;QACZ,WAAW,EAAE,CAAQ;oBACrB,UAAU;QACV,OAAO,MAAQ,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;IACzC,CAAC,GAAG,GAAG;IACP,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;IAChD,MAAM,CAAC,CAAC;QACN,WAAW,EAAE,CAAC;eACT,WAAW;YACd,CAAe,gBAAE,UAAU;YAC3B,CAAe,gBAAE,UAAU,GAAG,QAAQ,GAAG,SAAS;QACpD,CAAC;QACD,WAAW,EAAE,CAAC;YACZ,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,CAAQ;YACd,CAAiB,kBAAE,QAAQ;QAC7B,CAAC;IACH,CAAC;AACH,CAAC;SAEe,yCAAY,CAAI,KAA4B,EAAE,KAAmB,EAAE,GAA8B,EAAiB,CAAC;IACjI,GAAG,CAAC,CAAC,YAAA,SAAS,EAAA,CAAC,GAAG,2CAAiB,CAAC,CAAC;WAChC,KAAK;WACL,KAAK;QACR,mBAAmB,EAAE,IAAI;aACzB,GAAG;IACL,CAAC;IACD,MAAM,CAAC,CAAC;QACN,cAAc,EAAE,CAAC;eACZ,SAAS;YACZ,QAAQ,EAAE,SAAS;QACrB,CAAC;IACH,CAAC;AACH,CAAC","sources":["packages/@react-aria/accordion/src/index.ts","packages/@react-aria/accordion/src/useAccordion.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useAccordion';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaAccordionProps} from '@react-types/accordion';\nimport {ButtonHTMLAttributes, HTMLAttributes, RefObject} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {Node} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useButton} from '@react-aria/button';\nimport {useSelectableItem, useSelectableList} from '@react-aria/selection';\n\ninterface AccordionAria {\n  /** Props for the accordion container element. */\n  accordionProps: HTMLAttributes<HTMLElement>\n}\ninterface AccordionItemAriaProps<T> {\n  item: Node<T>\n}\n\ninterface AccordionItemAria {\n  /** Props for the accordion item button. */\n  buttonProps: ButtonHTMLAttributes<HTMLElement>,\n  /** Props for the accordion item content element. */\n  regionProps: HTMLAttributes<HTMLElement>\n}\n\nexport function useAccordionItem<T>(props: AccordionItemAriaProps<T>, state: TreeState<T>, ref: RefObject<HTMLButtonElement>): AccordionItemAria {\n  let {item} = props;\n  let buttonId = useId();\n  let regionId = useId();\n  let isDisabled = state.disabledKeys.has(item.key);\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: item.key,\n    ref\n  });\n  let {buttonProps} = useButton(mergeProps(itemProps as any, {\n    id: buttonId,\n    elementType: 'button',\n    isDisabled,\n    onPress: () => state.toggleKey(item.key)\n  }), ref);\n  let isExpanded = state.expandedKeys.has(item.key);\n  return {\n    buttonProps: {\n      ...buttonProps,\n      'aria-expanded': isExpanded,\n      'aria-controls': isExpanded ? regionId : undefined\n    },\n    regionProps: {\n      id: regionId,\n      role: 'region',\n      'aria-labelledby': buttonId\n    }\n  };\n}\n\nexport function useAccordion<T>(props: AriaAccordionProps<T>, state: TreeState<T>, ref: RefObject<HTMLDivElement>): AccordionAria {\n  let {listProps} = useSelectableList({\n    ...props,\n    ...state,\n    allowsTabNavigation: true,\n    ref\n  });\n  return {\n    accordionProps: {\n      ...listProps,\n      tabIndex: undefined\n    }\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}