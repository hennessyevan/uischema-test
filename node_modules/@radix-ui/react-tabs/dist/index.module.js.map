{"mappings":"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","sources":["./packages/react/tabs/src/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContext } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { RovingFocusGroup, RovingFocusItem } from '@radix-ui/react-roving-focus';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\ntype RovingFocusGroupProps = React.ComponentProps<typeof RovingFocusGroup>;\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/\n\nconst TABS_NAME = 'Tabs';\n\ntype TabsContextValue = {\n  baseId: string;\n  value?: string;\n  onValueChange: (value: string) => void;\n  orientation?: TabsOwnProps['orientation'];\n  dir?: TabsOwnProps['dir'];\n  activationMode?: TabsOwnProps['activationMode'];\n};\n\nconst [TabsProvider, useTabsContext] = createContext<TabsContextValue>(TABS_NAME);\n\ntype TabsOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    /** The value for the selected tab, if controlled */\n    value?: string;\n    /** The value of the tab to select by default, if uncontrolled */\n    defaultValue?: string;\n    /** A function called when a new tab is selected */\n    onValueChange?: (value: string) => void;\n    /**\n     * The orientation the tabs are layed out.\n     * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n     * @defaultValue horizontal\n     */\n    orientation?: RovingFocusGroupProps['orientation'];\n    /**\n     * The direction of navigation between toolbar items.\n     * @defaultValue ltr\n     */\n    dir?: RovingFocusGroupProps['dir'];\n    /** Whether a tab is activated automatically or manually (default: automatic) */\n    activationMode?: 'automatic' | 'manual';\n  }\n>;\n\ntype TabsPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  TabsOwnProps\n>;\n\nconst Tabs = React.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    orientation = 'horizontal',\n    dir = 'ltr',\n    activationMode = 'automatic',\n    ...tabsProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue,\n  });\n\n  return (\n    <TabsProvider\n      baseId={useId()}\n      value={value}\n      onValueChange={setValue}\n      orientation={orientation}\n      dir={dir}\n      activationMode={activationMode}\n    >\n      <Primitive data-orientation={orientation} {...tabsProps} ref={forwardedRef} />\n    </TabsProvider>\n  );\n}) as TabsPrimitive;\n\nTabs.displayName = TABS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/\n\nconst TAB_LIST_NAME = 'TabsList';\nconst TAB_LIST_DEFAULT_TAG = 'div';\n\ntype TabsListOwnProps = Omit<\n  Polymorphic.OwnProps<typeof RovingFocusGroup>,\n  | 'orientation'\n  | 'currentTabStopId'\n  | 'defaultCurrentTabStopId'\n  | 'onCurrentTabStopIdChange'\n  | 'onEntryFocus'\n>;\ntype TabsListPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TAB_LIST_DEFAULT_TAG,\n  TabsListOwnProps\n>;\n\nconst TabsList = React.forwardRef((props, forwardedRef) => {\n  const { as = TAB_LIST_DEFAULT_TAG, loop = true, ...otherProps } = props;\n  const context = useTabsContext(TAB_LIST_NAME);\n\n  return (\n    <RovingFocusGroup\n      role=\"tablist\"\n      orientation={context.orientation}\n      dir={context.dir}\n      loop={loop}\n      {...otherProps}\n      as={as}\n      ref={forwardedRef}\n    />\n  );\n}) as TabsListPrimitive;\n\nTabsList.displayName = TAB_LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsTab\n * -----------------------------------------------------------------------------------------------*/\n\nconst TAB_NAME = 'TabsTab';\nconst TAB_DEFAULT_TAG = 'div';\n\ntype TabsTabOwnProps = Polymorphic.Merge<\n  Omit<Polymorphic.OwnProps<typeof RovingFocusItem>, 'focusable' | 'active'>,\n  {\n    value: string;\n    disabled?: boolean;\n  }\n>;\n\ntype TabsTabPrimitive = Polymorphic.ForwardRefComponent<typeof TAB_DEFAULT_TAG, TabsTabOwnProps>;\n\nconst TabsTab = React.forwardRef((props, forwardedRef) => {\n  const { as = TAB_DEFAULT_TAG, value, disabled = false, ...tabProps } = props;\n  const context = useTabsContext(TAB_NAME);\n  const tabId = makeTabId(context.baseId, value);\n  const tabPanelId = makeTabsPanelId(context.baseId, value);\n  const isSelected = value === context.value;\n  const handleTabChange = useCallbackRef(() => context.onValueChange(value));\n\n  return (\n    <RovingFocusItem\n      role=\"tab\"\n      aria-selected={isSelected}\n      aria-controls={tabPanelId}\n      aria-disabled={disabled || undefined}\n      data-state={isSelected ? 'active' : 'inactive'}\n      data-disabled={disabled ? '' : undefined}\n      id={tabId}\n      {...tabProps}\n      focusable={!disabled}\n      active={isSelected}\n      as={as}\n      ref={forwardedRef}\n      onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n        if (!disabled && (event.key === ' ' || event.key === 'Enter')) {\n          handleTabChange();\n        }\n      })}\n      onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n        // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n        // but not when the control key is pressed (avoiding MacOS right click)\n        if (!disabled && event.button === 0 && event.ctrlKey === false) {\n          handleTabChange();\n        }\n      })}\n      onFocus={composeEventHandlers(props.onFocus, () => {\n        // handle \"automatic\" activation if necessary\n        // ie. activate tab following focus\n        const isAutomaticActivation = context.activationMode !== 'manual';\n        if (!isSelected && !disabled && isAutomaticActivation) {\n          handleTabChange();\n        }\n      })}\n    />\n  );\n}) as TabsTabPrimitive;\n\nTabsTab.displayName = TAB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsPanel\n * -----------------------------------------------------------------------------------------------*/\n\nconst TAB_PANEL_NAME = 'TabsPanel';\n\ntype TabsPanelPropsOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  { value: string }\n>;\ntype TabsPanelPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  TabsPanelPropsOwnProps\n>;\n\nconst TabsPanel = React.forwardRef((props, forwardedRef) => {\n  const { value, ...tabPanelProps } = props;\n  const context = useTabsContext(TAB_PANEL_NAME);\n  const tabId = makeTabId(context.baseId, value);\n  const tabPanelId = makeTabsPanelId(context.baseId, value);\n  const isSelected = value === context.value;\n\n  return (\n    <Primitive\n      data-state={isSelected ? 'active' : 'inactive'}\n      data-orientation={context.orientation}\n      role=\"tabpanel\"\n      aria-labelledby={tabId}\n      hidden={!isSelected}\n      id={tabPanelId}\n      tabIndex={0}\n      {...tabPanelProps}\n      ref={forwardedRef}\n    />\n  );\n}) as TabsPanelPrimitive;\n\nTabsPanel.displayName = TAB_PANEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction makeTabId(baseId: string, value: string) {\n  return `${baseId}-tab-${value}`;\n}\n\nfunction makeTabsPanelId(baseId: string, value: string) {\n  return `${baseId}-panel-${value}`;\n}\n\nconst Root = Tabs;\nconst List = TabsList;\nconst Tab = TabsTab;\nconst Panel = TabsPanel;\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTab,\n  TabsPanel,\n  //\n  Root,\n  List,\n  Tab,\n  Panel,\n};\n"],"names":["TabsProvider","useTabsContext","createContext","Tabs","React","forwardRef","props","forwardedRef","value","valueProp","onValueChange","defaultValue","orientation","dir","activationMode","tabsProps","setValue","useControllableState","prop","onChange","defaultProp","_react","createElement","$b40a02b2d3d1d21ebd9ba3d555116441$var$TabsProvider","baseId","useId","Primitive","_babelRuntimeHelpersEsmExtends","data-orientation","ref","TAB_LIST_DEFAULT_TAG","TabsList","as","loop","otherProps","context","RovingFocusGroup","role","TAB_DEFAULT_TAG","TabsTab","disabled","tabProps","tabId","makeTabId","tabPanelId","makeTabsPanelId","isSelected","handleTabChange","useCallbackRef","RovingFocusItem","aria-selected","aria-controls","aria-disabled","undefined","data-state","data-disabled","id","focusable","active","onKeyDown","composeEventHandlers","event","key","onMouseDown","button","ctrlKey","onFocus","isAutomaticActivation","TabsPanel","tabPanelProps","aria-labelledby","hidden","tabIndex","Root","List","Tab","Panel"],"version":3,"file":"index.module.js.map"}