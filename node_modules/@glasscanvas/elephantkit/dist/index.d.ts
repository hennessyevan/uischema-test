import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as _stitches_react_types_config from '@stitches/react/types/config';
import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as react from 'react';
import react__default, { ComponentProps, ReactChild, ReactNode, HTMLAttributes, AriaAttributes, Ref, FC, MouseEvent, Key, PropsWithChildren, ChangeEvent, InputHTMLAttributes, FocusEventHandler, FocusEvent, MutableRefObject, ReactElement } from 'react';
import { useRadioGroupState } from '@react-stately/radio';
import { useLink, useNumberField, useRadioGroup, useCheckbox, useDialog, useTextField as useTextField$1, useMenu, useRadio, useSeparator } from 'react-aria';
import { Overwrite } from 'utility-types';
import * as _react_aria_textfield from '@react-aria/textfield';
import { useTextField, AriaTextFieldOptions } from '@react-aria/textfield';
import { VariantProps, PropertyValue, CSS } from '@stitches/react';
import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_util from '@stitches/react/types/util';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import { DropzoneOptions } from 'react-dropzone';
import * as framer_motion from 'framer-motion';
import { MotionProps } from 'framer-motion';
import * as Polymorphic from '@radix-ui/react-polymorphic';
import * as _react_types_checkbox from '@react-types/checkbox';
import * as _react_types_shared from '@react-types/shared';
import { ItemProps, SectionProps, Node } from '@react-types/shared';
import { AriaComboBoxOptions } from '@react-aria/combobox';
import { ComboBoxState } from '@react-stately/combobox';
import { ListProps, ComboBoxState as ComboBoxState$1, TreeState, SelectState, ListState, useTreeState } from 'react-stately';
export { useAsyncList } from 'react-stately';
import cardValidator from 'card-validator';
import { Link as Link$1, Route, HashRouter, MemoryRouter } from 'react-router-dom';
import { FieldInputProps, FieldMetaProps, FieldHelperProps } from 'formik';
import { useRadioGroup as useRadioGroup$1 } from '@react-aria/radio';
import TextAreaAutosize from 'react-textarea-autosize';
import { AriaListBoxOptions } from '@react-aria/listbox';
import { TriggerProps, Placement } from 'react-laag';
export { Placement } from 'react-laag';
import { FieldOrGroup, BasicConfig, JsonTree, Settings, ImmutableTree, Config } from 'react-awesome-query-builder';
import { Route as Route$1 } from 'react-router';
import { IntlConfig, FormatNumberOptions } from 'react-intl';
import { AriaSwitchProps } from '@react-types/switch';
import { useTable, TablePropGetter, SortingRule, Row } from 'react-table';
export { Cell, Column, Meta, Row } from 'react-table';
import * as RadixTabs from '@radix-ui/react-tabs';

declare const AlertFactory: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$borderTopColor: string;
    $$borderRightColor: string;
    $$borderBottomColor: string;
    $$borderLeftColor: string;
    border: string;
    borderColor: string;
    transition: string;
    variants: {
        elevation: {
            1: {
                boxShadow: string;
            };
            2: {
                boxShadow: string;
            };
            3: {
                boxShadow: string;
            };
            4: {
                boxShadow: string;
            };
        };
        hoverElevation: {
            1: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            2: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            3: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            4: {
                '&:hover': {
                    boxShadow: string;
                };
            };
        };
        border: {
            true: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            solid: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            muted: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
        };
        borderTop: {
            true: {
                $$borderTopColor: string;
            };
            solid: {
                $$borderTopColor: string;
            };
            muted: {
                $$borderTopColor: string;
            };
        };
        borderRight: {
            true: {
                $$borderRightColor: string;
            };
            solid: {
                $$borderRightColor: string;
            };
            muted: {
                $$borderRightColor: string;
            };
        };
        borderBottom: {
            true: {
                $$borderBottomColor: string;
            };
            solid: {
                $$borderBottomColor: string;
            };
            muted: {
                $$borderBottomColor: string;
            };
        };
        borderLeft: {
            true: {
                $$borderLeftColor: string;
            };
            solid: {
                $$borderLeftColor: string;
            };
            muted: {
                $$borderLeftColor: string;
            }; /**
             * Title is a required prop
             * @since 1.0
             * @author Evan Hennessy
             */
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, _stitches_react_types_styled_component.StyledComponentProps<[{
    $$intentColor: string;
    backgroundColor: string;
    border: string;
    overflow: string;
    position: string;
    padding: string;
    variants: {
        /**
         * Sets an appearance for the alert
         * @since 1.0
         * @author Evan Hennessy
         * @default 'card'
         */
        appearance: {
            minimal: {
                border: string;
                backgroundColor: string;
            };
            toast: {
                backdropFilter: string;
                backgroundColor: string;
                backfaceVisibility: string;
                transform: string;
                border: string;
                '&::before': {
                    content: string;
                    width: string;
                    height: string;
                    position: string;
                    top: string;
                    left: string;
                    backgroundColor: string;
                    borderRadius: string;
                };
            };
            card: {
                borderRadius: string;
                '&::before': {
                    content: string;
                    width: string;
                    height: string;
                    position: string;
                    top: number;
                    left: number;
                    backgroundColor: string;
                };
            };
        };
        /**
         * Sets the intent of the alert.
         * This will change the color and default Icon for the alert
         * @since 1.0
         * @author Evan Hennessy
         * @default 'info'
         */
        intent: {
            info: {
                $$intentColor: string;
            };
            success: {
                $$intentColor: string;
            };
            danger: {
                $$intentColor: string;
            };
            warning: {
                $$intentColor: string;
            };
        };
    };
    defaultVariants: {
        appearance: "card";
        intent: "info";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AlertBaseProps = ComponentProps<typeof AlertFactory> & {
    /**
     * By default the alert icon is set based on intent
     * You can optionally override this by passing in a custom icon
     * @default 'default'
     * @since 1.0
     * @author Evan Hennessy
     */
    icon?: ReactChild | 'default' | 'none';
    /**
     * Title is a required prop
     * @since 1.0
     * @author Evan Hennessy
     */
    title: string;
};
declare type AlertRemoveableProps = {
    isRemoveable?: false;
    onRemove?: never;
} | {
    /**
     * Sets whether the alert can be removed
     * When true the alert is presented with a close button
     *
     * @note If an alert is removeable you must also set the `onRemove` handler
     * @since 1.0
     * @author Evan Hennessy
     * @default false
     */
    isRemoveable: true;
    /**
     * Called when the remove button is pressed
     */
    onRemove: () => void;
};
declare type AlertProps = AlertBaseProps & AlertRemoveableProps;
/**
 * An alert is a UI element that is used to bring attention to the user
 *
 * It is composed by `Pane` and leaves all of `Pane`'s options available
 *
 * @example
 * ```
 * <Alert title="My title">Add a description here</Alert>
 * ```
 */
declare function Alert({ icon, children, title, isRemoveable, onRemove, ...props }: AlertProps): JSX.Element;

declare const Form: _stitches_react_types_styled_component.StyledComponent<"form", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare const Code: _stitches_react_types_styled_component.StyledComponent<"code", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare const HeadingFactory: _stitches_react_types_styled_component.StyledComponent<"h1", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontFamily: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            groupHeadline: {
                fontWeight: string;
                letterSpacing: string;
                textTransform: string;
                capsize: {
                    fontSize: number;
                };
            };
            subHeadline: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            headline: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title3: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title2: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title1: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            largeTitle: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            extraLargeTitle: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
        };
    };
    defaultVariants: {
        size: "headline";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
/**
 * ### Use this for UI Text
 * It has no margins, line-height, leading or trailing space around the text.
 * If you don't want that then use `Paragraph` instead
 *
 * @note Don't override the `fontSize` in css. Instead use the `size` prop
 * ```
 * <Heading size="caption2">My Text</Heading>
 * ```
 *
 * @advanced
 * If you need to adjust the font-size of the text as an escape hatch, then use the `capsize` utility.
 *
 * @author Evan Hennessy
 */
declare const Heading: react.ForwardRefExoticComponent<Pick<Omit<Pick<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "key" | keyof react.HTMLAttributes<HTMLHeadingElement>> & {
    ref?: react.Ref<HTMLHeadingElement>;
}, "size" | "css"> & _stitches_react_types_styled_component.TransformProps<_stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontFamily: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            groupHeadline: {
                fontWeight: string;
                letterSpacing: string;
                textTransform: string;
                capsize: {
                    fontSize: number;
                };
            };
            subHeadline: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            headline: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title3: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title2: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            title1: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            largeTitle: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
            extraLargeTitle: {
                fontWeight: string;
                capsize: {
                    fontSize: number;
                };
            };
        };
    };
    defaultVariants: {
        size: "headline";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}> & {
    css?: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: {
            readonly [$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: {
            readonly [$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            metrics?: "Recoleta Alt" | "Modern Era";
            fontSize?: number;
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
}, "key" | "size" | "css" | keyof react.HTMLAttributes<HTMLHeadingElement>> & react.RefAttributes<HTMLHeadingElement>>;

/**
 * `Label` is used for input elements and composes `Text`
 *
 * @note When using `Label` be sure to respect aria guidelines
 * by using `react-aria`'s `useLabel` or by nesting the input in `Label`
 */
declare const Label: _stitches_react_types_styled_component.StyledComponent<"label", _stitches_react_types_styled_component.StyledComponentProps<[{
    fontWeight: string;
    margin: number;
    fontSize: string;
    fontFamily: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        /** @default "regular" */
        size: {
            /** @deprecated use small, regular, large instead */
            extraSmall: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            /** @deprecated use small, regular, large instead */
            footnote: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            /** @deprecated use small, regular, large instead */
            caption2: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            /** @deprecated use small, regular, large instead */
            caption1: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            /** @deprecated use small, regular, large instead */
            body: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            small: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            regular: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            large: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        /**
         * @summary These appearances are used for input elements
         * @default "default"
         */
        appearance: {
            default: {};
            /** Use this appearance when the label represents a group of fields or a fieldset */
            group: {
                color: string;
                fontWeight: string;
                letterSpacing: string;
                textTransform: string;
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        /**
         * @default false
         * @type boolean
         */
        disabled: {
            true: {
                color: string;
            };
        };
    };
    defaultVariants: {
        size: "regular";
        appearance: "default";
        disabled: false;
    };
    compoundVariants: {
        size: string;
        appearance: string;
        css: {
            fontSize: number;
            lineGap: number;
        };
    }[];
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

/**
 * Links are used for internal and external anchors.
 *
 * The Link component is also export as `Anchor` to skirt collisions with React Router.
 * @since 1.0
 * @author Evan Hennessy
 */
declare const LinkFactory: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"span", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontSize: string;
    fontFamily: string;
    fontWeight: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            extraSmall: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            footnote: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption2: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption1: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            body: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            large: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        lineClamp: {
            true: {
                '.truncate': {
                    display: string;
                    overflow: string;
                    textOverflow: string;
                    whiteSpace: string;
                };
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, _stitches_react_types_styled_component.StyledComponentProps<[{
    [x: string]: string | {
        filter: string;
        '&:hover, &:active'?: undefined;
        outline?: undefined;
        backgroundColor?: undefined;
        /**
         * Adds an underline to the link
         * @default false
         * @type boolean
         */
        underline?: undefined;
        /** @private */
        isPressed?: undefined;
    } | {
        '&:hover, &:active': {
            filter: string;
        };
        filter?: undefined;
        outline?: undefined;
        backgroundColor?: undefined;
        /**
         * Adds an underline to the link
         * @default false
         * @type boolean
         */
        underline?: undefined;
        /** @private */
        isPressed?: undefined;
    } | {
        outline: string;
        backgroundColor: string;
        filter?: undefined;
        '&:hover, &:active'?: undefined;
        /**
         * Adds an underline to the link
         * @default false
         * @type boolean
         */
        underline?: undefined;
        /** @private */
        isPressed?: undefined;
    } | {
        /**
         * Adds an underline to the link
         * @default false
         * @type boolean
         */
        underline: {
            true: {
                textDecoration: string;
                textDecorationThickness: string;
                textUnderlineOffset: string;
            };
        };
        /** @private */
        isPressed: {
            true: {
                backgroundColor: string;
            };
        };
        filter?: undefined;
        '&:hover, &:active'?: undefined;
        outline?: undefined;
        backgroundColor?: undefined;
    };
    all: string;
    textDecoration: string;
    cursor: string;
    color: string;
    display: string;
    transition: string;
    '&:hover, &:active': {
        filter: string;
    };
    '&:focus': {
        outline: string;
        backgroundColor: string;
    };
    variants: {
        /**
         * Adds an underline to the link
         * @default false
         * @type boolean
         */
        underline: {
            true: {
                textDecoration: string;
                textDecorationThickness: string;
                textUnderlineOffset: string;
            };
        };
        /** @private */
        isPressed: {
            true: {
                backgroundColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AriaLinkProps = Parameters<typeof useLink>[0];
declare type LinkProps = Omit<Overwrite<ComponentProps<typeof LinkFactory>, AriaLinkProps>, 'isDisabled' | 'elementType'> & {
    /** Whether the link is disabled. */
    disabled?: AriaLinkProps['isDisabled'];
};
declare type LinkComponent = Polymorphic.ForwardRefComponent<'a', LinkProps>;
declare const Link: LinkComponent;

declare const Paragraph: _stitches_react_types_styled_component.StyledComponent<"p", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    variants: {
        size: {
            caption2: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            caption1: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            body: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            large: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare const Pre: _stitches_react_types_styled_component.StyledComponent<"pre", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"p", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    variants: {
        size: {
            caption2: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            caption1: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            body: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
            large: {
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                letterSpacing: string;
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    fontFamily: string;
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

/**
 * Use this for UI Text
 * @description It has no margins, line-height, leading or trailing space around the text.
 * If you don't want that then use `Paragraph` instead
 *
 * @note Don't override the `fontSize` in css. Instead use the `size` prop
 * @example ```jsx
 * <Text size="caption2">My Text</Text>
 * ```
 *
 * @author Evan Hennessy
 */
declare const TextFactory: _stitches_react_types_styled_component.StyledComponent<"span", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontSize: string;
    fontFamily: string;
    fontWeight: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            extraSmall: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            footnote: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption2: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption1: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            body: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            large: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        lineClamp: {
            true: {
                '.truncate': {
                    display: string;
                    overflow: string;
                    textOverflow: string;
                    whiteSpace: string;
                };
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const Text: _stitches_react_types_styled_component.StyledComponent<"span", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontSize: string;
    fontFamily: string;
    fontWeight: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            extraSmall: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            footnote: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption2: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption1: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            body: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            large: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        lineClamp: {
            true: {
                '.truncate': {
                    display: string;
                    overflow: string;
                    textOverflow: string;
                    whiteSpace: string;
                };
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type TextSize = VariantProps<typeof TextFactory>['size'];

declare const Strong: _stitches_react_types_styled_component.StyledComponent<"strong", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"span", _stitches_react_types_styled_component.StyledComponentProps<[{
    margin: number;
    fontSize: string;
    fontFamily: string;
    fontWeight: string;
    capsize: {
        metrics: string;
        lineGap: number;
    };
    variants: {
        size: {
            extraSmall: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            footnote: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption2: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            caption1: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            body: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
            large: {
                capsize: {
                    fontSize: number;
                    lineGap: number;
                };
            };
        };
        lineClamp: {
            true: {
                '.truncate': {
                    display: string;
                    overflow: string;
                    textOverflow: string;
                    whiteSpace: string;
                };
            };
        };
    };
    defaultVariants: {
        size: "body";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    fontWeight: string;
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type ValidationMessageProps = {
    /** Provide a helpful message for why the input is invalid */
    errorMessage?: ReactNode;
    errorMessageProps?: HTMLAttributes<any>;
    /** The aria invalid attribute */
    invalid?: AriaAttributes['aria-invalid'];
    /**
     * Use this to provide some help to users about the field
     */
    helpText?: ReactNode;
    helpTextProps?: HTMLAttributes<any>;
};

declare const FieldWrapper: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const LabelDescriptionWrapper: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    variants: {
        wrap: {
            true: {
                flexWrap: string;
            };
            false: {
                flexWrap: string;
            };
        };
        space: {
            none: {
                gap: string;
            };
            extraSmall: {
                gap: string;
            };
            small: {
                gap: string;
            };
            medium: {
                gap: string;
            };
            large: {
                gap: string;
            };
            extraLarge: {
                gap: string;
            };
        };
        orientation: {
            horizontal: {
                flexDirection: string;
            };
            vertical: {
                flexDirection: string;
            };
        };
    };
    defaultVariants: {
        space: "medium";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    flexDirection: string;
    variants: {
        reverse: {
            true: {
                flexDirection: string;
            };
        };
        justify: {
            start: {
                justifyContent: string;
            };
            stretch: {
                justifyContent: string;
            };
            between: {
                justifyContent: string;
            };
            around: {
                justifyContent: string;
            };
            evenly: {
                justifyContent: string;
            };
            center: {
                justifyContent: string;
            };
            end: {
                justifyContent: string;
            };
        };
        align: {
            start: {
                alignItems: string;
            };
            stretch: {
                alignItems: string;
            };
            center: {
                alignItems: string;
            };
            end: {
                alignItems: string;
            };
        };
    };
    defaultVariants: {
        align: "stretch";
        justify: "start";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare function FieldDescription({ description, ...props }: {
    description?: ReactNode;
}): JSX.Element;
declare type FieldLabelAndDescriptionProps = {
    description?: ReactNode;
    descriptionProps?: Partial<ComponentProps<typeof Text>>;
    label?: ReactNode;
    labelProps?: Partial<ComponentProps<typeof Label>>;
};
declare function FieldLabelAndDescription({ description, label, labelProps, descriptionProps, }: FieldLabelAndDescriptionProps): JSX.Element;
declare type FieldErrorMessageProps = ReturnType<typeof useTextField>['errorMessageProps'] & Pick<Parameters<typeof useTextField>[0], 'errorMessage' | 'aria-errormessage'> & {
    invalid?: AriaAttributes['aria-invalid'];
};
declare function FieldErrorMessage({ errorMessage, invalid, ...props }: FieldErrorMessageProps): JSX.Element;
/**
 * This validation message is shared across form fields
 */
declare function FieldErrorAndHelpText({ helpText, helpTextProps, invalid, errorMessage, errorMessageProps, }: ValidationMessageProps): JSX.Element;

interface NumberFormatOptions extends Intl.NumberFormatOptions {
    style: 'currency' | 'percent' | 'decimal' | 'unit' | ({} & string);
    localeMatcher?: 'lookup' | 'best fit' | ({} & string);
    currencySign?: 'standard' | 'accounting' | ({} & string);
    currencyDisplay?: 'symbol' | 'narrowSymbol' | 'code' | 'name' | ({} & string);
    unit?: 'acre' | 'bit' | 'byte' | 'celsius' | 'centimeter' | 'day' | 'degree' | 'fahrenheit' | 'fluid-ounce' | 'foot' | 'gallon' | 'gigabit' | 'gigabyte' | 'gram' | 'hectare' | 'hour' | 'inch' | 'kilobit' | 'kilobyte' | 'kilogram' | 'kilometer' | 'liter' | 'megabit' | 'megabyte' | 'meter' | 'mile' | 'mile-scandinavian' | 'milliliter' | 'millimeter' | 'millisecond' | 'minute' | 'month' | 'ounce' | 'percent' | 'petabyte' | 'pound' | 'second' | 'stone' | 'terabit' | 'terabyte' | 'week' | 'yard' | 'year' | ({} & string);
}

declare const NumberInputFactory: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"input", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    width: string;
    padding: string;
    transition: string;
    '&::placeholder': {
        color: string;
    };
    '&[disabled]': {
        cursor: string;
    };
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        backgroundColor: string;
        boxShadow: string;
    };
    '&:disabled': {
        $$shadowColor: string;
        color: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        size: {
            small: {
                fontSize: string;
                padding: string;
                borderRadius: string; /** @private */
                height: string;
            };
            regular: {
                fontSize: string;
                padding: string;
                height: string;
            };
            large: {
                fontSize: string;
                padding: string;
                height: string;
            };
        };
        valid: {
            true: {
                $$shadowColor: string;
                backgroundColor: string;
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        iconBefore: {
            true: {
                paddingLeft: string;
            };
        };
        iconAfter: {
            true: {
                paddingRight: string;
            };
        };
    };
    compoundVariants: {
        iconBefore: true;
        size: string;
        css: {
            paddingLeft: string;
        };
    }[];
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, _stitches_react_types_styled_component.StyledComponentProps<[{
    '&:focus': {
        boxShadow: string;
    };
    variants: {
        inputStyle: {
            none: {
                textAlign: string;
            };
            accounting: {
                textAlign: string;
                paddingLeft: string;
            };
        };
        stepper: {
            true: {};
            false: {
                paddingRight: string;
            };
        };
        /** @private */
        focused: {
            true: {
                boxShadow: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AriaNumberInputProps = Parameters<typeof useNumberField>[0];
declare type NumberInputProps = VariantProps<typeof NumberInputFactory> & Omit<ComponentProps<typeof NumberInputFactory>, 'onChange'> & AriaNumberInputProps & ValidationMessageProps & {
    /**
     * Add an optional description below the label
     */
    description?: string;
    /** Options for formatting the number
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
     */
    formatOptions?: NumberFormatOptions;
    /** Optionally hide the stepper buttons */
    stepper?: boolean;
    /**
     * The label for the field.
     * @required even if hidden
     */
    label?: string;
    'aria-label'?: string;
};
/**
 * Number Input used primarily in forms.
 * @status Stable
 * @category Inputs
 * @Author Evan Hennessy
 * @see https://react-stately.dev/numberinput
 * @example
 * <NumberInput
 *  label="Number Input"
 *  value={numberInputValue}
 *  onChange={(value) => setNumberInputValue(value)}
 * />
 */
declare const NumberInput: react.ForwardRefExoticComponent<Pick<NumberInputProps, "key" | "color" | "height" | "translate" | "width" | "hidden" | "size" | "style" | "label" | "disabled" | "focused" | "css" | "prefix" | "form" | "slot" | "title" | "pattern" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "list" | "value" | "max" | "min" | "name" | "type" | "crossOrigin" | "step" | "invalid" | "multiple" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "isDisabled" | "iconBefore" | "iconAfter" | "description" | "onFocusChange" | "autoComplete" | "maxLength" | "minLength" | "readOnly" | "required" | "src" | "alt" | "accept" | "capture" | "checked" | "enterKeyHint" | "errorMessage" | "errorMessageProps" | "isReadOnly" | "validationState" | "isRequired" | "helpText" | "helpTextProps" | "valid" | "inputStyle" | "stepper" | "decrementAriaLabel" | "incrementAriaLabel" | "formatOptions" | "minValue" | "maxValue"> & react.RefAttributes<HTMLInputElement>>;

declare type OverideProps = {
    value?: number;
    defaultValue?: number;
    onChange?: (value: number) => void;
};
declare type RadioGroupStateProps = Overwrite<Parameters<typeof useRadioGroupState>[0], OverideProps>;
declare type RadioGroupProps$1 = Overwrite<Parameters<typeof useRadioGroup>[0], OverideProps>;
declare type AriaProps = Overwrite<RadioGroupStateProps, RadioGroupProps$1>;
declare type AmountOtherInputProps = Pick<ComponentProps<typeof NumberInput>, 'minValue' | 'maxValue' | 'onBlur' | 'name' | 'autoFocus' | 'invalid'>;
declare type AmountSelectorProps = {
    options?: {
        label?: string;
        value: number;
    }[];
    /** Shows the other amount text field
     * @default false
     */
    otherField?: ReactNode | boolean;
    disabled?: Parameters<typeof useRadioGroup>[0]['isDisabled'];
    required?: Parameters<typeof useRadioGroup>[0]['isRequired'];
    currency?: string;
    /** @private only used internally */
    onBlur?: Parameters<typeof Number>[0]['onBlur'];
} & AriaProps & ValidationMessageProps & FieldLabelAndDescriptionProps & AmountOtherInputProps;
declare function AmountSelector({ currency, helpText, invalid, errorMessage, minValue, maxValue, labelProps, ...props }: AmountSelectorProps): JSX.Element;

declare const ImageFactory: _stitches_react_types_styled_component.StyledComponent<"img", _stitches_react_types_styled_component.StyledComponentProps<[{
    variants: {
        defaultFallback: {
            true: {
                backgroundColor: string;
                width: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type ImageProps = ComponentProps<typeof ImageFactory> & {
    /**
     * Uses a fallback image in the case of an error loading the image
     */
    fallback?: ImageProps['src'];
};
declare const Image: react.ForwardRefExoticComponent<Pick<Omit<Pick<react.DetailedHTMLProps<react.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "key" | keyof react.ImgHTMLAttributes<HTMLImageElement>> & {
    ref?: Ref<HTMLImageElement>;
}, "css" | "defaultFallback"> & _stitches_react_types_styled_component.TransformProps<_stitches_react_types_styled_component.StyledComponentProps<[{
    variants: {
        defaultFallback: {
            true: {
                backgroundColor: string;
                width: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}> & {
    css?: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: {
            readonly [$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: {
            readonly [$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            metrics?: "Recoleta Alt" | "Modern Era";
            fontSize?: number;
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
} & {
    /**
     * Uses a fallback image in the case of an error loading the image
     */
    fallback?: ImageProps['src'];
}, "key" | "css" | "fallback" | keyof react.ImgHTMLAttributes<HTMLImageElement> | "defaultFallback"> & react.RefAttributes<HTMLImageElement>>;

/**
 * Box is a primitive for ElephantKit.
 * It can be used standalone or to compose other components.
 * It comes with a theme-aware css prop for styling
 */
declare const Box: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

/**
 * Card is just a `Pane` with some defaults set on it
 * @see './Pane'
 */
declare const Card: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$borderTopColor: string;
    $$borderRightColor: string;
    $$borderBottomColor: string;
    $$borderLeftColor: string;
    border: string;
    borderColor: string;
    transition: string;
    variants: {
        elevation: {
            1: {
                boxShadow: string;
            };
            2: {
                boxShadow: string;
            };
            3: {
                boxShadow: string;
            };
            4: {
                boxShadow: string;
            };
        };
        hoverElevation: {
            1: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            2: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            3: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            4: {
                '&:hover': {
                    boxShadow: string;
                };
            };
        };
        border: {
            true: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            solid: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            muted: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
        };
        borderTop: {
            true: {
                $$borderTopColor: string;
            };
            solid: {
                $$borderTopColor: string;
            };
            muted: {
                $$borderTopColor: string;
            };
        };
        borderRight: {
            true: {
                $$borderRightColor: string;
            };
            solid: {
                $$borderRightColor: string;
            };
            muted: {
                $$borderRightColor: string;
            };
        };
        borderBottom: {
            true: {
                $$borderBottomColor: string;
            };
            solid: {
                $$borderBottomColor: string;
            };
            muted: {
                $$borderBottomColor: string;
            };
        };
        borderLeft: {
            true: {
                $$borderLeftColor: string;
            };
            solid: {
                $$borderLeftColor: string;
            };
            muted: {
                $$borderLeftColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type OverlayProps = {
    /**
     * Control whether overlay should be shown. Will have to
     */
    isShown?: boolean;
    /**
     * Boolean indicating if clicking the overlay should close the overlay.
     */
    shouldCloseOnClick?: boolean;
    /**
     * Boolean indicating if pressing escape should close the overlay.
     */
    shouldCloseOnEscapePress?: boolean;
    /**
     * Boolean indicating whether to prevent scrolling beneath the overlay
     */
    preventBodyScroll?: boolean;
    /**
     * Called when overlay is hidden
     */
    onHide?: (overlayRef?: HTMLDivElement) => void;
    /**
     * Called when overlay is shown
     */
    onShow?: (overlayRef?: HTMLDivElement) => void;
    children?: ((close?: () => void) => ReactNode) | ReactNode;
    containerCSS?: ComponentProps<typeof OverlayInner>['css'];
};
declare const OverlayInner: _stitches_react_types_styled_component.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare function Overlay({ isShown: initShown, onShow, onHide, shouldCloseOnClick, shouldCloseOnEscapePress, children, containerCSS, preventBodyScroll, }: OverlayProps): JSX.Element;
declare namespace Overlay {
    var defaultProps: {
        shouldCloseOnClick: boolean;
        shouldCloseOnEscapePress: boolean;
        onShow: (...args: any[]) => void;
        onHide: (...args: any[]) => void;
        preventBodyScroll: boolean;
        isShown: boolean;
        containerCSS: {};
    };
}

declare const Pane: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$borderTopColor: string;
    $$borderRightColor: string;
    $$borderBottomColor: string;
    $$borderLeftColor: string;
    border: string;
    borderColor: string;
    transition: string;
    variants: {
        elevation: {
            1: {
                boxShadow: string;
            };
            2: {
                boxShadow: string;
            };
            3: {
                boxShadow: string;
            };
            4: {
                boxShadow: string;
            };
        };
        hoverElevation: {
            1: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            2: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            3: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            4: {
                '&:hover': {
                    boxShadow: string;
                };
            };
        };
        border: {
            true: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            solid: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            muted: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
        };
        borderTop: {
            true: {
                $$borderTopColor: string;
            };
            solid: {
                $$borderTopColor: string;
            };
            muted: {
                $$borderTopColor: string;
            };
        };
        borderRight: {
            true: {
                $$borderRightColor: string;
            };
            solid: {
                $$borderRightColor: string;
            };
            muted: {
                $$borderRightColor: string;
            };
        };
        borderBottom: {
            true: {
                $$borderBottomColor: string;
            };
            solid: {
                $$borderBottomColor: string;
            };
            muted: {
                $$borderBottomColor: string;
            };
        };
        borderLeft: {
            true: {
                $$borderLeftColor: string;
            };
            solid: {
                $$borderLeftColor: string;
            };
            muted: {
                $$borderLeftColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type Intent = 'danger' | 'success' | 'warning' | 'info';
declare const hsl: {
    slate: string;
    blue: string;
    lightBlue: string;
    navy: string;
    steel: string;
    jade: string;
    green: string;
    yellow: string;
    coral: string;
    cream: string;
    red: string;
    pink: string;
    rose: string;
    purple: string;
    black: string;
    gray1: string;
    gray2: string;
    gray3: string;
    gray4: string;
    gray5: string;
    gray6: string;
    white: string;
    danger: string;
    success: string;
    warning: string;
};
declare type HSL_COLOR = typeof hsl & Record<`hsl_${keyof typeof hsl}`, string>;
declare function initThemeColors(colors: Record<string, string>): HSL_COLOR;
declare const colors: {
    hsl_primary: string;
    hsl_info: string;
    hsl_secondary: string;
    hsl_tertiary: string;
    hsl_background: string;
    hsl_secondaryBackground: string;
    hsl_tertiaryBackground: string;
    slate: string;
    blue: string;
    lightBlue: string;
    navy: string;
    steel: string;
    jade: string;
    green: string;
    yellow: string;
    coral: string;
    cream: string;
    red: string;
    pink: string;
    rose: string;
    purple: string;
    black: string;
    gray1: string;
    gray2: string;
    gray3: string;
    gray4: string;
    gray5: string;
    gray6: string;
    white: string;
    danger: string;
    success: string;
    warning: string;
    hsl_danger: string;
    hsl_success: string;
    hsl_warning: string;
    hsl_slate: string;
    hsl_blue: string;
    hsl_lightBlue: string;
    hsl_navy: string;
    hsl_steel: string;
    hsl_jade: string;
    hsl_green: string;
    hsl_yellow: string;
    hsl_coral: string;
    hsl_cream: string;
    hsl_red: string;
    hsl_pink: string;
    hsl_rose: string;
    hsl_purple: string;
    hsl_black: string;
    hsl_gray1: string;
    hsl_gray2: string;
    hsl_gray3: string;
    hsl_gray4: string;
    hsl_gray5: string;
    hsl_gray6: string;
    hsl_white: string;
};
declare const semanticColors: {
    primary: string;
    secondary: string;
    tertiary: string;
    background: string;
    secondaryBackground: string;
    tertiaryBackground: string;
    groupedBackground: string;
    info: string;
    overlay: string;
    tooltip: string;
    primaryTint: string;
    secondaryTint: string;
    tertiaryTint: string;
    dangerTint: string;
    successTint: string;
    warningTint: string;
    muted: string;
    primarySplit: string;
    secondarySplit: string;
    tertiarySplit: string;
    label: string;
    secondaryLabel: string;
    tertiaryLabel: string;
    quartenaryLabel: string;
    placeholderText: string;
    disabled: string;
    radio: string;
    checkbox: string;
    onPrimary: string;
    onSecondary: string;
    onTertiary: string;
    focusStroke: string;
};
declare const fontSizes: {
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: string;
    9: string;
    10: string;
};
declare const fontFamilyMap: {
    $serif: string;
    $sans: string;
};
declare const themeConfig: {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        /** Clamped sizes */
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
};
declare const capsizeFontConfig: {
    readonly 'Modern Era': {
        readonly capHeight: 700;
        readonly ascent: 785;
        readonly descent: -215;
        readonly lineGap: 0;
        readonly unitsPerEm: 1000;
    };
    readonly 'Recoleta Alt': {
        readonly capHeight: 710;
        readonly ascent: 1000;
        readonly descent: -360;
        readonly lineGap: 0;
        readonly unitsPerEm: 1000;
    };
};
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: PropertyValue<'margin'>) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: PropertyValue<'margin'>) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: PropertyValue<'padding'>) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: PropertyValue<'padding'>) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: PropertyValue<'width'>) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: PropertyValue<'minWidth'>) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: PropertyValue<'maxWidth'>) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            /**
             * Custom metrics to use in the capsize calculation
             * These should be added to the theme config dictionary
             */
            metrics?: keyof typeof capsizeFontConfig;
            /**
             * The desired font size in pixels
             */
            fontSize?: number;
            /**
             * The desired gap between lines of text in pixels
             * This is something different than line height and more similar to "grid-gap"
             */
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: PropertyValue<'margin'>) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: PropertyValue<'margin'>) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: PropertyValue<'padding'>) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: PropertyValue<'padding'>) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: PropertyValue<'width'>) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: PropertyValue<'minWidth'>) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: PropertyValue<'maxWidth'>) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        /**
         * Custom metrics to use in the capsize calculation
         * These should be added to the theme config dictionary
         */
        metrics?: keyof typeof capsizeFontConfig;
        /**
         * The desired font size in pixels
         */
        fontSize?: number;
        /**
         * The desired gap between lines of text in pixels
         * This is something different than line height and more similar to "grid-gap"
         */
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>; })[]) => () => string;
declare const config: {
    prefix: "gc";
    media: {
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    };
    theme: {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    };
    themeMap: _stitches_react_types_config.DefaultThemeMap;
    utils: {
        marginInline: (value: PropertyValue<'margin'>) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: PropertyValue<'margin'>) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: PropertyValue<'padding'>) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: PropertyValue<'padding'>) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: PropertyValue<'width'>) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: PropertyValue<'minWidth'>) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: PropertyValue<'maxWidth'>) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            /**
             * Custom metrics to use in the capsize calculation
             * These should be added to the theme config dictionary
             */
            metrics?: keyof typeof capsizeFontConfig;
            /**
             * The desired font size in pixels
             */
            fontSize?: number;
            /**
             * The desired gap between lines of text in pixels
             * This is something different than line height and more similar to "grid-gap"
             */
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    };
};
declare const styled: <Type extends _stitches_react_types_util.Function | keyof JSX.IntrinsicElements | react.ComponentType<any>, Composers extends (string | _stitches_react_types_util.Function | react.ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: PropertyValue<'margin'>) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: PropertyValue<'margin'>) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: PropertyValue<'padding'>) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: PropertyValue<'padding'>) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: PropertyValue<'width'>) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: PropertyValue<'minWidth'>) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: PropertyValue<'maxWidth'>) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        /**
         * Custom metrics to use in the capsize calculation
         * These should be added to the theme config dictionary
         */
        metrics?: keyof typeof capsizeFontConfig;
        /**
         * The desired font size in pixels
         */
        fontSize?: number;
        /**
         * The desired gap between lines of text in pixels
         * This is something different than line height and more similar to "grid-gap"
         */
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>(type: Type, ...composers: { [K in keyof Composers]: Composers[K] extends string | _stitches_react_types_util.Function | react.ComponentType<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    };
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]>; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[];
    defaultVariants?: "variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]>; } : _stitches_react_types_util.WideObject;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.StyledComponent<Type, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: PropertyValue<'margin'>) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: PropertyValue<'margin'>) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: PropertyValue<'padding'>) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: PropertyValue<'padding'>) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: PropertyValue<'width'>) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: PropertyValue<'minWidth'>) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: PropertyValue<'maxWidth'>) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        /**
         * Custom metrics to use in the capsize calculation
         * These should be added to the theme config dictionary
         */
        metrics?: keyof typeof capsizeFontConfig;
        /**
         * The desired font size in pixels
         */
        fontSize?: number;
        /**
         * The desired gap between lines of text in pixels
         * This is something different than line height and more similar to "grid-gap"
         */
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const css: <Composers extends (string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: PropertyValue<'margin'>) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: PropertyValue<'margin'>) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: PropertyValue<'padding'>) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: PropertyValue<'padding'>) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: PropertyValue<'width'>) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: PropertyValue<'minWidth'>) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: PropertyValue<'maxWidth'>) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        /**
         * Custom metrics to use in the capsize calculation
         * These should be added to the theme config dictionary
         */
        metrics?: keyof typeof capsizeFontConfig;
        /**
         * The desired font size in pixels
         */
        fontSize?: number;
        /**
         * The desired gap between lines of text in pixels
         * This is something different than line height and more similar to "grid-gap"
         */
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>(...composers: { [K in keyof Composers]: Composers[K] extends string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    };
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]>; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[];
    defaultVariants?: "variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]>; } : _stitches_react_types_util.WideObject;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, CSS>;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        primary: _stitches_react_types_theme.Token<"primary", string, "colors", "gc">;
        secondary: _stitches_react_types_theme.Token<"secondary", string, "colors", "gc">;
        tertiary: _stitches_react_types_theme.Token<"tertiary", string, "colors", "gc">;
        background: _stitches_react_types_theme.Token<"background", string, "colors", "gc">;
        secondaryBackground: _stitches_react_types_theme.Token<"secondaryBackground", string, "colors", "gc">;
        tertiaryBackground: _stitches_react_types_theme.Token<"tertiaryBackground", string, "colors", "gc">;
        groupedBackground: _stitches_react_types_theme.Token<"groupedBackground", string, "colors", "gc">;
        info: _stitches_react_types_theme.Token<"info", string, "colors", "gc">;
        overlay: _stitches_react_types_theme.Token<"overlay", string, "colors", "gc">;
        tooltip: _stitches_react_types_theme.Token<"tooltip", string, "colors", "gc">;
        primaryTint: _stitches_react_types_theme.Token<"primaryTint", string, "colors", "gc">;
        secondaryTint: _stitches_react_types_theme.Token<"secondaryTint", string, "colors", "gc">;
        tertiaryTint: _stitches_react_types_theme.Token<"tertiaryTint", string, "colors", "gc">;
        dangerTint: _stitches_react_types_theme.Token<"dangerTint", string, "colors", "gc">;
        successTint: _stitches_react_types_theme.Token<"successTint", string, "colors", "gc">;
        warningTint: _stitches_react_types_theme.Token<"warningTint", string, "colors", "gc">;
        muted: _stitches_react_types_theme.Token<"muted", string, "colors", "gc">;
        primarySplit: _stitches_react_types_theme.Token<"primarySplit", string, "colors", "gc">;
        secondarySplit: _stitches_react_types_theme.Token<"secondarySplit", string, "colors", "gc">;
        tertiarySplit: _stitches_react_types_theme.Token<"tertiarySplit", string, "colors", "gc">;
        label: _stitches_react_types_theme.Token<"label", string, "colors", "gc">;
        secondaryLabel: _stitches_react_types_theme.Token<"secondaryLabel", string, "colors", "gc">;
        tertiaryLabel: _stitches_react_types_theme.Token<"tertiaryLabel", string, "colors", "gc">;
        quartenaryLabel: _stitches_react_types_theme.Token<"quartenaryLabel", string, "colors", "gc">;
        placeholderText: _stitches_react_types_theme.Token<"placeholderText", string, "colors", "gc">;
        disabled: _stitches_react_types_theme.Token<"disabled", string, "colors", "gc">;
        radio: _stitches_react_types_theme.Token<"radio", string, "colors", "gc">;
        checkbox: _stitches_react_types_theme.Token<"checkbox", string, "colors", "gc">;
        onPrimary: _stitches_react_types_theme.Token<"onPrimary", string, "colors", "gc">;
        onSecondary: _stitches_react_types_theme.Token<"onSecondary", string, "colors", "gc">;
        onTertiary: _stitches_react_types_theme.Token<"onTertiary", string, "colors", "gc">;
        focusStroke: _stitches_react_types_theme.Token<"focusStroke", string, "colors", "gc">;
        hsl_primary: _stitches_react_types_theme.Token<"hsl_primary", string, "colors", "gc">;
        hsl_info: _stitches_react_types_theme.Token<"hsl_info", string, "colors", "gc">;
        hsl_secondary: _stitches_react_types_theme.Token<"hsl_secondary", string, "colors", "gc">;
        hsl_tertiary: _stitches_react_types_theme.Token<"hsl_tertiary", string, "colors", "gc">;
        hsl_background: _stitches_react_types_theme.Token<"hsl_background", string, "colors", "gc">;
        hsl_secondaryBackground: _stitches_react_types_theme.Token<"hsl_secondaryBackground", string, "colors", "gc">;
        hsl_tertiaryBackground: _stitches_react_types_theme.Token<"hsl_tertiaryBackground", string, "colors", "gc">;
        slate: _stitches_react_types_theme.Token<"slate", string, "colors", "gc">;
        blue: _stitches_react_types_theme.Token<"blue", string, "colors", "gc">;
        lightBlue: _stitches_react_types_theme.Token<"lightBlue", string, "colors", "gc">;
        navy: _stitches_react_types_theme.Token<"navy", string, "colors", "gc">;
        steel: _stitches_react_types_theme.Token<"steel", string, "colors", "gc">;
        jade: _stitches_react_types_theme.Token<"jade", string, "colors", "gc">;
        green: _stitches_react_types_theme.Token<"green", string, "colors", "gc">;
        yellow: _stitches_react_types_theme.Token<"yellow", string, "colors", "gc">;
        coral: _stitches_react_types_theme.Token<"coral", string, "colors", "gc">;
        cream: _stitches_react_types_theme.Token<"cream", string, "colors", "gc">;
        red: _stitches_react_types_theme.Token<"red", string, "colors", "gc">;
        pink: _stitches_react_types_theme.Token<"pink", string, "colors", "gc">;
        rose: _stitches_react_types_theme.Token<"rose", string, "colors", "gc">;
        purple: _stitches_react_types_theme.Token<"purple", string, "colors", "gc">;
        black: _stitches_react_types_theme.Token<"black", string, "colors", "gc">;
        gray1: _stitches_react_types_theme.Token<"gray1", string, "colors", "gc">;
        gray2: _stitches_react_types_theme.Token<"gray2", string, "colors", "gc">;
        gray3: _stitches_react_types_theme.Token<"gray3", string, "colors", "gc">;
        gray4: _stitches_react_types_theme.Token<"gray4", string, "colors", "gc">;
        gray5: _stitches_react_types_theme.Token<"gray5", string, "colors", "gc">;
        gray6: _stitches_react_types_theme.Token<"gray6", string, "colors", "gc">;
        white: _stitches_react_types_theme.Token<"white", string, "colors", "gc">;
        danger: _stitches_react_types_theme.Token<"danger", string, "colors", "gc">;
        success: _stitches_react_types_theme.Token<"success", string, "colors", "gc">;
        warning: _stitches_react_types_theme.Token<"warning", string, "colors", "gc">;
        hsl_danger: _stitches_react_types_theme.Token<"hsl_danger", string, "colors", "gc">;
        hsl_success: _stitches_react_types_theme.Token<"hsl_success", string, "colors", "gc">;
        hsl_warning: _stitches_react_types_theme.Token<"hsl_warning", string, "colors", "gc">;
        hsl_slate: _stitches_react_types_theme.Token<"hsl_slate", string, "colors", "gc">;
        hsl_blue: _stitches_react_types_theme.Token<"hsl_blue", string, "colors", "gc">;
        hsl_lightBlue: _stitches_react_types_theme.Token<"hsl_lightBlue", string, "colors", "gc">;
        hsl_navy: _stitches_react_types_theme.Token<"hsl_navy", string, "colors", "gc">;
        hsl_steel: _stitches_react_types_theme.Token<"hsl_steel", string, "colors", "gc">;
        hsl_jade: _stitches_react_types_theme.Token<"hsl_jade", string, "colors", "gc">;
        hsl_green: _stitches_react_types_theme.Token<"hsl_green", string, "colors", "gc">;
        hsl_yellow: _stitches_react_types_theme.Token<"hsl_yellow", string, "colors", "gc">;
        hsl_coral: _stitches_react_types_theme.Token<"hsl_coral", string, "colors", "gc">;
        hsl_cream: _stitches_react_types_theme.Token<"hsl_cream", string, "colors", "gc">;
        hsl_red: _stitches_react_types_theme.Token<"hsl_red", string, "colors", "gc">;
        hsl_pink: _stitches_react_types_theme.Token<"hsl_pink", string, "colors", "gc">;
        hsl_rose: _stitches_react_types_theme.Token<"hsl_rose", string, "colors", "gc">;
        hsl_purple: _stitches_react_types_theme.Token<"hsl_purple", string, "colors", "gc">;
        hsl_black: _stitches_react_types_theme.Token<"hsl_black", string, "colors", "gc">;
        hsl_gray1: _stitches_react_types_theme.Token<"hsl_gray1", string, "colors", "gc">;
        hsl_gray2: _stitches_react_types_theme.Token<"hsl_gray2", string, "colors", "gc">;
        hsl_gray3: _stitches_react_types_theme.Token<"hsl_gray3", string, "colors", "gc">;
        hsl_gray4: _stitches_react_types_theme.Token<"hsl_gray4", string, "colors", "gc">;
        hsl_gray5: _stitches_react_types_theme.Token<"hsl_gray5", string, "colors", "gc">;
        hsl_gray6: _stitches_react_types_theme.Token<"hsl_gray6", string, "colors", "gc">;
        hsl_white: _stitches_react_types_theme.Token<"hsl_white", string, "colors", "gc">;
    };
    fonts: {
        serif: _stitches_react_types_theme.Token<"serif", string, "fonts", "gc">;
        sans: _stitches_react_types_theme.Token<"sans", string, "fonts", "gc">;
        mono: _stitches_react_types_theme.Token<"mono", string, "fonts", "gc">;
    };
    fontSizes: {
        extraSmall: _stitches_react_types_theme.Token<"extraSmall", string, "fontSizes", "gc">;
        footnote: _stitches_react_types_theme.Token<"footnote", string, "fontSizes", "gc">;
        caption2: _stitches_react_types_theme.Token<"caption2", string, "fontSizes", "gc">;
        caption1: _stitches_react_types_theme.Token<"caption1", string, "fontSizes", "gc">;
        body: _stitches_react_types_theme.Token<"body", string, "fontSizes", "gc">;
        large: _stitches_react_types_theme.Token<"large", string, "fontSizes", "gc">;
        subHeadline: _stitches_react_types_theme.Token<"subHeadline", string, "fontSizes", "gc">;
        headline: _stitches_react_types_theme.Token<"headline", string, "fontSizes", "gc">;
        title3: _stitches_react_types_theme.Token<"title3", string, "fontSizes", "gc">;
        title2: _stitches_react_types_theme.Token<"title2", string, "fontSizes", "gc">;
        title1: _stitches_react_types_theme.Token<"title1", string, "fontSizes", "gc">;
        largeTitle: _stitches_react_types_theme.Token<"largeTitle", string, "fontSizes", "gc">;
        extraLargeTitle: _stitches_react_types_theme.Token<"extraLargeTitle", string, "fontSizes", "gc">;
        root: _stitches_react_types_theme.Token<"root", string, "fontSizes", "gc">;
        1: _stitches_react_types_theme.Token<"1", string, "fontSizes", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "fontSizes", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "fontSizes", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "fontSizes", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "fontSizes", "gc">;
        6: _stitches_react_types_theme.Token<"6", string, "fontSizes", "gc">;
        7: _stitches_react_types_theme.Token<"7", string, "fontSizes", "gc">;
        8: _stitches_react_types_theme.Token<"8", string, "fontSizes", "gc">;
        9: _stitches_react_types_theme.Token<"9", string, "fontSizes", "gc">;
        10: _stitches_react_types_theme.Token<"10", string, "fontSizes", "gc">;
    };
    lineHeights: {
        1: _stitches_react_types_theme.Token<"1", string, "lineHeights", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "lineHeights", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "lineHeights", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "lineHeights", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "lineHeights", "gc">;
        6: _stitches_react_types_theme.Token<"6", string, "lineHeights", "gc">;
        7: _stitches_react_types_theme.Token<"7", string, "lineHeights", "gc">;
        8: _stitches_react_types_theme.Token<"8", string, "lineHeights", "gc">;
        9: _stitches_react_types_theme.Token<"9", string, "lineHeights", "gc">;
        10: _stitches_react_types_theme.Token<"10", string, "lineHeights", "gc">;
    };
    fontWeights: {
        light: _stitches_react_types_theme.Token<"light", string, "fontWeights", "gc">;
        regular: _stitches_react_types_theme.Token<"regular", string, "fontWeights", "gc">;
        medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "gc">;
        bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "gc">;
    };
    sizes: {
        1: _stitches_react_types_theme.Token<"1", string, "sizes", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "sizes", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "sizes", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "sizes", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "sizes", "gc">;
        6: _stitches_react_types_theme.Token<"6", string, "sizes", "gc">;
        7: _stitches_react_types_theme.Token<"7", string, "sizes", "gc">;
        8: _stitches_react_types_theme.Token<"8", string, "sizes", "gc">;
        9: _stitches_react_types_theme.Token<"9", string, "sizes", "gc">;
        10: _stitches_react_types_theme.Token<"10", string, "sizes", "gc">;
        11: _stitches_react_types_theme.Token<"11", string, "sizes", "gc">;
        12: _stitches_react_types_theme.Token<"12", string, "sizes", "gc">;
        13: _stitches_react_types_theme.Token<"13", string, "sizes", "gc">;
        14: _stitches_react_types_theme.Token<"14", string, "sizes", "gc">;
        15: _stitches_react_types_theme.Token<"15", string, "sizes", "gc">;
        16: _stitches_react_types_theme.Token<"16", string, "sizes", "gc">;
        17: _stitches_react_types_theme.Token<"17", string, "sizes", "gc">;
        18: _stitches_react_types_theme.Token<"18", string, "sizes", "gc">;
        19: _stitches_react_types_theme.Token<"19", string, "sizes", "gc">;
        20: _stitches_react_types_theme.Token<"20", string, "sizes", "gc">;
        buttonHeightSmall: _stitches_react_types_theme.Token<"buttonHeightSmall", string, "sizes", "gc">;
        buttonHeightRegular: _stitches_react_types_theme.Token<"buttonHeightRegular", string, "sizes", "gc">;
        buttonHeightLarge: _stitches_react_types_theme.Token<"buttonHeightLarge", string, "sizes", "gc">;
        controlHeightSmall: _stitches_react_types_theme.Token<"controlHeightSmall", string, "sizes", "gc">;
        controlHeightRegular: _stitches_react_types_theme.Token<"controlHeightRegular", string, "sizes", "gc">;
        controlHeightLarge: _stitches_react_types_theme.Token<"controlHeightLarge", string, "sizes", "gc">;
    };
    space: {
        1: _stitches_react_types_theme.Token<"1", string, "space", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "space", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "space", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "space", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "space", "gc">;
        6: _stitches_react_types_theme.Token<"6", string, "space", "gc">;
        7: _stitches_react_types_theme.Token<"7", string, "space", "gc">;
        8: _stitches_react_types_theme.Token<"8", string, "space", "gc">;
        9: _stitches_react_types_theme.Token<"9", string, "space", "gc">;
        10: _stitches_react_types_theme.Token<"10", string, "space", "gc">;
        11: _stitches_react_types_theme.Token<"11", string, "space", "gc">;
        12: _stitches_react_types_theme.Token<"12", string, "space", "gc">;
        13: _stitches_react_types_theme.Token<"13", string, "space", "gc">;
        14: _stitches_react_types_theme.Token<"14", string, "space", "gc">;
        15: _stitches_react_types_theme.Token<"15", string, "space", "gc">;
        16: _stitches_react_types_theme.Token<"16", string, "space", "gc">;
        17: _stitches_react_types_theme.Token<"17", string, "space", "gc">;
        18: _stitches_react_types_theme.Token<"18", string, "space", "gc">;
        19: _stitches_react_types_theme.Token<"19", string, "space", "gc">;
        20: _stitches_react_types_theme.Token<"20", string, "space", "gc">;
        small: _stitches_react_types_theme.Token<"small", string, "space", "gc">;
        medium: _stitches_react_types_theme.Token<"medium", string, "space", "gc">;
        large: _stitches_react_types_theme.Token<"large", string, "space", "gc">;
    };
    radii: {
        1: _stitches_react_types_theme.Token<"1", string, "radii", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "radii", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "radii", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "radii", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "radii", "gc">;
        6: _stitches_react_types_theme.Token<"6", string, "radii", "gc">;
        controlSmall: _stitches_react_types_theme.Token<"controlSmall", string, "radii", "gc">;
        controlRegular: _stitches_react_types_theme.Token<"controlRegular", string, "radii", "gc">;
        controlLarge: _stitches_react_types_theme.Token<"controlLarge", string, "radii", "gc">;
        round: _stitches_react_types_theme.Token<"round", string, "radii", "gc">;
    };
    shadows: {
        1: _stitches_react_types_theme.Token<"1", string, "shadows", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "shadows", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "shadows", "gc">;
        4: _stitches_react_types_theme.Token<"4", string, "shadows", "gc">;
        5: _stitches_react_types_theme.Token<"5", string, "shadows", "gc">;
    };
    transitions: {
        slow: _stitches_react_types_theme.Token<"slow", string, "transitions", "gc">;
        normal: _stitches_react_types_theme.Token<"normal", string, "transitions", "gc">;
        fast: _stitches_react_types_theme.Token<"fast", string, "transitions", "gc">;
        toast: _stitches_react_types_theme.Token<"toast", string, "transitions", "gc">;
    };
    borderWidths: {
        1: _stitches_react_types_theme.Token<"1", string, "borderWidths", "gc">;
        2: _stitches_react_types_theme.Token<"2", string, "borderWidths", "gc">;
        3: _stitches_react_types_theme.Token<"3", string, "borderWidths", "gc">;
    };
    zIndices: {
        focused: _stitches_react_types_theme.Token<"focused", string, "zIndices", "gc">;
        default: _stitches_react_types_theme.Token<"default", string, "zIndices", "gc">;
        positioner: _stitches_react_types_theme.Token<"positioner", string, "zIndices", "gc">;
        overlay: _stitches_react_types_theme.Token<"overlay", string, "zIndices", "gc">;
        toaster: _stitches_react_types_theme.Token<"toaster", string, "zIndices", "gc">;
    };
};
declare const keyframes: (style: {
    [offset: string]: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: PropertyValue<'margin'>) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: PropertyValue<'margin'>) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: PropertyValue<'padding'>) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: PropertyValue<'padding'>) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: PropertyValue<'width'>) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: PropertyValue<'minWidth'>) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: PropertyValue<'maxWidth'>) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            /**
             * Custom metrics to use in the capsize calculation
             * These should be added to the theme config dictionary
             */
            metrics?: keyof typeof capsizeFontConfig;
            /**
             * The desired font size in pixels
             */
            fontSize?: number;
            /**
             * The desired gap between lines of text in pixels
             * This is something different than line height and more similar to "grid-gap"
             */
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
}) => {
    (): string;
    name: string;
};
declare const getCssText: () => string;
declare const prefix: "gc";
declare const toString: () => string;
declare const createTheme: <Argument0 extends string | ({
    colors?: {
        primary?: string | number | boolean;
        secondary?: string | number | boolean;
        tertiary?: string | number | boolean;
        background?: string | number | boolean;
        secondaryBackground?: string | number | boolean;
        tertiaryBackground?: string | number | boolean;
        groupedBackground?: string | number | boolean;
        info?: string | number | boolean;
        overlay?: string | number | boolean;
        tooltip?: string | number | boolean;
        primaryTint?: string | number | boolean;
        secondaryTint?: string | number | boolean;
        tertiaryTint?: string | number | boolean;
        dangerTint?: string | number | boolean;
        successTint?: string | number | boolean;
        warningTint?: string | number | boolean;
        muted?: string | number | boolean;
        primarySplit?: string | number | boolean;
        secondarySplit?: string | number | boolean;
        tertiarySplit?: string | number | boolean;
        label?: string | number | boolean;
        secondaryLabel?: string | number | boolean;
        tertiaryLabel?: string | number | boolean;
        quartenaryLabel?: string | number | boolean;
        placeholderText?: string | number | boolean;
        disabled?: string | number | boolean;
        radio?: string | number | boolean;
        checkbox?: string | number | boolean;
        onPrimary?: string | number | boolean;
        onSecondary?: string | number | boolean;
        onTertiary?: string | number | boolean;
        focusStroke?: string | number | boolean;
        hsl_primary?: string | number | boolean;
        hsl_info?: string | number | boolean;
        hsl_secondary?: string | number | boolean;
        hsl_tertiary?: string | number | boolean;
        hsl_background?: string | number | boolean;
        hsl_secondaryBackground?: string | number | boolean;
        hsl_tertiaryBackground?: string | number | boolean;
        slate?: string | number | boolean;
        blue?: string | number | boolean;
        lightBlue?: string | number | boolean;
        navy?: string | number | boolean;
        steel?: string | number | boolean;
        jade?: string | number | boolean;
        green?: string | number | boolean;
        yellow?: string | number | boolean;
        coral?: string | number | boolean;
        cream?: string | number | boolean;
        red?: string | number | boolean;
        pink?: string | number | boolean;
        rose?: string | number | boolean;
        purple?: string | number | boolean;
        black?: string | number | boolean;
        gray1?: string | number | boolean;
        gray2?: string | number | boolean;
        gray3?: string | number | boolean;
        gray4?: string | number | boolean;
        gray5?: string | number | boolean;
        gray6?: string | number | boolean;
        white?: string | number | boolean;
        danger?: string | number | boolean;
        success?: string | number | boolean;
        warning?: string | number | boolean;
        hsl_danger?: string | number | boolean;
        hsl_success?: string | number | boolean;
        hsl_warning?: string | number | boolean;
        hsl_slate?: string | number | boolean;
        hsl_blue?: string | number | boolean;
        hsl_lightBlue?: string | number | boolean;
        hsl_navy?: string | number | boolean;
        hsl_steel?: string | number | boolean;
        hsl_jade?: string | number | boolean;
        hsl_green?: string | number | boolean;
        hsl_yellow?: string | number | boolean;
        hsl_coral?: string | number | boolean;
        hsl_cream?: string | number | boolean;
        hsl_red?: string | number | boolean;
        hsl_pink?: string | number | boolean;
        hsl_rose?: string | number | boolean;
        hsl_purple?: string | number | boolean;
        hsl_black?: string | number | boolean;
        hsl_gray1?: string | number | boolean;
        hsl_gray2?: string | number | boolean;
        hsl_gray3?: string | number | boolean;
        hsl_gray4?: string | number | boolean;
        hsl_gray5?: string | number | boolean;
        hsl_gray6?: string | number | boolean;
        hsl_white?: string | number | boolean;
    };
    fonts?: {
        serif?: string | number | boolean;
        sans?: string | number | boolean;
        mono?: string | number | boolean;
    };
    fontSizes?: {
        extraSmall?: string | number | boolean;
        footnote?: string | number | boolean;
        caption2?: string | number | boolean;
        caption1?: string | number | boolean;
        body?: string | number | boolean;
        large?: string | number | boolean;
        subHeadline?: string | number | boolean;
        headline?: string | number | boolean;
        title3?: string | number | boolean;
        title2?: string | number | boolean;
        title1?: string | number | boolean;
        largeTitle?: string | number | boolean;
        extraLargeTitle?: string | number | boolean;
        root?: string | number | boolean;
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
    };
    lineHeights?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
    };
    fontWeights?: {
        light?: string | number | boolean;
        regular?: string | number | boolean;
        medium?: string | number | boolean;
        bold?: string | number | boolean;
    };
    sizes?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        19?: string | number | boolean;
        20?: string | number | boolean;
        buttonHeightSmall?: string | number | boolean;
        buttonHeightRegular?: string | number | boolean;
        buttonHeightLarge?: string | number | boolean;
        controlHeightSmall?: string | number | boolean;
        controlHeightRegular?: string | number | boolean;
        controlHeightLarge?: string | number | boolean;
    };
    space?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        19?: string | number | boolean;
        20?: string | number | boolean;
        small?: string | number | boolean;
        medium?: string | number | boolean;
        large?: string | number | boolean;
    };
    radii?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        controlSmall?: string | number | boolean;
        controlRegular?: string | number | boolean;
        controlLarge?: string | number | boolean;
        round?: string | number | boolean;
    };
    shadows?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
    };
    transitions?: {
        slow?: string | number | boolean;
        normal?: string | number | boolean;
        fast?: string | number | boolean;
        toast?: string | number | boolean;
    };
    borderWidths?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
    };
    zIndices?: {
        focused?: string | number | boolean;
        default?: string | number | boolean;
        positioner?: string | number | boolean;
        overlay?: string | number | boolean;
        toaster?: string | number | boolean;
    };
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        primary?: string | number | boolean;
        secondary?: string | number | boolean;
        tertiary?: string | number | boolean;
        background?: string | number | boolean;
        secondaryBackground?: string | number | boolean;
        tertiaryBackground?: string | number | boolean;
        groupedBackground?: string | number | boolean;
        info?: string | number | boolean;
        overlay?: string | number | boolean;
        tooltip?: string | number | boolean;
        primaryTint?: string | number | boolean;
        secondaryTint?: string | number | boolean;
        tertiaryTint?: string | number | boolean;
        dangerTint?: string | number | boolean;
        successTint?: string | number | boolean;
        warningTint?: string | number | boolean;
        muted?: string | number | boolean;
        primarySplit?: string | number | boolean;
        secondarySplit?: string | number | boolean;
        tertiarySplit?: string | number | boolean;
        label?: string | number | boolean;
        secondaryLabel?: string | number | boolean;
        tertiaryLabel?: string | number | boolean;
        quartenaryLabel?: string | number | boolean;
        placeholderText?: string | number | boolean;
        disabled?: string | number | boolean;
        radio?: string | number | boolean;
        checkbox?: string | number | boolean;
        onPrimary?: string | number | boolean;
        onSecondary?: string | number | boolean;
        onTertiary?: string | number | boolean;
        focusStroke?: string | number | boolean;
        hsl_primary?: string | number | boolean;
        hsl_info?: string | number | boolean;
        hsl_secondary?: string | number | boolean;
        hsl_tertiary?: string | number | boolean;
        hsl_background?: string | number | boolean;
        hsl_secondaryBackground?: string | number | boolean;
        hsl_tertiaryBackground?: string | number | boolean;
        slate?: string | number | boolean;
        blue?: string | number | boolean;
        lightBlue?: string | number | boolean;
        navy?: string | number | boolean;
        steel?: string | number | boolean;
        jade?: string | number | boolean;
        green?: string | number | boolean;
        yellow?: string | number | boolean;
        coral?: string | number | boolean;
        cream?: string | number | boolean;
        red?: string | number | boolean;
        pink?: string | number | boolean;
        rose?: string | number | boolean;
        purple?: string | number | boolean;
        black?: string | number | boolean;
        gray1?: string | number | boolean;
        gray2?: string | number | boolean;
        gray3?: string | number | boolean;
        gray4?: string | number | boolean;
        gray5?: string | number | boolean;
        gray6?: string | number | boolean;
        white?: string | number | boolean;
        danger?: string | number | boolean;
        success?: string | number | boolean;
        warning?: string | number | boolean;
        hsl_danger?: string | number | boolean;
        hsl_success?: string | number | boolean;
        hsl_warning?: string | number | boolean;
        hsl_slate?: string | number | boolean;
        hsl_blue?: string | number | boolean;
        hsl_lightBlue?: string | number | boolean;
        hsl_navy?: string | number | boolean;
        hsl_steel?: string | number | boolean;
        hsl_jade?: string | number | boolean;
        hsl_green?: string | number | boolean;
        hsl_yellow?: string | number | boolean;
        hsl_coral?: string | number | boolean;
        hsl_cream?: string | number | boolean;
        hsl_red?: string | number | boolean;
        hsl_pink?: string | number | boolean;
        hsl_rose?: string | number | boolean;
        hsl_purple?: string | number | boolean;
        hsl_black?: string | number | boolean;
        hsl_gray1?: string | number | boolean;
        hsl_gray2?: string | number | boolean;
        hsl_gray3?: string | number | boolean;
        hsl_gray4?: string | number | boolean;
        hsl_gray5?: string | number | boolean;
        hsl_gray6?: string | number | boolean;
        hsl_white?: string | number | boolean;
    };
    fonts?: {
        serif?: string | number | boolean;
        sans?: string | number | boolean;
        mono?: string | number | boolean;
    };
    fontSizes?: {
        extraSmall?: string | number | boolean;
        footnote?: string | number | boolean;
        caption2?: string | number | boolean;
        caption1?: string | number | boolean;
        body?: string | number | boolean;
        large?: string | number | boolean;
        subHeadline?: string | number | boolean;
        headline?: string | number | boolean;
        title3?: string | number | boolean;
        title2?: string | number | boolean;
        title1?: string | number | boolean;
        largeTitle?: string | number | boolean;
        extraLargeTitle?: string | number | boolean;
        root?: string | number | boolean;
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
    };
    lineHeights?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
    };
    fontWeights?: {
        light?: string | number | boolean;
        regular?: string | number | boolean;
        medium?: string | number | boolean;
        bold?: string | number | boolean;
    };
    sizes?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        19?: string | number | boolean;
        20?: string | number | boolean;
        buttonHeightSmall?: string | number | boolean;
        buttonHeightRegular?: string | number | boolean;
        buttonHeightLarge?: string | number | boolean;
        controlHeightSmall?: string | number | boolean;
        controlHeightRegular?: string | number | boolean;
        controlHeightLarge?: string | number | boolean;
    };
    space?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        7?: string | number | boolean;
        8?: string | number | boolean;
        9?: string | number | boolean;
        10?: string | number | boolean;
        11?: string | number | boolean;
        12?: string | number | boolean;
        13?: string | number | boolean;
        14?: string | number | boolean;
        15?: string | number | boolean;
        16?: string | number | boolean;
        17?: string | number | boolean;
        18?: string | number | boolean;
        19?: string | number | boolean;
        20?: string | number | boolean;
        small?: string | number | boolean;
        medium?: string | number | boolean;
        large?: string | number | boolean;
    };
    radii?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
        6?: string | number | boolean;
        controlSmall?: string | number | boolean;
        controlRegular?: string | number | boolean;
        controlLarge?: string | number | boolean;
        round?: string | number | boolean;
    };
    shadows?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
        4?: string | number | boolean;
        5?: string | number | boolean;
    };
    transitions?: {
        slow?: string | number | boolean;
        normal?: string | number | boolean;
        fast?: string | number | boolean;
        toast?: string | number | boolean;
    };
    borderWidths?: {
        1?: string | number | boolean;
        2?: string | number | boolean;
        3?: string | number | boolean;
    };
    zIndices?: {
        focused?: string | number | boolean;
        default?: string | number | boolean;
        positioner?: string | number | boolean;
        overlay?: string | number | boolean;
        toaster?: string | number | boolean;
    };
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, "gc"> : _stitches_react_types_stitches.ThemeTokens<Argument0, "gc">);
/**
 * The starting values for z-indices.
 * @note These are just starting values and should be passed into a `StackingProvider` to ensure that later mounted elements are stacked on top
 */
declare enum StackingOrder {
    FOCUSED = 2,
    DEFAULT = 5,
    POSITIONER = 10,
    OVERLAY = 20,
    TOASTER = 30
}
declare const reset: {
    'html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, main, menu, nav, output, ruby, section, summary, time, mark, audio, video': {
        margin: string;
        padding: string;
        border: string;
        fontSize: string;
        font: string;
        verticalAlign: string;
    };
    'article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section': {
        display: string;
    };
    '*[hidden]': {
        display: string;
    };
    body: {
        lineHeight: string;
    };
    'ol, ul': {
        listStyle: string;
    };
    b: {
        fontWeight: string;
    };
    'blockquote, q': {
        quotes: string;
    };
    'blockquote:before, blockquote:after, q:before, q:after': {
        content: string;
    };
    table: {
        borderSpacing: string;
    };
};
declare const themeFonts: ({ basePath }: {
    basePath?: string;
}) => () => string;
/**
 * Call this at the top of your app. It sets some default styles globally and includes a minimal css reset
 */
declare const globalStyles: (disableReset?: boolean) => () => string;

declare const _Spacer: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type SpacerProps = {
    size?: CSS<typeof config>['size'];
} & ComponentProps<typeof _Spacer>;
declare const Spacer: FC<SpacerProps>;

declare const VStack: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    variants: {
        wrap: {
            true: {
                flexWrap: string;
            };
            false: {
                flexWrap: string;
            };
        };
        space: {
            none: {
                gap: string;
            };
            extraSmall: {
                gap: string;
            };
            small: {
                gap: string;
            };
            medium: {
                gap: string;
            };
            large: {
                gap: string;
            };
            extraLarge: {
                gap: string;
            };
        };
        orientation: {
            horizontal: {
                flexDirection: string;
            };
            vertical: {
                flexDirection: string;
            };
        };
    };
    defaultVariants: {
        space: "medium";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    flexDirection: string;
    variants: {
        reverse: {
            true: {
                flexDirection: string;
            };
        };
        justify: {
            start: {
                justifyContent: string;
            };
            stretch: {
                justifyContent: string;
            };
            between: {
                justifyContent: string;
            };
            around: {
                justifyContent: string;
            };
            evenly: {
                justifyContent: string;
            };
            center: {
                justifyContent: string;
            };
            end: {
                justifyContent: string;
            };
        };
        align: {
            start: {
                alignItems: string;
            };
            stretch: {
                alignItems: string;
            };
            center: {
                alignItems: string;
            };
            end: {
                alignItems: string;
            };
        };
    };
    defaultVariants: {
        align: "stretch";
        justify: "start";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const HStack: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    variants: {
        wrap: {
            true: {
                flexWrap: string;
            };
            false: {
                flexWrap: string;
            };
        };
        space: {
            none: {
                gap: string;
            };
            extraSmall: {
                gap: string;
            };
            small: {
                gap: string;
            };
            medium: {
                gap: string;
            };
            large: {
                gap: string;
            };
            extraLarge: {
                gap: string;
            };
        };
        orientation: {
            horizontal: {
                flexDirection: string;
            };
            vertical: {
                flexDirection: string;
            };
        };
    };
    defaultVariants: {
        space: "medium";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    flexDirection: string;
    variants: {
        reverse: {
            true: {
                flexDirection: string;
            };
        };
        align: {
            start: {
                alignItems: string;
            };
            center: {
                alignItems: string;
            };
            end: {
                alignItems: string;
            };
        };
        justify: {
            start: {
                justifyContent: string;
            };
            stretch: {
                justifyContent: string;
            };
            between: {
                justifyContent: string;
            };
            around: {
                justifyContent: string;
            };
            evenly: {
                justifyContent: string;
            };
            center: {
                justifyContent: string;
            };
            end: {
                justifyContent: string;
            };
        };
    };
    defaultVariants: {
        align: "start";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare const StackingContext: react.Context<number>;
declare type StackProps = {
    value: number;
    children: (value: number) => ReactNode;
};
declare const StackingProvider: FC<StackProps>;

declare const ImageUploadRoot: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    border: string;
    background: string;
    padding: string;
    display: string;
    justifyContent: string;
    alignItems: string;
    borderRadius: string;
    transition: string;
    userSelect: string;
    cursor: string;
    height: string;
    position: string;
    overflow: string;
    containerType: string;
    '&[disabled]': {
        cursor: string;
        color: string;
    };
    '.preview': {
        width: string;
        height: string;
        objectFit: string;
        borderRadius: string;
    };
    variants: {
        hasFiles: {
            true: {
                borderRadius: string;
                borderStyle: string;
                borderColor: string;
            };
        };
        dragState: {
            ACTIVE: {
                borderColor: string;
                backgroundColor: string;
                '.preview': {
                    opacity: number;
                };
            };
            ACCEPT: {
                borderColor: string;
                backgroundColor: string;
            };
            REJECT: {
                color: string;
                borderColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type ImageMetadata = {
    alt?: string;
};
declare type ImageUploadProps$1 = Omit<ComponentProps<typeof ImageUploadRoot>, 'onChange' | 'placeholder'> & Pick<DropzoneOptions, 'maxSize' | 'noDrag' | 'accept' | 'disabled' | 'onDrop'> & {
    /** Returns an array of files */
    onChange?: (files: File[]) => void;
    /** Set some files on component load */
    initialFiles?: File[];
    iconSize?: string;
    onFocusPositionChange?: (position: Position2D) => void;
    focusPosition?: Position2D;
    /** Props for the containing element */
    containerProps?: ComponentProps<typeof Box>;
    metadata?: ImageMetadata;
    onMetadataChange?: (metadata: ImageMetadata) => void;
    /** Allows editing of the image */
    allowEditing?: boolean;
    allowfocusEditing?: boolean;
    allowMetadataEditing?: boolean;
};

declare function ImageUpload({ maxSize, noDrag, disabled, accept, iconSize, initialFiles, onDrop, onChange, focusPosition, onFocusPositionChange, metadata, onMetadataChange, containerProps, css, allowEditing, allowfocusEditing, allowMetadataEditing, }: ImageUploadProps$1): JSX.Element;

declare function getColorFromHash(hashString: string): number;
declare const AvatarFactory: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AvatarProps = ComponentProps<typeof AvatarFactory> & Pick<ComponentProps<typeof Image>, 'src'> & {
    /**
     * This size corresponds somewhat to the theme scale
     */
    size?: keyof typeof theme['sizes'] | (number & {});
    /**
     * Used for initials and title
     * @since 1.0
     */
    name: string;
    /**
     * Override the hash value for the color.
     * @note Only for advanced usage
     * @since 1.0
     */
    hash?: string;
    /**
     * How many initials to use
     * @since 1.0
     * @default 2
     */
    initials?: 1 | 2;
};
declare const avatarColors: string[];
/**
 * The `Avatar` component is used to represent users. And should only be used for users.
 * @since 1.0
 * @author Evan Hennessy
 */
declare function Avatar({ name, color, hash, src, size, initials, ...props }: AvatarProps): JSX.Element;

declare type ImageUploadConfig = {
    upload: (file: File) => Promise<void>;
    load?: (id: string) => Promise<void>;
};
declare type ImageObject = {
    id?: string;
    url?: string;
    full?: string;
};
declare type ImageUploadProps = {
    avatarProps?: ComponentProps<typeof Avatar>;
    accept?: DropzoneOptions['accept'];
    disabled?: DropzoneOptions['disabled'];
    maxSize?: DropzoneOptions['maxSize'];
    config: ImageUploadConfig;
    image?: ImageObject;
    position?: Position2D;
    allowEditing?: boolean;
    loading?: boolean;
    allowReposition?: boolean;
    size?: number;
    onUpload?: () => void;
    onRemove?: (id: string) => void;
    onSave?: (props: {
        preview: string;
        position: Position2D;
        file: File;
    }) => void;
    onPositionChange?: ({}: {
        x: number;
        y: number;
    }) => void;
};
declare function AvatarEditor({ accept, disabled, maxSize, config, image, allowReposition, avatarProps, size, loading, onSave, onRemove, onUpload, onPositionChange, position, }: ImageUploadProps): JSX.Element;

/**
 * @private
 */
declare const ButtonFactory: _stitches_react_types_styled_component.StyledComponent<framer_motion.ForwardRefComponent<HTMLButtonElement, framer_motion.HTMLMotionProps<"button">>, _stitches_react_types_styled_component.StyledComponentProps<[{
    $$outlineColor: string;
    WebkitFontSmoothing: string;
    WebkitAppearance: string;
    textDecoration: string;
    border: string;
    outline: string;
    cursor: string;
    transition: string;
    borderRadius: string;
    fontFamily: string;
    fontWeight: string;
    userSelect: string;
    display: string;
    justifyContent: string;
    alignItems: string;
    width: string;
    '&::-moz-focus-inner': {
        border: number;
    };
    '&[disabled]': {
        pointerEvents: string;
    };
    a: {
        color: string;
    };
    variants: {
        color: {
            primary: {
                backgroundColor: string;
                color: string;
                '&:hover': {
                    color: string;
                };
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            secondary: {
                backgroundColor: string;
                color: string;
                '&:hover': {
                    color: string;
                };
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            tertiary: {
                backgroundColor: string;
                color: string;
                '&:hover': {
                    color: string;
                };
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        intent: {
            info: {};
            danger: {
                backgroundColor: string;
                color: string;
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            success: {
                backgroundColor: string;
                color: string;
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            warning: {
                backgroundColor: string;
                color: string;
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        size: {
            small: {
                height: string;
                paddingInline: string;
            };
            regular: {
                height: string;
                paddingInline: string;
            };
            large: {
                height: string;
                paddingInline: string;
            };
        };
        appearance: {
            outline: {
                backgroundColor: string;
                boxShadow: string;
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            minimal: {
                color: string;
                backgroundColor: string;
                '&:hover': {
                    backgroundColor: string;
                    color: string;
                };
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
            /**
             * For use overtop images and other complex background types
             */
            overlay: {
                color: string;
                backgroundColor: string;
                backdropFilter: string;
                '&:hover': {
                    color: string;
                    backgroundColor: string;
                };
                '&:active': {
                    boxShadow: string;
                };
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        round: {
            true: {
                borderRadius: string;
            };
        };
        icon: {
            true: {};
        };
        split: {
            true: {};
        };
        loading: {
            true: {
                pointerEvents: string;
                color: string;
                backgroundColor: string;
                backgroundImage: string;
                boxShadow: string;
                cursor: string;
                '> div': {
                    height: string;
                };
            };
        };
        isPressed: {
            true: {
                scale: number;
            };
        };
        isDisabled: {
            true: {
                color: string;
                backgroundColor: string;
                backgroundImage: string;
                boxShadow: string;
                cursor: string;
            };
        };
        /**
         * Makes the button full width and aligns center
         */
        wide: {
            true: {
                width: string;
            };
        };
        labelOffset: {
            true: {
                marginTop: string;
            };
        };
    };
    compoundVariants: ({
        appearance: string;
        color: string;
        css: {
            $$outlineColor: string;
            backgroundColor: string;
            color: string;
            '&:hover': {
                color: string;
                backgroundColor: string;
            };
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        intent?: undefined;
        isDisabled?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        appearance: string;
        color: string;
        css: {
            $$outlineColor: string;
            backgroundColor: string;
            color: string;
            outlineColor: string;
            '&:hover': {
                color: string;
                backgroundColor: string;
            };
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        intent?: undefined;
        isDisabled?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        appearance: string;
        intent: string;
        css: {
            $$outlineColor: string;
            color: string;
            backgroundColor: string;
            '&:hover': {
                color: string;
                backgroundColor: string;
            };
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        color?: undefined;
        isDisabled?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        appearance: string;
        isDisabled: true;
        css: {
            pointerEvents: string;
            color: string;
            backgroundImage: string;
            boxShadow: string;
            cursor: string;
            outlineColor: string;
            $$outlineColor?: undefined;
            backgroundColor?: undefined;
            '&:hover'?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        color?: undefined;
        intent?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        split: true;
        color: string;
        css: {
            backgroundColor: string;
            $$outlineColor?: undefined;
            color?: undefined;
            '&:hover'?: undefined;
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        appearance?: undefined;
        intent?: undefined;
        isDisabled?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        icon: true;
        size: string;
        css: {
            size: string;
            $$outlineColor?: undefined;
            backgroundColor?: undefined;
            color?: undefined;
            '&:hover'?: undefined;
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            '&, &:hover'?: undefined;
        };
        appearance?: undefined;
        color?: undefined;
        intent?: undefined;
        isDisabled?: undefined;
        split?: undefined;
    } | {
        appearance: string;
        color: string;
        css: {
            backgroundColor: string;
            '&, &:hover': {
                color: string;
            };
            $$outlineColor?: undefined;
            color?: undefined;
            '&:hover'?: undefined;
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
        };
        intent?: undefined;
        isDisabled?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    } | {
        appearance: string;
        intent: string;
        css: {
            backgroundColor: string;
            color: string;
            '&:hover': {
                color: string;
                backgroundColor?: undefined;
            };
            $$outlineColor?: undefined;
            outlineColor?: undefined;
            pointerEvents?: undefined;
            backgroundImage?: undefined;
            boxShadow?: undefined;
            cursor?: undefined;
            size?: undefined;
            '&, &:hover'?: undefined;
        };
        color?: undefined;
        isDisabled?: undefined;
        split?: undefined;
        icon?: undefined;
        size?: undefined;
    })[];
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type ButtonFactoryProps = Omit<ComponentProps<typeof ButtonFactory>, 'icon' | 'onClick'>;
declare type ButtonProps = ButtonFactoryProps & {
    /**
     * Sets a loading state on a button which disables and shows a spinner.
     * Useful for async operations.
     * @since 1.0
     */
    loading?: boolean;
    /** Force active state. */
    isPressed?: boolean;
    /**
     * Label used when button is in loading state
     * Set as false to keep text
     * @default 'Loading...'
     */
    loadingLabel?: string | boolean;
    /** @deprecated Use onPress instead */
    onClick?: (e: MouseEvent<HTMLButtonElement>) => void;
    onPress?: (e: MouseEvent<HTMLButtonElement>) => void;
    /** @deprecated will be removed in 1.0 */
    outline?: true;
    /**
     * Adds an icon before the `Button` content
     * @since 1.0
     */
    iconBefore?: ReactNode;
    /**
     * Adds an icon before the `Button` content
     * @since 1.0
     */
    iconAfter?: ReactNode;
    /**
     * Button content becomes this icon only.
     * If you want text, use `iconBefore` or `iconAfter`
     * @since 1.0
     */
    icon?: ReactNode;
    'aria-label'?: string;
};
declare type ButtonComponent = Polymorphic.ForwardRefComponent<typeof ButtonFactory, ButtonProps>;
/**
 * The `Button` component is the most common button component.
 * It contains a label and optional icons before or after the label.
 * @since 1.0
 * @author Evan Hennessy
 * @example ```
 * <Button color="primary">Click Me</Button>
 * ```
 */
declare const Button: ButtonComponent;

declare type SplitButtonProps = ButtonProps & {
    content?: ReactChild;
};
declare const SplitButton: react.ForwardRefExoticComponent<Pick<SplitButtonProps, "key" | "color" | "appearance" | "content" | "translate" | "outline" | "hidden" | "round" | "size" | "icon" | "disabled" | "split" | "css" | "prefix" | "form" | "slot" | "title" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDragCapture" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "value" | keyof framer_motion.MotionProps | "name" | "type" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "intent" | "loading" | "isPressed" | "isDisabled" | "wide" | "labelOffset" | "loadingLabel" | "onPress" | "iconBefore" | "iconAfter"> & react.RefAttributes<HTMLButtonElement>>;

declare const CheckboxLabel: _stitches_react_types_styled_component.StyledComponent<"label", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$checkboxSize: string;
    display: string;
    alignItems: string;
    cursor: string;
    position: string;
    userSelect: string;
    variants: {
        labelOffset: {
            true: {
                paddingTop: string;
            };
        };
        appearance: {
            default: {
                gap: string;
            };
            outline: {
                transition: string;
                padding: string;
                boxShadow: string;
                borderRadius: string;
                width: string;
                justifyContent: string;
                '&::after': {
                    content: string;
                    size: string;
                };
            };
        };
        isSelected: {
            true: {};
            false: {};
        };
    };
    compoundVariants: {
        isSelected: true;
        appearance: string;
        css: {
            boxShadow: string;
            span: {
                color: string;
            };
        };
    }[];
    defaultVariants: {
        appearance: "default";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type CheckboxLabelProps = Omit<VariantProps<typeof CheckboxLabel>, 'isSelected'>;
declare type AriaCheckboxProps = Parameters<typeof useCheckbox>[0];
declare const Checkbox: react.ForwardRefExoticComponent<Omit<_react_types_checkbox.AriaCheckboxProps, "isSelected" | "defaultSelected"> & CheckboxLabelProps & {
    label?: string;
    /**
     * State in addition to "checked" and "unchecked".
     * When true, the checkbox displays a "minus" icon.
     */
    indeterminate?: boolean;
    /**
     * When true, the aria-invalid attribute is true.
     * Used for accessibility.
     */
    invalid?: string | boolean;
    /**
     * When true, the checkbox is disabled.
     */
    disabled?: boolean;
    /**
     * When true, the checkbox is required.
     */
    required?: boolean;
    /**
     * Whether the element should be selected (uncontrolled).
     */
    defaultChecked?: AriaCheckboxProps['defaultSelected'];
    /**
     * Whether the element should be selected (controlled).
     */
    checked?: AriaCheckboxProps['isSelected'];
    /** Limits animation of checkbox.
     * This is also done automatically when the browser is in reduced motion.
     */
    reducedMotion?: boolean;
    css?: CSS<typeof config>;
} & react.RefAttributes<HTMLInputElement>>;

declare type SharedCollectionProps<T> = PropsWithChildren<T> & {
    as?: ReactNode;
    description?: ReactNode;
    helperText?: ReactNode;
    icon?: ReactNode;
    intent?: Intent;
    active?: boolean;
};
declare type DefaultItemProps<T> = ItemProps<T> & SharedCollectionProps<T> & {
    /** Render a menu item with an action */
    onAction?: (key: Key) => void;
};
declare type DefaultSectionProps<T> = SectionProps<T> & SharedCollectionProps<T>;

declare let _ActionItem: <T>(props: ItemProps<T> & T & {
    children?: react__default.ReactNode;
} & {
    as?: react__default.ReactNode;
    description?: react__default.ReactNode;
    helperText?: react__default.ReactNode;
    icon?: react__default.ReactNode;
    intent?: Intent;
    active?: boolean;
} & {
    onAction?: (key: react__default.Key) => void;
}) => JSX.Element;

declare const _Item: Polymorphic.ForwardRefComponent<"li", DefaultItemProps<{}>>;
declare const __Section: Polymorphic.ForwardRefComponent<"ul", DefaultSectionProps<{}>>;

declare type ListActionProps = {
    title: string;
    rendered?: ReactNode;
    onAction: () => void;
};

declare const TextInputFactory: _stitches_react_types_styled_component.StyledComponent<"input", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    width: string;
    padding: string;
    transition: string;
    '&::placeholder': {
        color: string;
    };
    '&[disabled]': {
        cursor: string;
    };
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        backgroundColor: string;
        boxShadow: string;
    };
    '&:disabled': {
        $$shadowColor: string;
        color: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        size: {
            small: {
                fontSize: string;
                padding: string;
                borderRadius: string;
                height: string;
            };
            regular: {
                fontSize: string;
                padding: string;
                height: string;
            };
            large: {
                fontSize: string;
                padding: string;
                height: string;
            };
        };
        valid: {
            true: {
                $$shadowColor: string;
                backgroundColor: string;
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        iconBefore: {
            true: {
                paddingLeft: string;
            };
        };
        iconAfter: {
            true: {
                paddingRight: string;
            };
        };
    };
    compoundVariants: {
        iconBefore: true;
        size: string;
        css: {
            paddingLeft: string;
        };
    }[];
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type TextInputProps = Omit<ComponentProps<typeof TextInputFactory>, 'iconBefore' | 'onChange'> & Omit<AriaTextFieldOptions<'input'>, 'onChange'> & FieldLabelAndDescriptionProps & ValidationMessageProps & {
    iconBefore?: JSX.Element | React.ReactNode;
    loading?: boolean;
    onChange?: (value: string, event?: ChangeEvent<HTMLInputElement>) => void;
};

declare const TextInput: react.ForwardRefExoticComponent<Pick<Omit<Omit<Pick<react.DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof InputHTMLAttributes<HTMLInputElement>> & {
    ref?: react.Ref<HTMLInputElement>;
}, "size" | "css" | "iconBefore" | "iconAfter" | "valid"> & _stitches_react_types_styled_component.TransformProps<_stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    width: string;
    padding: string;
    transition: string;
    '&::placeholder': {
        color: string;
    };
    '&[disabled]': {
        cursor: string;
    };
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        backgroundColor: string;
        boxShadow: string;
    };
    '&:disabled': {
        $$shadowColor: string;
        color: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        size: {
            small: {
                fontSize: string;
                padding: string;
                borderRadius: string;
                height: string;
            };
            regular: {
                fontSize: string;
                padding: string;
                height: string;
            };
            large: {
                fontSize: string;
                padding: string;
                height: string;
            };
        };
        valid: {
            true: {
                $$shadowColor: string;
                backgroundColor: string;
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        iconBefore: {
            true: {
                paddingLeft: string;
            };
        };
        iconAfter: {
            true: {
                paddingRight: string;
            };
        };
    };
    compoundVariants: {
        iconBefore: true;
        size: string;
        css: {
            paddingLeft: string;
        };
    }[];
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}> & {
    css?: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: {
            readonly [$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: {
            readonly [$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            metrics?: "Recoleta Alt" | "Modern Era";
            fontSize?: number;
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
}, "onChange" | "iconBefore"> & Omit<AriaTextFieldOptions<"input">, "onChange"> & FieldLabelAndDescriptionProps & ValidationMessageProps & {
    iconBefore?: JSX.Element | React.ReactNode;
    loading?: boolean;
    onChange?: (value: string, event?: ChangeEvent<HTMLInputElement>) => void;
}, "key" | "color" | "height" | "translate" | "width" | "hidden" | "size" | "style" | "disabled" | "css" | "prefix" | "form" | "slot" | "title" | "pattern" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "list" | "value" | "max" | "min" | "name" | "type" | "crossOrigin" | "step" | "multiple" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "loading" | "isDisabled" | "iconBefore" | "iconAfter" | "onFocusChange" | "autoComplete" | "maxLength" | "minLength" | "readOnly" | "required" | "src" | "alt" | "accept" | "capture" | "checked" | "enterKeyHint" | "inputElementType" | "isReadOnly" | "validationState" | "isRequired" | "excludeFromTabOrder" | "valid" | keyof ValidationMessageProps | keyof FieldLabelAndDescriptionProps> & react.RefAttributes<unknown>>;

/** @deprecated Use `TextInput` instead */
declare const TextInputField: react.ForwardRefExoticComponent<Pick<Omit<Omit<Pick<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof react.InputHTMLAttributes<HTMLInputElement>> & {
    ref?: react.Ref<HTMLInputElement>;
}, "size" | "css" | "iconBefore" | "iconAfter" | "valid"> & _stitches_react_types_styled_component.TransformProps<_stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    width: string;
    padding: string;
    transition: string;
    '&::placeholder': {
        color: string;
    };
    '&[disabled]': {
        cursor: string;
    };
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        backgroundColor: string;
        boxShadow: string;
    };
    '&:disabled': {
        $$shadowColor: string;
        color: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        size: {
            small: {
                fontSize: string;
                padding: string;
                borderRadius: string;
                height: string;
            };
            regular: {
                fontSize: string;
                padding: string;
                height: string;
            };
            large: {
                fontSize: string;
                padding: string;
                height: string;
            };
        };
        valid: {
            true: {
                $$shadowColor: string;
                backgroundColor: string;
                '&:focus': {
                    boxShadow: string;
                };
            };
        };
        iconBefore: {
            true: {
                paddingLeft: string;
            };
        };
        iconAfter: {
            true: {
                paddingRight: string;
            };
        };
    };
    compoundVariants: {
        iconBefore: true;
        size: string;
        css: {
            paddingLeft: string;
        };
    }[];
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}> & {
    css?: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: {
            readonly [$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: {
            readonly [$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            metrics?: "Recoleta Alt" | "Modern Era";
            fontSize?: number;
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
}, "onChange" | "iconBefore"> & Omit<_react_aria_textfield.AriaTextFieldOptions<"input">, "onChange"> & FieldLabelAndDescriptionProps & ValidationMessageProps & {
    iconBefore?: react.ReactNode | JSX.Element;
    loading?: boolean;
    onChange?: (value: string, event?: react.ChangeEvent<HTMLInputElement>) => void;
}, "key" | "color" | "height" | "translate" | "width" | "hidden" | "size" | "style" | "disabled" | "css" | "prefix" | "form" | "slot" | "title" | "pattern" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "list" | "value" | "max" | "min" | "name" | "type" | "crossOrigin" | "step" | "multiple" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "loading" | "isDisabled" | "iconBefore" | "iconAfter" | "onFocusChange" | "autoComplete" | "maxLength" | "minLength" | "readOnly" | "required" | "src" | "alt" | "accept" | "capture" | "checked" | "enterKeyHint" | "inputElementType" | "isReadOnly" | "validationState" | "isRequired" | "excludeFromTabOrder" | "valid" | keyof ValidationMessageProps | keyof FieldLabelAndDescriptionProps> & react.RefAttributes<unknown>>;

declare type ComboBoxProps<DataType> = Omit<AriaComboBoxOptions<DataType>, 'inputRef' | 'buttonRef' | 'listBoxRef' | 'popoverRef' | 'isDisabled' | 'isReadOnly' | 'isRequired'> & Partial<ComboBoxState<DataType>> & FieldLabelAndDescriptionProps & Pick<TextInputProps, 'iconBefore' | 'loading' | 'css' | 'size'> & {
    disabled?: AriaComboBoxOptions<DataType>['isDisabled'];
    required?: AriaComboBoxOptions<DataType>['isRequired'];
    readonly?: AriaComboBoxOptions<DataType>['isReadOnly'];
    /** Whether to highlight parts of matched text */
    showHighlight?: boolean;
    actionItem?: ListActionProps;
};
declare function ComboBox<DataType extends object>({ showHighlight, loading, actionItem, labelProps, css, ...props }: ComboBoxProps<DataType>): JSX.Element;

declare type DialogProps = Omit<OverlayProps, 'onHide' | 'onShow'> & {
    onOpen?: (close: () => void) => void;
    onCancel?: (close: () => void) => void;
    overlayProps?: ComponentProps<typeof Overlay>;
    sideOffset?: ComponentProps<typeof Card>['css']['marginInline'];
    topOffset?: ComponentProps<typeof Card>['css']['marginTop'];
    minHeightContent?: ComponentProps<typeof Card>['css']['minHeight'];
    contentContainerProps?: ComponentProps<typeof Box>;
    containerProps?: ComponentProps<typeof Card>;
    hasHeader?: boolean;
    hasClose?: boolean;
    hasCancel?: boolean;
    hasFooter?: boolean;
    loading?: boolean;
    disabled?: boolean;
    cancelLabel?: string;
    confirmLabel?: string;
    intent?: ButtonProps['intent'];
    onConfirm?: (close: () => void) => void;
    confirmIcon?: ReactNode;
    width?: ComponentProps<typeof Card>['css']['width'];
    /**
     * The title for the dialog
     * For accessibility reasons a title is always required even without a header
     */
    title: string;
} & Parameters<typeof useDialog>[0];
declare function Dialog({ onCancel, onOpen, onConfirm, isShown, shouldCloseOnClick, shouldCloseOnEscapePress, overlayProps, preventBodyScroll, width, minHeightContent, containerProps, sideOffset, topOffset, contentContainerProps, children, hasHeader, hasClose, hasCancel, hasFooter, cancelLabel, loading, disabled, confirmLabel, title, intent, containerCSS, confirmIcon: ConfirmIcon, ...props }: DialogProps): JSX.Element;
declare namespace Dialog {
    var defaultProps: {
        isShown: boolean;
        hasHeader: boolean;
        hasClose: boolean;
        hasFooter: boolean;
        hasCancel: boolean;
        width: string;
        topOffset: string;
        sideOffset: string;
        minHeightContent: string;
        confirmLabel: string;
        isConfirmLoading: boolean;
        isConfirmDisabled: boolean;
        cancelLabel: string;
        shouldCloseOnOverlayClick: boolean;
        shouldCloseOnEscapePress: boolean;
        preventBodyScrolling: boolean;
        overlayProps: {};
    };
}

declare type ConfirmDialogOptions = DialogProps & {
    /** Alias for children */
    message?: ReactChild;
    dialogProps?: Partial<DialogProps>;
    confirmButtonProps?: Partial<ButtonProps>;
    cancelButtonProps?: Partial<ButtonProps>;
};

declare function useConfirm(): (props: ConfirmDialogOptions) => Promise<void>;

declare enum CreditCardField {
    NUMBER = "cardNumber",
    NAME = "cardName",
    EXPIRY = "cardExpiry",
    CODE = "cardCode"
}
declare type UseValidationReturnType = {
    [CreditCardField.NUMBER]: ReturnType<typeof cardValidator.number>;
    [CreditCardField.EXPIRY]: ReturnType<typeof cardValidator.expirationDate>;
    [CreditCardField.CODE]: ReturnType<typeof cardValidator.cvv>;
    [CreditCardField.NAME]: ReturnType<typeof cardValidator.cardholderName>;
};
declare type CreditCardInputProps = {
    placeholders?: false | Record<CreditCardField, string>;
    names?: false | Record<CreditCardField, string>;
    labels?: Record<CreditCardField, string>;
    label?: string;
    id?: string;
    initialValues?: Partial<Record<CreditCardField, any>>;
    css?: any;
    onChange?: (obj: {
        values: Partial<Record<CreditCardField, string>>;
        meta: UseValidationReturnType;
        touched: Partial<Record<CreditCardField, boolean>>;
    }) => void;
};
declare type CreditCardChildFieldProps<T = string> = Pick<TextInputProps, 'invalid' | 'errorMessage' | 'css' | 'id' | 'name' | 'placeholder' | 'onBlur' | 'aria-label'> & {
    onChange?: (value: T) => void;
    value?: T;
    label?: string;
    validation?: UseValidationReturnType;
};

declare function CreditCardInput({ css, onChange, initialValues, ...props }: CreditCardInputProps): JSX.Element;

declare function FormikCreditCardNameField({ name, placeholder, ...props }: CreditCardChildFieldProps): JSX.Element;
declare function BaseCreditCardNameField(props: CreditCardChildFieldProps): JSX.Element;

declare function FormikCreditCardNumberField({ name, placeholder, ...props }: CreditCardChildFieldProps): JSX.Element;
declare function BaseCreditCardNumberField({ card, onChange, value, ...props }: CreditCardChildFieldProps & {
    card?: UseValidationReturnType['cardNumber']['card'];
}): JSX.Element;

declare function FormikCreditCardExpiryField({ name, placeholder, ...props }: CreditCardChildFieldProps<{
    month: string;
    year: string;
}>): JSX.Element;
declare function BaseCreditCardExpiryField({ value, onChange, ...props }: CreditCardChildFieldProps<{
    month: string;
    year: string;
}>): JSX.Element;

declare function FormikCreditCardCodeField({ name, placeholder, ...props }: CreditCardChildFieldProps<string>): JSX.Element;
declare function BaseCreditCardCodeField({ onChange, label, codeSize, placeholder, ...props }: CreditCardChildFieldProps<string> & {
    codeSize?: number;
}): JSX.Element;

declare type EmptyStateActionButtonProps = {
    title: string;
    onClick: () => void;
    to?: never;
    href?: never;
} | {
    title: string;
    to: ComponentProps<typeof Link$1>['to'];
    onClick?: never;
    href?: never;
} | {
    title: string;
    href: string;
    onClick?: never;
    to?: never;
};
declare type EmptyStateProps = ComponentProps<typeof Card> & {
    illustration?: ReactNode | false;
    intent?: ButtonProps['intent'];
    title?: string | number;
    /**
     * Optionally provide a custom description.
     * @default "This is where you'll be able to see your content."
     */
    description?: string;
    /**
     * Optionally provide a context for the default description.
     */
    descriptionContext?: string;
    /**
     * The action config for the empty state
     * The props used here will determine the button type,
     * - `to`: React Router Link,
     * - `href`: HTML Anchor
     * - `onClick`: Button
     */
    action?: EmptyStateActionButtonProps;
    /**
     * Common appearance options for the empty state
     * @default 'inline'
     */
    appearance?: 'inline' | 'card';
};
/**
 * A component that indicates an empty list or missing content
 * @author Alyssa Gutierrez
 * @author Evan Hennessy
 * @author April Nickel
 */
declare function EmptyState({ intent, illustration: Illustration, title, description, descriptionContext, action, appearance, ...props }: EmptyStateProps): JSX.Element;

declare const FileUploadRoot: _stitches_react_types_styled_component.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, _stitches_react_types_styled_component.StyledComponentProps<[{
    border: string;
    background: string;
    padding: string;
    display: string;
    justifyContent: string;
    alignItems: string;
    borderRadius: string;
    transition: string;
    userSelect: string;
    cursor: string;
    height: string;
    '&[disabled]': {
        cursor: string;
        color: string;
    };
    variants: {
        hasFiles: {
            true: {
                borderRadius: string;
                height: string;
                borderStyle: string;
            };
        };
        dragState: {
            ACTIVE: {
                borderColor: string;
                backgroundColor: string;
            };
            ACCEPT: {
                borderColor: string;
                backgroundColor: string;
            };
            REJECT: {
                color: string;
                borderColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type FileUploadProps = Omit<ComponentProps<typeof FileUploadRoot>, 'onChange'> & Pick<DropzoneOptions, 'maxSize' | 'noDrag' | 'accept' | 'disabled' | 'onDrop'> & {
    /** Returns an array of files */
    onChange?: (files: File[]) => void;
    /** Set some files on component load */
    initialFiles?: File[];
    iconSize?: string;
};
declare function FileUpload({ maxSize, noDrag, disabled, accept, iconSize, initialFiles, onDrop, onChange, }: FileUploadProps): JSX.Element;

interface FormikFieldProps {
    name?: string;
    type?: string;
}
/**
 * Helps setting `useField` on ElephantKit components as well as adds some other field helpers
 * @private Implementation details are subject to change
 */
declare function useFormikHelper<T extends FormikFieldProps>(props: T): [
    FieldInputProps<T> & {
        disabled: boolean;
        focused: boolean;
        onFocus: FocusEventHandler;
    },
    FieldMetaProps<T> & {
        submitCount: number;
    },
    FieldHelperProps<any>
];

/**
 * A helper for submitting with formik forms.
 * @author Evan Hennessy
 * @since 1.39.0
 */
declare function FormikSubmitButton(props: ComponentProps<typeof Button>): JSX.Element;

/**
 * A helper for using `TextInput` with formik forms.
 * Automatically sets errors and assigns `onChange` and `values` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikTextField(props: ComponentProps<typeof TextInput>): JSX.Element;

/**
 * A helper for using `Checkbox` with formik forms.
 * Automatically sets errors and assigns `onChange` and `checked` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikCheckboxField(props: ComponentProps<typeof Checkbox>): JSX.Element;

declare type SegmentedControlOption = {
    label: string;
    value: string;
    disabled?: boolean;
};
declare type SegmentedControlProps = {
    /** Control options */
    options: SegmentedControlOption[];
    children?: never;
    size?: VariantProps<typeof ControlOptionFactory>['controlSize'];
    disabled?: Parameters<typeof useRadioGroup$1>[0]['isDisabled'];
    readonly?: Parameters<typeof useRadioGroup$1>[0]['isReadOnly'];
    required?: Parameters<typeof useRadioGroup$1>[0]['isRequired'];
} & Omit<Parameters<typeof useRadioGroup$1>[0], 'isDisabled' | 'isRequired' | 'isReadonly'> & FieldLabelAndDescriptionProps & Parameters<typeof useRadioGroupState>[0];
declare const ControlOptionFactory: _stitches_react_types_styled_component.StyledComponent<"label", _stitches_react_types_styled_component.StyledComponentProps<[{
    border: string;
    backgroundColor: string;
    paddingInline: string;
    borderRadius: string;
    display: string;
    alignItems: string;
    justifyContent: string;
    userSelect: string;
    position: string;
    cursor: string;
    '&, label, span, div': {
        fontWeight: string;
        whiteSpace: string;
    };
    '&:hover': {
        backgroundColor: string;
    };
    variants: {
        focusVisible: {
            true: {
                boxShadow: string;
            };
        };
        isDisabled: {
            true: {
                backgroundColor: string;
                color: string;
                cursor: string;
            };
        };
        controlSize: {
            small: {
                height: string;
                paddingInline: string;
                svg: {
                    display: string;
                };
            };
            regular: {
                height: string;
                paddingInline: string;
                svg: {
                    size: number;
                };
            };
            large: {
                height: string;
                paddingInline: string;
                svg: {
                    size: number;
                };
            };
        };
        isSelected: {
            true: {
                borderColor: string;
                borderWidth: string;
                backgroundColor: string;
                color: string;
                position: string;
                zIndex: string;
                width: string;
                height: string;
                cursor: string;
                '&:hover': {
                    backgroundColor: string;
                };
            };
        };
    };
    defaultVariants: {
        controlSize: "regular";
    };
    compoundVariants: {
        isDisabled: true;
        isSelected: true;
        css: {
            borderColor: string;
            backgroundColor: string;
            color: string;
            cursor: string;
            pointerEvents: string;
        };
    }[];
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare function SegmentedControl(props: SegmentedControlProps): JSX.Element;
declare namespace SegmentedControl {
    var defaultProps: {
        size: string;
    };
}

/**
 * A helper for using `SegmentedControl` with formik forms.
 * Automatically sets errors and assigns `onChange` and `value` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikSegementedControl(props: ComponentProps<typeof SegmentedControl>): JSX.Element;

declare type FocusContext = {
    focus: string;
    handleFocus: (e: FocusEvent) => void;
    handleBlur: (e: FocusEvent) => void;
    setFocus: (name: string) => void;
    focusNext: () => void;
    focusPrevious: () => void;
};

declare type FormikBaseFormProps = Pick<React.FormHTMLAttributes<HTMLFormElement>, Exclude<keyof React.FormHTMLAttributes<HTMLFormElement>, 'onReset' | 'onSubmit'>>;
/**
 * A helper for using `Form` with formik forms.
 * Allows you to set theme styling on the form
 */
declare const FormikForm: react.ForwardRefExoticComponent<FormikBaseFormProps & {
    initialFocus?: string;
    children: ReactNode | ((props: FocusContext) => ReactNode);
} & react.RefAttributes<HTMLFormElement>>;

declare const SelectFactory: _stitches_react_types_styled_component.StyledComponent<"select", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    cursor: string;
    display: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    fontSize: string;
    width: string;
    minWidth: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    paddingLeft: string;
    paddingRight: string;
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        boxShadow: string;
    };
    '&[disabled]': {
        cursor: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        size: {
            small: {
                borderRadius: string;
                padding: string;
                height: string;
                fontSize: string;
            };
            regular: {
                padding: string;
                height: string;
                fontSize: string;
            };
            large: {
                padding: string;
                height: string;
            };
        };
        placeholder: {
            true: {
                color: string;
            };
            false: {};
        };
    };
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type SelectProps = Omit<ComponentProps<typeof SelectFactory>, 'placeholder'> & {
    /** Provide a helpful message for why the input is invalid */
    validationMessage?: string;
    /** The aria invalid attribute */
    invalid?: AriaAttributes['aria-invalid'];
    /** An optional placeholder */
    placeholder?: string;
};
/**
 * A simple select field that includes theme styling
 */
declare const Select: react.ForwardRefExoticComponent<Pick<SelectProps, "key" | "color" | "translate" | "hidden" | "size" | "style" | "disabled" | "css" | "prefix" | "form" | "slot" | "title" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "value" | "name" | "invalid" | "multiple" | "autoFocus" | "autoComplete" | "required" | "validationMessage"> & react.RefAttributes<HTMLSelectElement>>;

declare type SelectFieldProps = TextInputProps & ComponentProps<typeof Select> & FieldLabelAndDescriptionProps & ValidationMessageProps & {};
declare function SelectField(props: SelectFieldProps): JSX.Element;
declare namespace SelectField {
    var defaultProps: {
        disabled: boolean;
        invalid: boolean;
        size: string;
    };
}

declare const MultiSelectFactory: _stitches_react_types_styled_component.StyledComponent<"select", _stitches_react_types_styled_component.StyledComponentProps<[{
    cursor: string;
    display: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    fontSize: string;
    width: string;
    minWidth: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    paddingLeft: string;
    paddingRight: string;
    '&:focus': {
        outline: string;
        boxShadow: string;
        option: {
            '&:checked': {
                background: string;
            };
        };
    };
    '&[disabled]': {
        cursor: string;
        backgroundColor: string;
    };
    option: {
        whiteSpace: string;
        textOverflow: string;
        overflow: string;
        width: string;
        marginTop: string;
        borderRadius: string;
        padding: string;
        '&:checked': {
            background: string;
        };
    };
    variants: {
        size: {
            small: {
                borderRadius: string;
                padding: string;
            };
            regular: {
                padding: string;
                fontSize: string;
            };
            large: {
                padding: string;
            };
        };
    };
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type MultiSelectProps = ComponentProps<typeof MultiSelectFactory> & {
    /** Provide a helpful message for why the input is invalid */
    validationMessage?: string;
    /** The aria invalid attribute */
    invalid?: AriaAttributes['aria-invalid'];
    label?: string;
};
/**
 * A simple select field that includes theme styling
 */
declare function MultiSelect(props: MultiSelectProps): JSX.Element;
declare namespace MultiSelect {
    var defaultProps: {
        disabled: boolean;
        invalid: boolean;
    };
}

/**
 * A helper for using `Select` with formik forms.
 * Automatically sets errors and assigns `onChange` and `values` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikSelectField(props: ComponentProps<typeof SelectField>): JSX.Element;

declare const TextAreaFactory: _stitches_react_types_styled_component.StyledComponent<typeof TextAreaAutosize, _stitches_react_types_styled_component.StyledComponentProps<[{
    $$shadowColor: string;
    WebkitAppearance: string;
    MozAppearance: string;
    border: string;
    boxShadow: string;
    borderRadius: string;
    color: string;
    backgroundColor: string;
    width: string;
    padding: string;
    transition: string;
    fontFamily: string;
    lineHeight: string;
    '&::placeholder': {
        color: string;
    };
    '&[disabled]': {
        cursor: string;
    };
    '&:focus': {
        $$shadowColor: string;
        outline: string;
        backgroundColor: string;
        boxShadow: string;
    };
    '&:disabled': {
        $$shadowColor: string;
        color: string;
        backgroundColor: string;
    };
    '&:invalid': {
        $$shadowColor: string;
        backgroundColor: string;
        '&::placeholder': {
            color: string;
        };
        '&:focus': {
            boxShadow: string;
        };
    };
    variants: {
        resize: {
            true: {
                resize: string;
            };
            false: {
                resize: string;
            };
        };
        size: {
            regular: {
                fontSize: string;
                padding: string;
            };
            large: {
                fontSize: string;
                padding: string;
                borderRadius: string;
                height: string;
            };
        };
    };
    defaultVariants: {
        resize: false;
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AriaTextFieldProps = Parameters<typeof useTextField$1>[0];
declare type TextAreaProps = Omit<AriaTextFieldProps, 'isRequired' | 'isDisabled'> & ComponentProps<typeof TextAreaFactory> & FieldLabelAndDescriptionProps & ValidationMessageProps & {
    required?: AriaTextFieldProps['isRequired'];
    disabled?: AriaTextFieldProps['isDisabled'];
    /** Set the maximum number of lines to grow to before scrolling. */
    maxRows?: number;
    /** Set the minimum number of lines to shrink to before scrolling. */
    minRows?: number;
    /** Hide the word count when maxLength is set. */
    hideWordCount?: boolean;
};
declare const TextArea: react.ForwardRefExoticComponent<Pick<TextAreaProps, "key" | "color" | "content" | "height" | "resize" | "translate" | "width" | "start" | "hidden" | "size" | "style" | "default" | "wrap" | "open" | "muted" | "disabled" | "sizes" | "css" | "prefix" | "cite" | "data" | "form" | "slot" | "span" | "summary" | "title" | "pattern" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "list" | "as" | "value" | "max" | "media" | "method" | "min" | "name" | "target" | "type" | "crossOrigin" | "href" | "step" | "multiple" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "onFocusChange" | "download" | "hrefLang" | "rel" | "classID" | "useMap" | "wmode" | "high" | "low" | "optimum" | "autoComplete" | "cols" | "maxLength" | "minLength" | "readOnly" | "required" | "rows" | "nonce" | "scoped" | "cellPadding" | "cellSpacing" | "src" | "htmlFor" | "integrity" | "charSet" | "alt" | "coords" | "shape" | "autoPlay" | "controls" | "loop" | "mediaGroup" | "playsInline" | "preload" | "dateTime" | "acceptCharset" | "action" | "encType" | "noValidate" | "manifest" | "allowFullScreen" | "allowTransparency" | "frameBorder" | "marginHeight" | "marginWidth" | "sandbox" | "scrolling" | "seamless" | "srcDoc" | "srcSet" | "async" | "accept" | "capture" | "checked" | "challenge" | "keyType" | "keyParams" | "httpEquiv" | "reversed" | "selected" | "defer" | "colSpan" | "headers" | "rowSpan" | "scope" | "kind" | "srcLang" | "poster" | "inputElementType" | "isReadOnly" | "validationState" | "excludeFromTabOrder" | keyof ValidationMessageProps | keyof FieldLabelAndDescriptionProps | "inputRef" | "onHeightChange" | "useCacheForDOMMeasurements" | "minRows" | "maxRows" | "hideWordCount"> & react.RefAttributes<HTMLTextAreaElement>>;

/**
 * A helper for using `TextArea` with formik forms.
 * Automatically sets errors and assigns `onChange` and `value` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikTextArea(props: ComponentProps<typeof TextArea>): JSX.Element;

/**
 * A helper for using `TextInputField` with formik forms.
 * Automatically sets errors and assigns `onChange` and `values` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikNumberField(props: ComponentProps<typeof NumberInput>): JSX.Element;

/**
 * A helper for using `AmountSelector` with formik forms.
 * Automatically sets errors and assigns `onChange` and `value` based on the field name
 *
 * @throws if not used in a Formik Context
 */
declare function FormikAmountSelector(props: ComponentProps<typeof AmountSelector>): JSX.Element;

declare const IconFactory: _stitches_react_types_styled_component.StyledComponent<"svg", _stitches_react_types_styled_component.StyledComponentProps<[{
    fill: string;
    strokeColor: string;
    variants: {
        multicolored: {
            false: {
                path: {
                    fill: string;
                };
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type IconProps = Omit<ComponentProps<typeof IconFactory>, 'multicolored'> & {
    /** The size of the icon */
    size?: string;
    /** Whether to use the multicolored versio
     * You can also pass custom colors (including theme tokens) as an array
     */
    multicolored?: boolean | (keyof typeof theme['colors'] | (string & {}))[];
};
declare function Icon({ name, children, multicolored, css: passthroughCSS, size, ...props }: IconProps): JSX.Element;

declare function AddCircleIcon(props: IconProps): JSX.Element;
declare namespace AddCircleIcon {
    var toString: () => string;
}

declare function AddSmallIcon(props: IconProps): JSX.Element;
declare namespace AddSmallIcon {
    var toString: () => string;
}

declare function AddIcon(props: IconProps): JSX.Element;
declare namespace AddIcon {
    var toString: () => string;
}

declare function AlarmBellCheckIcon(props: IconProps): JSX.Element;
declare namespace AlarmBellCheckIcon {
    var toString: () => string;
}

declare function AlarmBellDisableIcon(props: IconProps): JSX.Element;
declare namespace AlarmBellDisableIcon {
    var toString: () => string;
}

declare function AlarmBellOffIcon(props: IconProps): JSX.Element;
declare namespace AlarmBellOffIcon {
    var toString: () => string;
}

declare function AlarmBellIcon(props: IconProps): JSX.Element;
declare namespace AlarmBellIcon {
    var toString: () => string;
}

declare function AlertCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace AlertCircleBoldIcon {
    var toString: () => string;
}

declare function AlertCircleIcon(props: IconProps): JSX.Element;
declare namespace AlertCircleIcon {
    var toString: () => string;
}

declare function AlertDiamondIcon(props: IconProps): JSX.Element;
declare namespace AlertDiamondIcon {
    var toString: () => string;
}

declare function AlertTriangleBoldIcon(props: IconProps): JSX.Element;
declare namespace AlertTriangleBoldIcon {
    var toString: () => string;
}

declare function AlertTriangleIcon(props: IconProps): JSX.Element;
declare namespace AlertTriangleIcon {
    var toString: () => string;
}

declare function AlignBottomIcon(props: IconProps): JSX.Element;
declare namespace AlignBottomIcon {
    var toString: () => string;
}

declare function AlignCenterIcon(props: IconProps): JSX.Element;
declare namespace AlignCenterIcon {
    var toString: () => string;
}

declare function AlignLeftIcon(props: IconProps): JSX.Element;
declare namespace AlignLeftIcon {
    var toString: () => string;
}

declare function AlignMiddleIcon(props: IconProps): JSX.Element;
declare namespace AlignMiddleIcon {
    var toString: () => string;
}

declare function AlignRightIcon(props: IconProps): JSX.Element;
declare namespace AlignRightIcon {
    var toString: () => string;
}

declare function AlignTopIcon(props: IconProps): JSX.Element;
declare namespace AlignTopIcon {
    var toString: () => string;
}

declare function AnalyticsBarsIcon(props: IconProps): JSX.Element;
declare namespace AnalyticsBarsIcon {
    var toString: () => string;
}

declare function AnalyticsBoardIcon(props: IconProps): JSX.Element;
declare namespace AnalyticsBoardIcon {
    var toString: () => string;
}

declare function AngelHeadIcon(props: IconProps): JSX.Element;
declare namespace AngelHeadIcon {
    var toString: () => string;
}

declare function AngelIcon(props: IconProps): JSX.Element;
declare namespace AngelIcon {
    var toString: () => string;
}

declare function AngleBracketsIcon(props: IconProps): JSX.Element;
declare namespace AngleBracketsIcon {
    var toString: () => string;
}

declare function AppStoreIcon(props: IconProps): JSX.Element;
declare namespace AppStoreIcon {
    var toString: () => string;
}

declare function AppWindowError404Icon(props: IconProps): JSX.Element;
declare namespace AppWindowError404Icon {
    var toString: () => string;
}

declare function AppleIcon(props: IconProps): JSX.Element;
declare namespace AppleIcon {
    var toString: () => string;
}

declare function ArchiveIcon(props: IconProps): JSX.Element;
declare namespace ArchiveIcon {
    var toString: () => string;
}

declare function ArrowDownIcon(props: IconProps): JSX.Element;
declare namespace ArrowDownIcon {
    var toString: () => string;
}

declare function ArrowLeftEndIcon(props: IconProps): JSX.Element;
declare namespace ArrowLeftEndIcon {
    var toString: () => string;
}

declare function ArrowLeftIcon(props: IconProps): JSX.Element;
declare namespace ArrowLeftIcon {
    var toString: () => string;
}

declare function ArrowRightEndIcon(props: IconProps): JSX.Element;
declare namespace ArrowRightEndIcon {
    var toString: () => string;
}

declare function ArrowRightIcon(props: IconProps): JSX.Element;
declare namespace ArrowRightIcon {
    var toString: () => string;
}

declare function ArrowUpIcon(props: IconProps): JSX.Element;
declare namespace ArrowUpIcon {
    var toString: () => string;
}

declare function AtIcon(props: IconProps): JSX.Element;
declare namespace AtIcon {
    var toString: () => string;
}

declare function AttachmentIcon(props: IconProps): JSX.Element;
declare namespace AttachmentIcon {
    var toString: () => string;
}

declare function BabyHeartIcon(props: IconProps): JSX.Element;
declare namespace BabyHeartIcon {
    var toString: () => string;
}

declare function BabyWaterIcon(props: IconProps): JSX.Element;
declare namespace BabyWaterIcon {
    var toString: () => string;
}

declare function BabyIcon(props: IconProps): JSX.Element;
declare namespace BabyIcon {
    var toString: () => string;
}

declare function BatteryChargeIcon(props: IconProps): JSX.Element;
declare namespace BatteryChargeIcon {
    var toString: () => string;
}

declare function BibleIcon(props: IconProps): JSX.Element;
declare namespace BibleIcon {
    var toString: () => string;
}

declare function BirthdayIcon(props: IconProps): JSX.Element;
declare namespace BirthdayIcon {
    var toString: () => string;
}

declare function BishopIcon(props: IconProps): JSX.Element;
declare namespace BishopIcon {
    var toString: () => string;
}

declare function BluetoothIcon(props: IconProps): JSX.Element;
declare namespace BluetoothIcon {
    var toString: () => string;
}

declare function BoatIcon(props: IconProps): JSX.Element;
declare namespace BoatIcon {
    var toString: () => string;
}

declare function BookOpenIcon(props: IconProps): JSX.Element;
declare namespace BookOpenIcon {
    var toString: () => string;
}

declare function BookIcon(props: IconProps): JSX.Element;
declare namespace BookIcon {
    var toString: () => string;
}

declare function BookmarkIcon(props: IconProps): JSX.Element;
declare namespace BookmarkIcon {
    var toString: () => string;
}

declare function BrideGroomIcon(props: IconProps): JSX.Element;
declare namespace BrideGroomIcon {
    var toString: () => string;
}

declare function ButtonFastForwardIcon(props: IconProps): JSX.Element;
declare namespace ButtonFastForwardIcon {
    var toString: () => string;
}

declare function ButtonNextIcon(props: IconProps): JSX.Element;
declare namespace ButtonNextIcon {
    var toString: () => string;
}

declare function ButtonPauseIcon(props: IconProps): JSX.Element;
declare namespace ButtonPauseIcon {
    var toString: () => string;
}

declare function ButtonPlayIcon(props: IconProps): JSX.Element;
declare namespace ButtonPlayIcon {
    var toString: () => string;
}

declare function ButtonPreviousIcon(props: IconProps): JSX.Element;
declare namespace ButtonPreviousIcon {
    var toString: () => string;
}

declare function ButtonRewindIcon(props: IconProps): JSX.Element;
declare namespace ButtonRewindIcon {
    var toString: () => string;
}

declare function ButtonStopIcon(props: IconProps): JSX.Element;
declare namespace ButtonStopIcon {
    var toString: () => string;
}

declare function CalendarAddIcon(props: IconProps): JSX.Element;
declare namespace CalendarAddIcon {
    var toString: () => string;
}

declare function CalendarBlockIcon(props: IconProps): JSX.Element;
declare namespace CalendarBlockIcon {
    var toString: () => string;
}

declare function CalendarBoldIcon(props: IconProps): JSX.Element;
declare namespace CalendarBoldIcon {
    var toString: () => string;
}

declare function CalendarCheckIcon(props: IconProps): JSX.Element;
declare namespace CalendarCheckIcon {
    var toString: () => string;
}

declare function CalendarDisableIcon(props: IconProps): JSX.Element;
declare namespace CalendarDisableIcon {
    var toString: () => string;
}

declare function CalendarRefreshIcon(props: IconProps): JSX.Element;
declare namespace CalendarRefreshIcon {
    var toString: () => string;
}

declare function CalendarRemoveIcon(props: IconProps): JSX.Element;
declare namespace CalendarRemoveIcon {
    var toString: () => string;
}

declare function CalendarIcon(props: IconProps): JSX.Element;
declare namespace CalendarIcon {
    var toString: () => string;
}

declare function CameraCircleIcon(props: IconProps): JSX.Element;
declare namespace CameraCircleIcon {
    var toString: () => string;
}

declare function CameraIcon(props: IconProps): JSX.Element;
declare namespace CameraIcon {
    var toString: () => string;
}

declare function CandleIcon(props: IconProps): JSX.Element;
declare namespace CandleIcon {
    var toString: () => string;
}

declare function CapsIcon(props: IconProps): JSX.Element;
declare namespace CapsIcon {
    var toString: () => string;
}

declare function CathedralDoubleIcon(props: IconProps): JSX.Element;
declare namespace CathedralDoubleIcon {
    var toString: () => string;
}

declare function CathedralSingleIcon(props: IconProps): JSX.Element;
declare namespace CathedralSingleIcon {
    var toString: () => string;
}

declare function CdIcon(props: IconProps): JSX.Element;
declare namespace CdIcon {
    var toString: () => string;
}

declare function CelticKnotIcon(props: IconProps): JSX.Element;
declare namespace CelticKnotIcon {
    var toString: () => string;
}

declare function CheckBadgeIcon(props: IconProps): JSX.Element;
declare namespace CheckBadgeIcon {
    var toString: () => string;
}

declare function CheckBoldIcon(props: IconProps): JSX.Element;
declare namespace CheckBoldIcon {
    var toString: () => string;
}

declare function CheckCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace CheckCircleBoldIcon {
    var toString: () => string;
}

declare function CheckCircleIcon(props: IconProps): JSX.Element;
declare namespace CheckCircleIcon {
    var toString: () => string;
}

declare function CheckDoubleIcon(props: IconProps): JSX.Element;
declare namespace CheckDoubleIcon {
    var toString: () => string;
}

declare function CheckIcon(props: IconProps): JSX.Element;
declare namespace CheckIcon {
    var toString: () => string;
}

declare function ChevronDoubleLeftIcon(props: IconProps): JSX.Element;
declare namespace ChevronDoubleLeftIcon {
    var toString: () => string;
}

declare function ChevronDoubleRightIcon(props: IconProps): JSX.Element;
declare namespace ChevronDoubleRightIcon {
    var toString: () => string;
}

declare function ChevronDownIcon(props: IconProps): JSX.Element;
declare namespace ChevronDownIcon {
    var toString: () => string;
}

declare function ChevronLeftIcon(props: IconProps): JSX.Element;
declare namespace ChevronLeftIcon {
    var toString: () => string;
}

declare function ChevronRightIcon(props: IconProps): JSX.Element;
declare namespace ChevronRightIcon {
    var toString: () => string;
}

declare function ChevronUpIcon(props: IconProps): JSX.Element;
declare namespace ChevronUpIcon {
    var toString: () => string;
}

declare function ChristRedeemerIcon(props: IconProps): JSX.Element;
declare namespace ChristRedeemerIcon {
    var toString: () => string;
}

declare function ChristianFishIcon(props: IconProps): JSX.Element;
declare namespace ChristianFishIcon {
    var toString: () => string;
}

declare function ChristmasBellsIcon(props: IconProps): JSX.Element;
declare namespace ChristmasBellsIcon {
    var toString: () => string;
}

declare function ChurchIcon(props: IconProps): JSX.Element;
declare namespace ChurchIcon {
    var toString: () => string;
}

declare function CloseQuoteIcon(props: IconProps): JSX.Element;
declare namespace CloseQuoteIcon {
    var toString: () => string;
}

declare function CloseIcon(props: IconProps): JSX.Element;
declare namespace CloseIcon {
    var toString: () => string;
}

declare function CloudOffIcon(props: IconProps): JSX.Element;
declare namespace CloudOffIcon {
    var toString: () => string;
}

declare function CloudQuestionIcon(props: IconProps): JSX.Element;
declare namespace CloudQuestionIcon {
    var toString: () => string;
}

declare function CloudWarningIcon(props: IconProps): JSX.Element;
declare namespace CloudWarningIcon {
    var toString: () => string;
}

declare function CloudIcon(props: IconProps): JSX.Element;
declare namespace CloudIcon {
    var toString: () => string;
}

declare function CloverIcon(props: IconProps): JSX.Element;
declare namespace CloverIcon {
    var toString: () => string;
}

declare function CoffinIcon(props: IconProps): JSX.Element;
declare namespace CoffinIcon {
    var toString: () => string;
}

declare function CogApprovedIcon(props: IconProps): JSX.Element;
declare namespace CogApprovedIcon {
    var toString: () => string;
}

declare function CogIcon(props: IconProps): JSX.Element;
declare namespace CogIcon {
    var toString: () => string;
}

declare function ColorPaletteIcon(props: IconProps): JSX.Element;
declare namespace ColorPaletteIcon {
    var toString: () => string;
}

declare function ConstructionSignIcon(props: IconProps): JSX.Element;
declare namespace ConstructionSignIcon {
    var toString: () => string;
}

declare function ConversationIcon(props: IconProps): JSX.Element;
declare namespace ConversationIcon {
    var toString: () => string;
}

declare function CopyPasteIcon(props: IconProps): JSX.Element;
declare namespace CopyPasteIcon {
    var toString: () => string;
}

declare function CoupleHandsIcon(props: IconProps): JSX.Element;
declare namespace CoupleHandsIcon {
    var toString: () => string;
}

declare function CoupleIcon(props: IconProps): JSX.Element;
declare namespace CoupleIcon {
    var toString: () => string;
}

declare function CreditCardAmexIcon(props: IconProps): JSX.Element;
declare namespace CreditCardAmexIcon {
    var toString: () => string;
}

declare function CreditCardDiscoverIcon(props: IconProps): JSX.Element;
declare namespace CreditCardDiscoverIcon {
    var toString: () => string;
}

declare function CreditCardMastercardIcon(props: IconProps): JSX.Element;
declare namespace CreditCardMastercardIcon {
    var toString: () => string;
}

declare function CreditCardVisaIcon(props: IconProps): JSX.Element;
declare namespace CreditCardVisaIcon {
    var toString: () => string;
}

declare function CreditCardIcon(props: IconProps): JSX.Element;
declare namespace CreditCardIcon {
    var toString: () => string;
}

declare function CrossDiamondIcon(props: IconProps): JSX.Element;
declare namespace CrossDiamondIcon {
    var toString: () => string;
}

declare function CrossGiveIcon(props: IconProps): JSX.Element;
declare namespace CrossGiveIcon {
    var toString: () => string;
}

declare function CrossHandsIcon(props: IconProps): JSX.Element;
declare namespace CrossHandsIcon {
    var toString: () => string;
}

declare function CrossNecklaceIcon(props: IconProps): JSX.Element;
declare namespace CrossNecklaceIcon {
    var toString: () => string;
}

declare function CrossShineIcon(props: IconProps): JSX.Element;
declare namespace CrossShineIcon {
    var toString: () => string;
}

declare function CrossStandIcon(props: IconProps): JSX.Element;
declare namespace CrossStandIcon {
    var toString: () => string;
}

declare function CrosshairIcon(props: IconProps): JSX.Element;
declare namespace CrosshairIcon {
    var toString: () => string;
}

declare function DashboardIcon(props: IconProps): JSX.Element;
declare namespace DashboardIcon {
    var toString: () => string;
}

declare function DataTransferHorizontalIcon(props: IconProps): JSX.Element;
declare namespace DataTransferHorizontalIcon {
    var toString: () => string;
}

declare function DataTransferVerticalIcon(props: IconProps): JSX.Element;
declare namespace DataTransferVerticalIcon {
    var toString: () => string;
}

declare function DatabaseCheckIcon(props: IconProps): JSX.Element;
declare namespace DatabaseCheckIcon {
    var toString: () => string;
}

declare function DatabaseClockIcon(props: IconProps): JSX.Element;
declare namespace DatabaseClockIcon {
    var toString: () => string;
}

declare function DatabaseDisableIcon(props: IconProps): JSX.Element;
declare namespace DatabaseDisableIcon {
    var toString: () => string;
}

declare function DatabaseDownloadIcon(props: IconProps): JSX.Element;
declare namespace DatabaseDownloadIcon {
    var toString: () => string;
}

declare function DatabaseKeyIcon(props: IconProps): JSX.Element;
declare namespace DatabaseKeyIcon {
    var toString: () => string;
}

declare function DatabaseSyncIcon(props: IconProps): JSX.Element;
declare namespace DatabaseSyncIcon {
    var toString: () => string;
}

declare function DatabaseWarningIcon(props: IconProps): JSX.Element;
declare namespace DatabaseWarningIcon {
    var toString: () => string;
}

declare function DeleteIcon(props: IconProps): JSX.Element;
declare namespace DeleteIcon {
    var toString: () => string;
}

declare function DiamondIcon(props: IconProps): JSX.Element;
declare namespace DiamondIcon {
    var toString: () => string;
}

declare function DisableIcon(props: IconProps): JSX.Element;
declare namespace DisableIcon {
    var toString: () => string;
}

declare function DislikeIcon(props: IconProps): JSX.Element;
declare namespace DislikeIcon {
    var toString: () => string;
}

declare function DownloadCircleIcon(props: IconProps): JSX.Element;
declare namespace DownloadCircleIcon {
    var toString: () => string;
}

declare function DownloadSquareIcon(props: IconProps): JSX.Element;
declare namespace DownloadSquareIcon {
    var toString: () => string;
}

declare function EasterEggIcon(props: IconProps): JSX.Element;
declare namespace EasterEggIcon {
    var toString: () => string;
}

declare function EditIcon(props: IconProps): JSX.Element;
declare namespace EditIcon {
    var toString: () => string;
}

declare function EmailAddIcon(props: IconProps): JSX.Element;
declare namespace EmailAddIcon {
    var toString: () => string;
}

declare function EmailCheckIcon(props: IconProps): JSX.Element;
declare namespace EmailCheckIcon {
    var toString: () => string;
}

declare function EmailCircleIcon(props: IconProps): JSX.Element;
declare namespace EmailCircleIcon {
    var toString: () => string;
}

declare function EmailRemoveIcon(props: IconProps): JSX.Element;
declare namespace EmailRemoveIcon {
    var toString: () => string;
}

declare function EmailIcon(props: IconProps): JSX.Element;
declare namespace EmailIcon {
    var toString: () => string;
}

declare function EnvelopeIcon(props: IconProps): JSX.Element;
declare namespace EnvelopeIcon {
    var toString: () => string;
}

declare function ExpandIcon(props: IconProps): JSX.Element;
declare namespace ExpandIcon {
    var toString: () => string;
}

declare function ExternalLinkIcon(props: IconProps): JSX.Element;
declare namespace ExternalLinkIcon {
    var toString: () => string;
}

declare function FacebookIcon(props: IconProps): JSX.Element;
declare namespace FacebookIcon {
    var toString: () => string;
}

declare function FamilyHeadsIcon(props: IconProps): JSX.Element;
declare namespace FamilyHeadsIcon {
    var toString: () => string;
}

declare function FamilyIcon(props: IconProps): JSX.Element;
declare namespace FamilyIcon {
    var toString: () => string;
}

declare function FeatherIcon(props: IconProps): JSX.Element;
declare namespace FeatherIcon {
    var toString: () => string;
}

declare function FileAddIcon(props: IconProps): JSX.Element;
declare namespace FileAddIcon {
    var toString: () => string;
}

declare function FileEditIcon(props: IconProps): JSX.Element;
declare namespace FileEditIcon {
    var toString: () => string;
}

declare function FilterIcon(props: IconProps): JSX.Element;
declare namespace FilterIcon {
    var toString: () => string;
}

declare function FlagIcon(props: IconProps): JSX.Element;
declare namespace FlagIcon {
    var toString: () => string;
}

declare function FlashOffIcon(props: IconProps): JSX.Element;
declare namespace FlashOffIcon {
    var toString: () => string;
}

declare function FlashIcon(props: IconProps): JSX.Element;
declare namespace FlashIcon {
    var toString: () => string;
}

declare function FloppyDiskIcon(props: IconProps): JSX.Element;
declare namespace FloppyDiskIcon {
    var toString: () => string;
}

declare function FontSizeIcon(props: IconProps): JSX.Element;
declare namespace FontSizeIcon {
    var toString: () => string;
}

declare function GenericEmptyIcon(props: IconProps): JSX.Element;
declare namespace GenericEmptyIcon {
    var toString: () => string;
}

declare function GestureTapSwipeDownIcon(props: IconProps): JSX.Element;
declare namespace GestureTapSwipeDownIcon {
    var toString: () => string;
}

declare function GestureTapSwipeLeftIcon(props: IconProps): JSX.Element;
declare namespace GestureTapSwipeLeftIcon {
    var toString: () => string;
}

declare function GestureTapSwipeRightIcon(props: IconProps): JSX.Element;
declare namespace GestureTapSwipeRightIcon {
    var toString: () => string;
}

declare function GestureTapSwipeUpIcon(props: IconProps): JSX.Element;
declare namespace GestureTapSwipeUpIcon {
    var toString: () => string;
}

declare function GiftIcon(props: IconProps): JSX.Element;
declare namespace GiftIcon {
    var toString: () => string;
}

declare function GiveIcon(props: IconProps): JSX.Element;
declare namespace GiveIcon {
    var toString: () => string;
}

declare function GivingIcon(props: IconProps): JSX.Element;
declare namespace GivingIcon {
    var toString: () => string;
}

declare function GraphStatsCircleIcon(props: IconProps): JSX.Element;
declare namespace GraphStatsCircleIcon {
    var toString: () => string;
}

declare function GraphStatsIcon(props: IconProps): JSX.Element;
declare namespace GraphStatsIcon {
    var toString: () => string;
}

declare function GridFourIcon(props: IconProps): JSX.Element;
declare namespace GridFourIcon {
    var toString: () => string;
}

declare function GridNineIcon(props: IconProps): JSX.Element;
declare namespace GridNineIcon {
    var toString: () => string;
}

declare function HamburgerIcon(props: IconProps): JSX.Element;
declare namespace HamburgerIcon {
    var toString: () => string;
}

declare function HammerWrenchIcon(props: IconProps): JSX.Element;
declare namespace HammerWrenchIcon {
    var toString: () => string;
}

declare function HandshakeCircleIcon(props: IconProps): JSX.Element;
declare namespace HandshakeCircleIcon {
    var toString: () => string;
}

declare function HandshakeIcon(props: IconProps): JSX.Element;
declare namespace HandshakeIcon {
    var toString: () => string;
}

declare function HashIcon(props: IconProps): JSX.Element;
declare namespace HashIcon {
    var toString: () => string;
}

declare function HeadphonesIcon(props: IconProps): JSX.Element;
declare namespace HeadphonesIcon {
    var toString: () => string;
}

declare function HelpCalloutIcon(props: IconProps): JSX.Element;
declare namespace HelpCalloutIcon {
    var toString: () => string;
}

declare function HomeBoldIcon(props: IconProps): JSX.Element;
declare namespace HomeBoldIcon {
    var toString: () => string;
}

declare function HomeIcon(props: IconProps): JSX.Element;
declare namespace HomeIcon {
    var toString: () => string;
}

declare function HyperlinkIcon(props: IconProps): JSX.Element;
declare namespace HyperlinkIcon {
    var toString: () => string;
}

declare function ImageAddIcon(props: IconProps): JSX.Element;
declare namespace ImageAddIcon {
    var toString: () => string;
}

declare function IndentDecreaseIcon(props: IconProps): JSX.Element;
declare namespace IndentDecreaseIcon {
    var toString: () => string;
}

declare function IndentIncreaseIcon(props: IconProps): JSX.Element;
declare namespace IndentIncreaseIcon {
    var toString: () => string;
}

declare function InformationCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace InformationCircleBoldIcon {
    var toString: () => string;
}

declare function InformationCircleIcon(props: IconProps): JSX.Element;
declare namespace InformationCircleIcon {
    var toString: () => string;
}

declare function InstagramIcon(props: IconProps): JSX.Element;
declare namespace InstagramIcon {
    var toString: () => string;
}

declare function InvoiceMailIcon(props: IconProps): JSX.Element;
declare namespace InvoiceMailIcon {
    var toString: () => string;
}

declare function KeyIcon(props: IconProps): JSX.Element;
declare namespace KeyIcon {
    var toString: () => string;
}

declare function KeyboardAltIcon(props: IconProps): JSX.Element;
declare namespace KeyboardAltIcon {
    var toString: () => string;
}

declare function KeyboardAsteriskIcon(props: IconProps): JSX.Element;
declare namespace KeyboardAsteriskIcon {
    var toString: () => string;
}

declare function KeyboardCommandIcon(props: IconProps): JSX.Element;
declare namespace KeyboardCommandIcon {
    var toString: () => string;
}

declare function KeyboardDeleteIcon(props: IconProps): JSX.Element;
declare namespace KeyboardDeleteIcon {
    var toString: () => string;
}

declare function KeyboardOptionIcon(props: IconProps): JSX.Element;
declare namespace KeyboardOptionIcon {
    var toString: () => string;
}

declare function KeyboardShiftIcon(props: IconProps): JSX.Element;
declare namespace KeyboardShiftIcon {
    var toString: () => string;
}

declare function KeyboardIcon(props: IconProps): JSX.Element;
declare namespace KeyboardIcon {
    var toString: () => string;
}

declare function KneelingIcon(props: IconProps): JSX.Element;
declare namespace KneelingIcon {
    var toString: () => string;
}

declare function LayoutArrayIcon(props: IconProps): JSX.Element;
declare namespace LayoutArrayIcon {
    var toString: () => string;
}

declare function LayoutIcon(props: IconProps): JSX.Element;
declare namespace LayoutIcon {
    var toString: () => string;
}

declare function LegalCertificateIcon(props: IconProps): JSX.Element;
declare namespace LegalCertificateIcon {
    var toString: () => string;
}

declare function LegalScaleIcon(props: IconProps): JSX.Element;
declare namespace LegalScaleIcon {
    var toString: () => string;
}

declare function LightBulbIcon(props: IconProps): JSX.Element;
declare namespace LightBulbIcon {
    var toString: () => string;
}

declare function LikeCircleIcon(props: IconProps): JSX.Element;
declare namespace LikeCircleIcon {
    var toString: () => string;
}

declare function LikeRibbonIcon(props: IconProps): JSX.Element;
declare namespace LikeRibbonIcon {
    var toString: () => string;
}

declare function LikeIcon(props: IconProps): JSX.Element;
declare namespace LikeIcon {
    var toString: () => string;
}

declare function LinkBrokenIcon(props: IconProps): JSX.Element;
declare namespace LinkBrokenIcon {
    var toString: () => string;
}

declare function ListAddIcon(props: IconProps): JSX.Element;
declare namespace ListAddIcon {
    var toString: () => string;
}

declare function ListBulletsIcon(props: IconProps): JSX.Element;
declare namespace ListBulletsIcon {
    var toString: () => string;
}

declare function ListNumbersIcon(props: IconProps): JSX.Element;
declare namespace ListNumbersIcon {
    var toString: () => string;
}

declare function ListRemoveIcon(props: IconProps): JSX.Element;
declare namespace ListRemoveIcon {
    var toString: () => string;
}

declare function LocationChurchIcon(props: IconProps): JSX.Element;
declare namespace LocationChurchIcon {
    var toString: () => string;
}

declare function LocationCircleIcon(props: IconProps): JSX.Element;
declare namespace LocationCircleIcon {
    var toString: () => string;
}

declare function LocationPinIcon(props: IconProps): JSX.Element;
declare namespace LocationPinIcon {
    var toString: () => string;
}

declare function LocationIcon(props: IconProps): JSX.Element;
declare namespace LocationIcon {
    var toString: () => string;
}

declare function LockIcon(props: IconProps): JSX.Element;
declare namespace LockIcon {
    var toString: () => string;
}

declare function LoginIcon(props: IconProps): JSX.Element;
declare namespace LoginIcon {
    var toString: () => string;
}

declare function LogoutIcon(props: IconProps): JSX.Element;
declare namespace LogoutIcon {
    var toString: () => string;
}

declare function LoveBoldIcon(props: IconProps): JSX.Element;
declare namespace LoveBoldIcon {
    var toString: () => string;
}

declare function LoveIcon(props: IconProps): JSX.Element;
declare namespace LoveIcon {
    var toString: () => string;
}

declare function MapsPinIcon(props: IconProps): JSX.Element;
declare namespace MapsPinIcon {
    var toString: () => string;
}

declare function MapsIcon(props: IconProps): JSX.Element;
declare namespace MapsIcon {
    var toString: () => string;
}

declare function MegaphoneBadgeIcon(props: IconProps): JSX.Element;
declare namespace MegaphoneBadgeIcon {
    var toString: () => string;
}

declare function MessagesAddIcon(props: IconProps): JSX.Element;
declare namespace MessagesAddIcon {
    var toString: () => string;
}

declare function MessagesBubbleIcon(props: IconProps): JSX.Element;
declare namespace MessagesBubbleIcon {
    var toString: () => string;
}

declare function MessagesCheckIcon(props: IconProps): JSX.Element;
declare namespace MessagesCheckIcon {
    var toString: () => string;
}

declare function MessagesDisableIcon(props: IconProps): JSX.Element;
declare namespace MessagesDisableIcon {
    var toString: () => string;
}

declare function MessagesSubtractIcon(props: IconProps): JSX.Element;
declare namespace MessagesSubtractIcon {
    var toString: () => string;
}

declare function MicrophoneIcon(props: IconProps): JSX.Element;
declare namespace MicrophoneIcon {
    var toString: () => string;
}

declare function MicrosoftIcon(props: IconProps): JSX.Element;
declare namespace MicrosoftIcon {
    var toString: () => string;
}

declare function ModeDarkIcon(props: IconProps): JSX.Element;
declare namespace ModeDarkIcon {
    var toString: () => string;
}

declare function ModeLightIcon(props: IconProps): JSX.Element;
declare namespace ModeLightIcon {
    var toString: () => string;
}

declare function MoreCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace MoreCircleBoldIcon {
    var toString: () => string;
}

declare function MoreHorizontalBoldIcon(props: IconProps): JSX.Element;
declare namespace MoreHorizontalBoldIcon {
    var toString: () => string;
}

declare function MoreHorizontalIcon(props: IconProps): JSX.Element;
declare namespace MoreHorizontalIcon {
    var toString: () => string;
}

declare function MoreVerticalBoldIcon(props: IconProps): JSX.Element;
declare namespace MoreVerticalBoldIcon {
    var toString: () => string;
}

declare function MoreVerticalIcon(props: IconProps): JSX.Element;
declare namespace MoreVerticalIcon {
    var toString: () => string;
}

declare function MouseIcon(props: IconProps): JSX.Element;
declare namespace MouseIcon {
    var toString: () => string;
}

declare function MoveDownIcon(props: IconProps): JSX.Element;
declare namespace MoveDownIcon {
    var toString: () => string;
}

declare function MoveLeftIcon(props: IconProps): JSX.Element;
declare namespace MoveLeftIcon {
    var toString: () => string;
}

declare function MoveRightIcon(props: IconProps): JSX.Element;
declare namespace MoveRightIcon {
    var toString: () => string;
}

declare function MoveUpIcon(props: IconProps): JSX.Element;
declare namespace MoveUpIcon {
    var toString: () => string;
}

declare function MultipleUsersBodyIcon(props: IconProps): JSX.Element;
declare namespace MultipleUsersBodyIcon {
    var toString: () => string;
}

declare function NavigationDownCircleIcon(props: IconProps): JSX.Element;
declare namespace NavigationDownCircleIcon {
    var toString: () => string;
}

declare function NavigationLeftCircleIcon(props: IconProps): JSX.Element;
declare namespace NavigationLeftCircleIcon {
    var toString: () => string;
}

declare function NavigationRightCircleIcon(props: IconProps): JSX.Element;
declare namespace NavigationRightCircleIcon {
    var toString: () => string;
}

declare function NavigationUpCircleIcon(props: IconProps): JSX.Element;
declare namespace NavigationUpCircleIcon {
    var toString: () => string;
}

declare function NetworkLiveIcon(props: IconProps): JSX.Element;
declare namespace NetworkLiveIcon {
    var toString: () => string;
}

declare function NetworkWarningIcon(props: IconProps): JSX.Element;
declare namespace NetworkWarningIcon {
    var toString: () => string;
}

declare function NetworkWwwIcon(props: IconProps): JSX.Element;
declare namespace NetworkWwwIcon {
    var toString: () => string;
}

declare function NewspaperBoldIcon(props: IconProps): JSX.Element;
declare namespace NewspaperBoldIcon {
    var toString: () => string;
}

declare function NewspaperFoldBoldIcon(props: IconProps): JSX.Element;
declare namespace NewspaperFoldBoldIcon {
    var toString: () => string;
}

declare function NewspaperFoldIcon(props: IconProps): JSX.Element;
declare namespace NewspaperFoldIcon {
    var toString: () => string;
}

declare function NewspaperIcon(props: IconProps): JSX.Element;
declare namespace NewspaperIcon {
    var toString: () => string;
}

declare function OpenIdIcon(props: IconProps): JSX.Element;
declare namespace OpenIdIcon {
    var toString: () => string;
}

declare function OpenQuoteIcon(props: IconProps): JSX.Element;
declare namespace OpenQuoteIcon {
    var toString: () => string;
}

declare function ParagraphIcon(props: IconProps): JSX.Element;
declare namespace ParagraphIcon {
    var toString: () => string;
}

declare function PasswordLockIcon(props: IconProps): JSX.Element;
declare namespace PasswordLockIcon {
    var toString: () => string;
}

declare function PaypalIcon(props: IconProps): JSX.Element;
declare namespace PaypalIcon {
    var toString: () => string;
}

declare function PdfFileIcon(props: IconProps): JSX.Element;
declare namespace PdfFileIcon {
    var toString: () => string;
}

declare function PencilCircleIcon(props: IconProps): JSX.Element;
declare namespace PencilCircleIcon {
    var toString: () => string;
}

declare function PencilIcon(props: IconProps): JSX.Element;
declare namespace PencilIcon {
    var toString: () => string;
}

declare function PeopleIcon(props: IconProps): JSX.Element;
declare namespace PeopleIcon {
    var toString: () => string;
}

declare function PhoneAddIcon(props: IconProps): JSX.Element;
declare namespace PhoneAddIcon {
    var toString: () => string;
}

declare function PhoneBookIcon(props: IconProps): JSX.Element;
declare namespace PhoneBookIcon {
    var toString: () => string;
}

declare function PhoneSubtractIcon(props: IconProps): JSX.Element;
declare namespace PhoneSubtractIcon {
    var toString: () => string;
}

declare function PhoneIcon(props: IconProps): JSX.Element;
declare namespace PhoneIcon {
    var toString: () => string;
}

declare function PictureFlowerIcon(props: IconProps): JSX.Element;
declare namespace PictureFlowerIcon {
    var toString: () => string;
}

declare function PictureLandscapeIcon(props: IconProps): JSX.Element;
declare namespace PictureLandscapeIcon {
    var toString: () => string;
}

declare function PictureStackIcon(props: IconProps): JSX.Element;
declare namespace PictureStackIcon {
    var toString: () => string;
}

declare function PinChurchIcon(props: IconProps): JSX.Element;
declare namespace PinChurchIcon {
    var toString: () => string;
}

declare function PinIcon(props: IconProps): JSX.Element;
declare namespace PinIcon {
    var toString: () => string;
}

declare function PlayStoreIcon(props: IconProps): JSX.Element;
declare namespace PlayStoreIcon {
    var toString: () => string;
}

declare function PodcastIcon(props: IconProps): JSX.Element;
declare namespace PodcastIcon {
    var toString: () => string;
}

declare function PrinterIcon(props: IconProps): JSX.Element;
declare namespace PrinterIcon {
    var toString: () => string;
}

declare function ProgrammingFlagIcon(props: IconProps): JSX.Element;
declare namespace ProgrammingFlagIcon {
    var toString: () => string;
}

declare function QrCodeIcon(props: IconProps): JSX.Element;
declare namespace QrCodeIcon {
    var toString: () => string;
}

declare function QuestionCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace QuestionCircleBoldIcon {
    var toString: () => string;
}

declare function QuestionCircleIcon(props: IconProps): JSX.Element;
declare namespace QuestionCircleIcon {
    var toString: () => string;
}

declare function ReceiptIcon(props: IconProps): JSX.Element;
declare namespace ReceiptIcon {
    var toString: () => string;
}

declare function RedoIcon(props: IconProps): JSX.Element;
declare namespace RedoIcon {
    var toString: () => string;
}

declare function RemoveCircleIcon(props: IconProps): JSX.Element;
declare namespace RemoveCircleIcon {
    var toString: () => string;
}

declare function RemoveSmallIcon(props: IconProps): JSX.Element;
declare namespace RemoveSmallIcon {
    var toString: () => string;
}

declare function ResizeExpandIcon(props: IconProps): JSX.Element;
declare namespace ResizeExpandIcon {
    var toString: () => string;
}

declare function ResizeShrinkIcon(props: IconProps): JSX.Element;
declare namespace ResizeShrinkIcon {
    var toString: () => string;
}

declare function RocketIcon(props: IconProps): JSX.Element;
declare namespace RocketIcon {
    var toString: () => string;
}

declare function RotateBackIcon(props: IconProps): JSX.Element;
declare namespace RotateBackIcon {
    var toString: () => string;
}

declare function RotateForwardIcon(props: IconProps): JSX.Element;
declare namespace RotateForwardIcon {
    var toString: () => string;
}

declare function RssFeedIcon(props: IconProps): JSX.Element;
declare namespace RssFeedIcon {
    var toString: () => string;
}

declare function SacramentsBoldIcon(props: IconProps): JSX.Element;
declare namespace SacramentsBoldIcon {
    var toString: () => string;
}

declare function SearchCircleIcon(props: IconProps): JSX.Element;
declare namespace SearchCircleIcon {
    var toString: () => string;
}

declare function SearchIcon(props: IconProps): JSX.Element;
declare namespace SearchIcon {
    var toString: () => string;
}

declare function SendIcon(props: IconProps): JSX.Element;
declare namespace SendIcon {
    var toString: () => string;
}

declare function SettingsIcon(props: IconProps): JSX.Element;
declare namespace SettingsIcon {
    var toString: () => string;
}

declare function ShareIcon(props: IconProps): JSX.Element;
declare namespace ShareIcon {
    var toString: () => string;
}

declare function ShieldCheckIcon(props: IconProps): JSX.Element;
declare namespace ShieldCheckIcon {
    var toString: () => string;
}

declare function ShieldCrossIcon(props: IconProps): JSX.Element;
declare namespace ShieldCrossIcon {
    var toString: () => string;
}

declare function ShieldWarningIcon(props: IconProps): JSX.Element;
declare namespace ShieldWarningIcon {
    var toString: () => string;
}

declare function ShrinkIcon(props: IconProps): JSX.Element;
declare namespace ShrinkIcon {
    var toString: () => string;
}

declare function SlidersHorizontalIcon(props: IconProps): JSX.Element;
declare namespace SlidersHorizontalIcon {
    var toString: () => string;
}

declare function SlidersVerticalIcon(props: IconProps): JSX.Element;
declare namespace SlidersVerticalIcon {
    var toString: () => string;
}

declare function SnapchatIcon(props: IconProps): JSX.Element;
declare namespace SnapchatIcon {
    var toString: () => string;
}

declare function SpellingCheckIcon(props: IconProps): JSX.Element;
declare namespace SpellingCheckIcon {
    var toString: () => string;
}

declare function StarAddIcon(props: IconProps): JSX.Element;
declare namespace StarAddIcon {
    var toString: () => string;
}

declare function StarCircleIcon(props: IconProps): JSX.Element;
declare namespace StarCircleIcon {
    var toString: () => string;
}

declare function StarSubtractIcon(props: IconProps): JSX.Element;
declare namespace StarSubtractIcon {
    var toString: () => string;
}

declare function StarIcon(props: IconProps): JSX.Element;
declare namespace StarIcon {
    var toString: () => string;
}

declare function StopwatchIcon(props: IconProps): JSX.Element;
declare namespace StopwatchIcon {
    var toString: () => string;
}

declare function SubtractBoldIcon(props: IconProps): JSX.Element;
declare namespace SubtractBoldIcon {
    var toString: () => string;
}

declare function SubtractCircleIcon(props: IconProps): JSX.Element;
declare namespace SubtractCircleIcon {
    var toString: () => string;
}

declare function SubtractIcon(props: IconProps): JSX.Element;
declare namespace SubtractIcon {
    var toString: () => string;
}

declare function TapIcon(props: IconProps): JSX.Element;
declare namespace TapIcon {
    var toString: () => string;
}

declare function TextBoldIcon(props: IconProps): JSX.Element;
declare namespace TextBoldIcon {
    var toString: () => string;
}

declare function TextItalicIcon(props: IconProps): JSX.Element;
declare namespace TextItalicIcon {
    var toString: () => string;
}

declare function TextStrikeThroughIcon(props: IconProps): JSX.Element;
declare namespace TextStrikeThroughIcon {
    var toString: () => string;
}

declare function TextUnderlineIcon(props: IconProps): JSX.Element;
declare namespace TextUnderlineIcon {
    var toString: () => string;
}

declare function TilmaPayIcon(props: IconProps): JSX.Element;
declare namespace TilmaPayIcon {
    var toString: () => string;
}

declare function TimeClockCircleIcon(props: IconProps): JSX.Element;
declare namespace TimeClockCircleIcon {
    var toString: () => string;
}

declare function TranslateIcon(props: IconProps): JSX.Element;
declare namespace TranslateIcon {
    var toString: () => string;
}

declare function TrashIcon(props: IconProps): JSX.Element;
declare namespace TrashIcon {
    var toString: () => string;
}

declare function TwitterIcon(props: IconProps): JSX.Element;
declare namespace TwitterIcon {
    var toString: () => string;
}

declare function UiWebpageCheckIcon(props: IconProps): JSX.Element;
declare namespace UiWebpageCheckIcon {
    var toString: () => string;
}

declare function UiWebpageRemoveIcon(props: IconProps): JSX.Element;
declare namespace UiWebpageRemoveIcon {
    var toString: () => string;
}

declare function UndoIcon(props: IconProps): JSX.Element;
declare namespace UndoIcon {
    var toString: () => string;
}

declare function UnlockIcon(props: IconProps): JSX.Element;
declare namespace UnlockIcon {
    var toString: () => string;
}

declare function UploadCircleIcon(props: IconProps): JSX.Element;
declare namespace UploadCircleIcon {
    var toString: () => string;
}

declare function UploadSquareIcon(props: IconProps): JSX.Element;
declare namespace UploadSquareIcon {
    var toString: () => string;
}

declare function UploadIcon(props: IconProps): JSX.Element;
declare namespace UploadIcon {
    var toString: () => string;
}

declare function UserAddIcon(props: IconProps): JSX.Element;
declare namespace UserAddIcon {
    var toString: () => string;
}

declare function UserBlockIcon(props: IconProps): JSX.Element;
declare namespace UserBlockIcon {
    var toString: () => string;
}

declare function UserBoldIcon(props: IconProps): JSX.Element;
declare namespace UserBoldIcon {
    var toString: () => string;
}

declare function UserCheckIcon(props: IconProps): JSX.Element;
declare namespace UserCheckIcon {
    var toString: () => string;
}

declare function UserCircleBoldIcon(props: IconProps): JSX.Element;
declare namespace UserCircleBoldIcon {
    var toString: () => string;
}

declare function UserCircleIcon(props: IconProps): JSX.Element;
declare namespace UserCircleIcon {
    var toString: () => string;
}

declare function UserDirectoryIcon(props: IconProps): JSX.Element;
declare namespace UserDirectoryIcon {
    var toString: () => string;
}

declare function UserInformationIcon(props: IconProps): JSX.Element;
declare namespace UserInformationIcon {
    var toString: () => string;
}

declare function UserKeyIcon(props: IconProps): JSX.Element;
declare namespace UserKeyIcon {
    var toString: () => string;
}

declare function UserNotificationIcon(props: IconProps): JSX.Element;
declare namespace UserNotificationIcon {
    var toString: () => string;
}

declare function UserRemoveIcon(props: IconProps): JSX.Element;
declare namespace UserRemoveIcon {
    var toString: () => string;
}

declare function UserSubtractIcon(props: IconProps): JSX.Element;
declare namespace UserSubtractIcon {
    var toString: () => string;
}

declare function UserTimeIcon(props: IconProps): JSX.Element;
declare namespace UserTimeIcon {
    var toString: () => string;
}

declare function UserIcon(props: IconProps): JSX.Element;
declare namespace UserIcon {
    var toString: () => string;
}

declare function UsersCheckIcon(props: IconProps): JSX.Element;
declare namespace UsersCheckIcon {
    var toString: () => string;
}

declare function UsersCircleIcon(props: IconProps): JSX.Element;
declare namespace UsersCircleIcon {
    var toString: () => string;
}

declare function UsersCogIcon(props: IconProps): JSX.Element;
declare namespace UsersCogIcon {
    var toString: () => string;
}

declare function UsersIcon(props: IconProps): JSX.Element;
declare namespace UsersIcon {
    var toString: () => string;
}

declare function VideoCameraIcon(props: IconProps): JSX.Element;
declare namespace VideoCameraIcon {
    var toString: () => string;
}

declare function ViewOffIcon(props: IconProps): JSX.Element;
declare namespace ViewOffIcon {
    var toString: () => string;
}

declare function ViewIcon(props: IconProps): JSX.Element;
declare namespace ViewIcon {
    var toString: () => string;
}

declare function WebsiteIcon(props: IconProps): JSX.Element;
declare namespace WebsiteIcon {
    var toString: () => string;
}

declare function WheelchairIcon(props: IconProps): JSX.Element;
declare namespace WheelchairIcon {
    var toString: () => string;
}

declare function WifiSignalIcon(props: IconProps): JSX.Element;
declare namespace WifiSignalIcon {
    var toString: () => string;
}

declare function WifiIcon(props: IconProps): JSX.Element;
declare namespace WifiIcon {
    var toString: () => string;
}

declare function WrenchIcon(props: IconProps): JSX.Element;
declare namespace WrenchIcon {
    var toString: () => string;
}

declare function YoutubeIcon(props: IconProps): JSX.Element;
declare namespace YoutubeIcon {
    var toString: () => string;
}

declare function ZoomInIcon(props: IconProps): JSX.Element;
declare namespace ZoomInIcon {
    var toString: () => string;
}

declare function ZoomOutIcon(props: IconProps): JSX.Element;
declare namespace ZoomOutIcon {
    var toString: () => string;
}

declare const InputGroupFactory: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    alignItems: string;
    width: string;
    variants: {
        size: {
            small: {
                [x: string]: {
                    height: string;
                };
            };
            regular: {
                [x: string]: {
                    height: string;
                };
            };
            large: {
                [x: string]: {
                    height: string;
                };
            };
        };
    };
    '> :first-child': {
        [x: string]: {
            borderTopRightRadius: number;
            borderBottomRightRadius: number;
            breakAfter?: undefined;
        } | {
            breakAfter: string;
            borderTopRightRadius?: undefined;
            borderBottomRightRadius?: undefined;
        };
    };
    '> :not(:first-child):not(:last-child)': {
        [x: string]: {
            borderRadius: number;
            border?: undefined;
            borderWidth?: undefined;
        } | {
            border: string;
            borderWidth: string;
            borderRadius?: undefined;
        };
    };
    '> :last-child': {
        [x: string]: {
            borderTopLeftRadius: number;
            borderBottomLeftRadius: number;
            marginLeft?: undefined;
        } | {
            marginLeft: string;
            borderTopLeftRadius?: undefined;
            borderBottomLeftRadius?: undefined;
        };
    };
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
/**
 * Provides a wrapper and needed styles for a group of controls.
 * This component controls the sizes of the controls and the spacing between them.
 *
 * @example
 * ```
 * <InputGroup size="small">
 *    <TextInput />
 *    <Button>Submit</Button>
 * </InputGroup>
 * ```
 *
 * @since 1.2.6
 * @author [Evan Hennessy]<evan@glasscanvas.io>
 *
 */
declare const InputGroup: react.ForwardRefExoticComponent<Pick<Omit<Pick<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof react.HTMLAttributes<HTMLDivElement>> & {
    ref?: react.Ref<HTMLDivElement>;
}, "size" | "css"> & _stitches_react_types_styled_component.TransformProps<_stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    alignItems: string;
    width: string;
    variants: {
        size: {
            small: {
                [x: string]: {
                    height: string;
                };
            };
            regular: {
                [x: string]: {
                    height: string;
                };
            };
            large: {
                [x: string]: {
                    height: string;
                };
            };
        };
    };
    '> :first-child': {
        [x: string]: {
            borderTopRightRadius: number;
            borderBottomRightRadius: number;
            breakAfter?: undefined;
        } | {
            breakAfter: string;
            borderTopRightRadius?: undefined;
            borderBottomRightRadius?: undefined;
        };
    };
    '> :not(:first-child):not(:last-child)': {
        [x: string]: {
            borderRadius: number;
            border?: undefined;
            borderWidth?: undefined;
        } | {
            border: string;
            borderWidth: string;
            borderRadius?: undefined;
        };
    };
    '> :last-child': {
        [x: string]: {
            borderTopLeftRadius: number;
            borderBottomLeftRadius: number;
            marginLeft?: undefined;
        } | {
            marginLeft: string;
            borderTopLeftRadius?: undefined;
            borderBottomLeftRadius?: undefined;
        };
    };
    defaultVariants: {
        size: "regular";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}> & {
    css?: _stitches_react_types_css_util.CSS<{
        tabletPortrait: "(min-width: 767px)";
        tabletLandscape: "(min-width: 1023px)";
        laptop: "(min-width: 1100px)";
        desktop: "(min-width: 1919px)";
        ultrawide: "(min-width: 2300px)";
        touch: "(pointer: coarse)";
        mouse: "(pointer: fine) and (hover: hover)";
        highcontrast: "(forced-colors: active)";
    }, {
        colors: {
            primary: string;
            secondary: string;
            tertiary: string;
            background: string;
            secondaryBackground: string;
            tertiaryBackground: string;
            groupedBackground: string;
            info: string;
            overlay: string;
            tooltip: string;
            primaryTint: string;
            secondaryTint: string;
            tertiaryTint: string;
            dangerTint: string;
            successTint: string;
            warningTint: string;
            muted: string;
            primarySplit: string;
            secondarySplit: string;
            tertiarySplit: string;
            label: string;
            secondaryLabel: string;
            tertiaryLabel: string;
            quartenaryLabel: string;
            placeholderText: string;
            disabled: string;
            radio: string;
            checkbox: string;
            onPrimary: string;
            onSecondary: string;
            onTertiary: string;
            focusStroke: string;
            hsl_primary: string;
            hsl_info: string;
            hsl_secondary: string;
            hsl_tertiary: string;
            hsl_background: string;
            hsl_secondaryBackground: string;
            hsl_tertiaryBackground: string;
            slate: string;
            blue: string;
            lightBlue: string;
            navy: string;
            steel: string;
            jade: string;
            green: string;
            yellow: string;
            coral: string;
            cream: string;
            red: string;
            pink: string;
            rose: string;
            purple: string;
            black: string;
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            white: string;
            danger: string;
            success: string;
            warning: string;
            hsl_danger: string;
            hsl_success: string;
            hsl_warning: string;
            hsl_slate: string;
            hsl_blue: string;
            hsl_lightBlue: string;
            hsl_navy: string;
            hsl_steel: string;
            hsl_jade: string;
            hsl_green: string;
            hsl_yellow: string;
            hsl_coral: string;
            hsl_cream: string;
            hsl_red: string;
            hsl_pink: string;
            hsl_rose: string;
            hsl_purple: string;
            hsl_black: string;
            hsl_gray1: string;
            hsl_gray2: string;
            hsl_gray3: string;
            hsl_gray4: string;
            hsl_gray5: string;
            hsl_gray6: string;
            hsl_white: string;
        };
        fonts: {
            serif: string;
            sans: string;
            mono: string;
        };
        fontSizes: {
            extraSmall: string;
            footnote: string;
            caption2: string;
            caption1: string;
            body: string;
            large: string;
            subHeadline: string;
            headline: string;
            title3: string;
            title2: string;
            title1: string;
            largeTitle: string;
            extraLargeTitle: string;
            root: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        lineHeights: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
        };
        fontWeights: {
            light: string;
            regular: string;
            medium: string;
            bold: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            buttonHeightSmall: string;
            buttonHeightRegular: string;
            buttonHeightLarge: string;
            controlHeightSmall: string;
            controlHeightRegular: string;
            controlHeightLarge: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            19: string;
            20: string;
            small: string;
            medium: string;
            large: string;
        };
        radii: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            controlSmall: string;
            controlRegular: string;
            controlLarge: string;
            round: string;
        };
        shadows: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
        };
        transitions: {
            slow: string;
            normal: string;
            fast: string;
            toast: string;
        };
        borderWidths: {
            1: string;
            2: string;
            3: string;
        };
        zIndices: {
            focused: string;
            default: string;
            positioner: string;
            overlay: string;
            toaster: string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        marginInline: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        marginBlock: (value: {
            readonly [$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [$$PropertyValue]: "margin";
            };
        };
        paddingInline: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        paddingBlock: (value: {
            readonly [$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [$$PropertyValue]: "padding";
            };
        };
        size: (value: {
            readonly [$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [$$PropertyValue]: "width";
            };
            height: {
                readonly [$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [$$PropertyValue]: "minWidth";
            };
            minHeight: {
                readonly [$$PropertyValue]: "minWidth";
            };
        };
        maxSize: (value: {
            readonly [$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [$$PropertyValue]: "maxWidth";
            };
            maxHeight: {
                readonly [$$PropertyValue]: "maxWidth";
            };
        };
        capsize: ({ metrics, fontSize, lineGap, }: {
            metrics?: "Recoleta Alt" | "Modern Era";
            fontSize?: number;
            lineGap?: number;
        }) => {
            '&::before': {
                content: string;
                marginBottom: string;
                display: string;
            };
            '&::after': {
                content: string;
                marginTop: string;
                display: string;
            };
            fontSize: string;
            lineHeight: string;
        };
    }>;
}, "key" | "size" | "css" | keyof react.HTMLAttributes<HTMLDivElement>> & react.RefAttributes<HTMLDivElement>>;

declare const ListBoxList: _stitches_react_types_styled_component.StyledComponent<"ul", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$items: number;
    padding: string;
    listStyle: string;
    variants: {
        appearance: {
            standalone: {
                border: string;
                borderRadius: string;
            };
            inline: {
                border: string;
                borderRadius: string;
            };
        };
    };
    defaultVariants: {
        appearance: "standalone";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type ListBoxVariants = VariantProps<typeof ListBoxList>;
declare type ListBoxOptions<DataType> = AriaListBoxOptions<DataType>;
declare type AriaListBoxProps<DataType> = ListBoxOptions<DataType> & FieldLabelAndDescriptionProps & ListBoxVariants & ListProps<DataType> & {
    /** @private */
    listBoxRef?: MutableRefObject<any>;
    /** @private */
    state?: ComboBoxState$1<any> | TreeState<any> | SelectState<any>;
    showHighlight?: boolean;
    actionItem?: ListActionProps;
};
/**
 * This component is used in ComboxBox, Select, etc.
 * We don't recommend using this component directly.
 */
declare function ListBox<DataType extends object = {}>({ appearance, showHighlight, actionItem, labelProps, ...props }: AriaListBoxProps<DataType>): JSX.Element;

declare type OptionProps = {
    item: Node<any> & {
        showHighlight?: boolean;
    };
    state: ListState<any> | ComboBoxState$1<any>;
    showHighlight?: boolean;
};
declare function Option({ item, state, showHighlight }: OptionProps): JSX.Element;

declare const MenuFactory: _stitches_react_types_styled_component.StyledComponent<"ul", {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type MenuProps = ComponentProps<typeof MenuFactory> & Parameters<typeof useMenu>[0] & Parameters<typeof useTreeState>[0];
declare function Menu(props: MenuProps): JSX.Element;

/** @deprecated Use `Section` instead */
declare const MenuGroup: <T>(props: _react_types_shared.SectionProps<T>) => JSX.Element;

/** @deprecated Use `Item` instead */
declare const MenuItem: Polymorphic.ForwardRefComponent<"li", DefaultItemProps<{}>>;

declare type PopoverProps = ComponentProps<typeof Card> & {
    content: ((props: {
        close: () => void;
        isOpen: boolean;
    }) => ReactNode) | ReactNode;
    children: ((props: {
        setOpen: (isOpen: boolean) => void;
        toggle: () => void;
        open: () => void;
        close: () => void;
        isOpen: boolean;
        triggerProps: TriggerProps;
    }) => ReactNode) | ReactNode;
    onClose?: () => void;
    placement?: Placement;
    showDelay?: number;
    hideDelay?: number;
    triggerOffset?: number;
    containerOffset?: number;
    isShown?: boolean;
    closeOnClickOutside?: boolean;
    closeOnLeaveViewport?: boolean;
    automaticPlacement?: boolean;
};
declare function Popover({ children, content, showDelay, hideDelay, placement, triggerOffset, containerOffset, isShown, closeOnClickOutside, closeOnLeaveViewport, automaticPlacement, onClose, ...props }: PopoverProps): JSX.Element;

declare type Fields = {
    [key: string]: FieldOrGroup & {
        type: keyof typeof BasicConfig.widgets;
    };
};
declare type QueryBuilderProps = {
    initialValue?: JsonTree;
    fields: Fields;
    settings?: Partial<Settings>;
    onChange?: ({}: {
        immutableTree: ImmutableTree;
        config: Config;
        jsonTree: JsonTree;
    }) => void;
};
declare function QueryBuilder({ initialValue, fields, onChange, settings }: QueryBuilderProps): JSX.Element;

declare const RadioFactory: _stitches_react_types_styled_component.StyledComponent<"input", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$borderWidth: string;
    $$shadowColor: string;
    $$size: string;
    clip: string;
    height: string;
    overflow: string;
    padding: string;
    position: string;
    whiteSpace: string;
    width: string;
    opacity: string;
    '& + div': {
        $$borderWidth: string;
        $$shadowColor: string;
        $$size: string;
        WebkitFontSmoothing: string;
        textDecoration: string;
        border: string;
        outline: string;
        cursor: string;
        color: string;
        backgroundColor: string;
        borderRadius: string;
        boxShadow: string;
        size: string;
        marginRight: string;
        transition: string;
    };
    '& + div > svg': {
        display: string;
        color: string;
    };
    '&:not([disabled]):hover + div': {
        backgroundColor: string;
        $$shadowColor: string;
    };
    '&:checked + div': {
        color: string;
        backgroundColor: string;
        '& > svg': {
            display: string;
        };
    };
    '&[disabled] + div': {
        backgroundColor: string;
        cursor: string;
    };
    '&[disabled]': {
        cursor: string;
        color: string;
    };
    '&[disabled]:checked + div': {
        backgroundColor: string;
        cursor: string;
        boxShadow: string;
        '& > svg': {
            color: string;
        };
    };
    '&:focus-visible + div': {
        $$shadowColor: string;
    };
    variants: {
        size: {
            small: {
                $$size: string;
            };
            regular: {
                $$size: string;
            };
            large: {
                $$size: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type AriaRadioProps = Parameters<typeof useRadio>[0];
declare type RadioProps = AriaRadioProps & Pick<ComponentProps<typeof RadioFactory>, 'css' | 'size'> & {
    /**
     * When true, the aria-invalid attribute is true.
     * Used for accessibility.
     */
    invalid?: string | boolean;
    disabled?: AriaRadioProps['isDisabled'];
    value: string | number;
};
interface RadioPropsWithLabel extends Omit<RadioProps, 'children' | 'label'> {
    label: string;
    children?: never;
}
interface RadioPropsWithChildren extends Omit<RadioProps, 'children' | 'label'> {
    children: string;
    label?: never;
}
/**
 * Radios must be used in a `RadioGroup` to provide a group of radio buttons.
 * @since 1.12.0
 * @author Alyssa Gutierrez
 * @author Evan Hennessy
 *
 * ```tsx
 * // Always pass a child as a label
 * <Radio>Option 1</Radio>
 *
 * // Or use the label prop
 * <Radio label="Option 1">
 * ```
 */
declare const Radio: react.ForwardRefExoticComponent<(RadioPropsWithLabel | RadioPropsWithChildren) & react.RefAttributes<HTMLInputElement>>;

declare const RadioGroupWrapper: _stitches_react_types_styled_component.StyledComponent<"fieldset", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    gap: string;
    variants: {
        orientation: {
            horizontal: {
                flexDirection: string;
            };
            vertical: {
                flexDirection: string;
            };
        };
    };
    defaultVariants: {
        orientation: "vertical";
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare type AriaRadioGroupStateProps = Parameters<typeof useRadioGroupState>[0];
declare type AriaRadioGroupProps = Parameters<typeof useRadioGroup>[0];
declare type RadioSizes = RadioProps['size'];
declare type RadioGroupProps = Overwrite<ComponentProps<typeof RadioGroupWrapper>, AriaRadioGroupProps> & {
    required?: AriaRadioGroupStateProps['isRequired'];
    disabled?: AriaRadioGroupStateProps['isDisabled'];
    orientation?: AriaRadioGroupStateProps['orientation'];
    value?: AriaRadioGroupStateProps['value'];
    label: string;
    hideLabel?: boolean;
    /**
     * The size of the radio buttons in this group.
     * @default 'regular'
     */
    size?: RadioSizes;
};
/**
 * Radio groups allow users to select a single item from a list of mutually exclusive options.
 * @see https://www.w3.org/TR/wai-aria-practices-1.1/#radiogroup
 * @since 1.12.0
 * @author Alyssa Gutierrez
 * @coauthor Evan Hennessy
 *
 * @example
 * ```tsx
 * <RadioGroup label="Label is Required">
 *  <Radio value="1">One</Radio>
 *  <Radio value="2">Two</Radio>
 *  <Radio value="3">Three</Radio>
 * </RadioGroup>
 * ```
 */
declare const RadioGroup: react.ForwardRefExoticComponent<Pick<RadioGroupProps, "key" | "color" | "translate" | "hidden" | "size" | "style" | "label" | "disabled" | "css" | "prefix" | "form" | "slot" | "title" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "value" | "name" | "orientation" | "required" | "hideLabel"> & react.RefAttributes<HTMLFieldSetElement>>;

declare type StackRouteProps = ComponentProps<typeof Route> & {
    title?: string;
    start?: boolean;
    /** Whether to show the header on this route */
    hasHeader?: boolean;
    hasBackButton?: boolean;
};
declare function StackPage({ children, ...props }: Partial<StackRouteProps> & ComponentProps<typeof Pane>): JSX.Element;

declare const StackRoute: (props: ComponentProps<typeof Route$1> & Partial<StackRouteProps>) => JSX.Element;

declare type RouterSpecificProps = ComponentProps<typeof HashRouter> & ComponentProps<typeof MemoryRouter>;
declare type StackRouterProps = {
    hashRouting?: boolean;
    containerProps?: Overwrite<ComponentProps<typeof Card>, MotionProps>;
    children: ReactElement<StackRouteProps> | ReactElement<StackRouteProps>[];
} & Omit<RouterSpecificProps, 'children'>;
declare const StackRouter: ({ hashRouting, ...props }: StackRouterProps) => JSX.Element;

declare const darkTheme: string & {
    className: string;
    selector: string;
} & _stitches_react_types_stitches.ThemeTokens<{
    colors: {
        secondary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        overlay: string;
        label: string;
        secondaryLabel: string;
        placeholderText: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
}, "gc">;

declare type ToastConfig = {
    /**
     * Set a custom ID on a toast if you want to make sure to avoid duplicates
     */
    id?: string | number;
    title: string;
    description?: string;
    intent?: Intent;
    isShown?: boolean;
    /** How long to show this individual toast in ms.
     * @example 1000 = 1 second
     */
    duration?: number | 'forever';
};
declare type ToastOffsetConfig = Record<'top' | 'side', `$${keyof typeof theme['space']}`>;
declare type ToasterProps = {
    children: ReactChild;
    position?: 'left' | 'center' | 'right';
    defaultDuration?: number | 'forever';
    offset?: `$${keyof typeof theme['space']}` | ToastOffsetConfig;
};

/**
 * You need to add a Toaster to the root of your app to be able to pop toasts
 */
declare function Toaster({ children, position, offset, defaultDuration }: ToasterProps): JSX.Element;
declare const useToaster: () => {
    add: (toast: ToastConfig) => void;
    remove: (id: ToastConfig['id']) => void;
    closeAll: () => void;
    toasts: ToastConfig[];
};

declare enum FeatureFlag {
    Calendar = "Calendar",
    Select = "Select",
    MultiSelect = "MultiSelect",
    Switch = "Switch",
    DisclosureGroup = "DisclosureGroup",
    TranslucentToast = "TranslucentToast"
}

declare type ThemeProviderProps = {
    children: ReactChild;
    disableGlobalStyles?: boolean;
    disableResetStyles?: boolean;
    toaster?: Pick<ComponentProps<typeof Toaster>, 'position' | 'defaultDuration' | 'offset'>;
    i18n?: Partial<IntlConfig>;
    featureFlags?: Partial<Record<FeatureFlag, boolean>>;
};
declare function ThemeProvider({ disableGlobalStyles, disableResetStyles, children, toaster, i18n, featureFlags, }: ThemeProviderProps): JSX.Element;

declare type SeparatorProps = Parameters<typeof useSeparator>[0] & {
    css?: CSS<typeof config>;
};
/**
 * A component that can be used to separate sections of content.
 *
 * Provides some necessary roles for aria.
 * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
 *
 * @author Evan Hennessy
 * @since 1.3.8
 */
declare function Separator(props: SeparatorProps): JSX.Element;

declare type SheetProps = Omit<OverlayProps, 'onHide' | 'onShow'> & {
    onOpen?: () => void;
    onClose?: (close?: () => void) => void;
    onConfirm?: (close: () => void) => void;
    overlayProps?: ComponentProps<typeof Overlay>;
    side?: 'left' | 'right' | 'bottom';
    topOffset?: ComponentProps<typeof Card>['css']['marginTop'];
    minHeightContent?: ComponentProps<typeof Card>['css']['minHeight'];
    contentContainerProps?: ComponentProps<typeof Box>;
    css?: ComponentProps<typeof Card>['css'];
    hideHeader?: boolean;
    hideClose?: boolean;
    showConfirm?: boolean;
    loading?: boolean;
    disabled?: boolean;
    cancelLabel?: string;
    confirmLabel?: string;
    intent?: ButtonProps['intent'];
    confirmIcon?: ReactNode;
    width?: number;
    /**
     * The title for the dialog
     * For accessibility reasons a title is always required even without a header
     */
    title: string;
    /** An optional sub title for the sheet header */
    subtitle?: string;
};
/**
 * A sheet is a modal that opens from one of the sides.
 *
 * @note If a string is provided as children, it will be wrapped in a Paragraph component
 *
 * @example
 * ```tsx
 * const [shown, setShown] = useState(false)
 *
 * <Sheet
    onClose={() => setOpen(false)}
    side={side}
    title="Sheets always require a title"
        subtitle="An optional subtitle can go here"
        isShown={open}
      >
 * ```
 */
declare function Sheet({ onClose, onOpen, onConfirm, isShown, shouldCloseOnClick, shouldCloseOnEscapePress, overlayProps, preventBodyScroll, width, css, side, contentContainerProps, children, hideHeader, hideClose, showConfirm, cancelLabel, confirmLabel, loading, title, subtitle, }: SheetProps): JSX.Element;

declare type SpinnerProps = ComponentProps<typeof Box> & {
    /**
     * The size of the spinner
     */
    size?: ComponentProps<typeof Box>['css']['size'];
    /**
     * The color of the spinner
     */
    css?: CSS;
};
/**
 * Used for indeterminate loading. Make sure to set a color that will constrast with the background.
 */
declare function Spinner({ size, color, css, ...props }: SpinnerProps): JSX.Element;
declare namespace Spinner {
    var defaultProps: {
        size: string;
    };
}

declare type StatisticProps = {
    /** A descriptive label for the Statistic */
    label: string;
    /** The value of the Statistic */
    value: number | string;
    /** Sets the loading state for the statistic */
    loading?: boolean;
    /** Formatting options for the number */
    formatOptions?: FormatNumberOptions | true;
};
/**
 * Label / Number pair that displays a value and a label.
 * @example
 * <Statistic label="Total" value={12345} />
 */
declare function Statistic({ label, value, loading, formatOptions, ...props }: StatisticProps): JSX.Element;

declare type SwitchProps = AriaSwitchProps & {
    label?: ReactNode;
    selected?: AriaSwitchProps['isSelected'];
    disabled?: AriaSwitchProps['isDisabled'];
};
declare const Switch: ({ label, selected, disabled, ...props }: SwitchProps) => JSX.Element;

declare const StyledTable: _stitches_react_types_styled_component.StyledComponent<"table", _stitches_react_types_styled_component.StyledComponentProps<[_stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    $$borderTopColor: string;
    $$borderRightColor: string;
    $$borderBottomColor: string;
    $$borderLeftColor: string;
    border: string;
    borderColor: string;
    transition: string;
    variants: {
        elevation: {
            1: {
                boxShadow: string;
            };
            2: {
                boxShadow: string;
            };
            3: {
                boxShadow: string;
            };
            4: {
                boxShadow: string;
            };
        };
        hoverElevation: {
            1: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            2: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            3: {
                '&:hover': {
                    boxShadow: string;
                };
            };
            4: {
                '&:hover': {
                    boxShadow: string;
                };
            };
        };
        border: {
            true: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            solid: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
            muted: {
                $$borderTopColor: string;
                $$borderRightColor: string;
                $$borderBottomColor: string;
                $$borderLeftColor: string;
            };
        };
        borderTop: {
            true: {
                $$borderTopColor: string;
            };
            solid: {
                $$borderTopColor: string;
            };
            muted: {
                $$borderTopColor: string;
            };
        };
        borderRight: {
            true: {
                $$borderRightColor: string;
            };
            solid: {
                $$borderRightColor: string;
            };
            muted: {
                $$borderRightColor: string;
            };
        };
        borderBottom: {
            true: {
                $$borderBottomColor: string;
            };
            solid: {
                $$borderBottomColor: string;
            };
            muted: {
                $$borderBottomColor: string;
            };
        };
        borderLeft: {
            true: {
                $$borderLeftColor: string;
            };
            solid: {
                $$borderLeftColor: string;
            };
            muted: {
                $$borderLeftColor: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>, {
    $$borderColor: string;
    width: string;
    height: string;
    minHeight: string;
    minWidth: string;
    display: string;
    overflow: string;
    borderWidth: string;
    gridAutoRows: string;
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const StyledTableRow: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    display: string;
    height: number;
    maxHeight: number;
    color: string;
    appearance: string;
    variants: {
        hasRowAction: {
            true: {
                cursor: string;
                '&:hover > *': {
                    backgroundColor: string;
                };
                '&:active > *': {
                    backgroundColor: string;
                };
                '&:focus > *': {
                    backgroundColor: string;
                    boxShadow: string;
                };
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;

declare type TableProps = Pick<Parameters<typeof useTable>[0], 'columns' | 'data'> & Partial<Pick<Parameters<typeof useTable>[0], 'initialState' | 'defaultColumn' | 'pageCount' | 'pageIndex' | 'manualPagination' | 'autoResetPage' | 'manualSortBy' | 'disableMultiSort'>> & TablePropGetter<object> & {
    columns: {
        formatter?: (Cell: any) => void;
    }[];
    /** Initial hidden columns */
    hiddenColumns?: string[];
    /** Enables selecting. Alias for `rowSelect` and `selectAll` */
    selectable?: boolean;
    /** Allow rows to be selected individually */
    rowSelect?: boolean;
    /** Controlled selected row ids */
    selectedRowIds?: Record<string, boolean>;
    /** Listener for row selection changes */
    onSelectionChange?: (selectedRowIds: Record<string, boolean>) => void;
    /** Enable sorting */
    sortable?: boolean;
    /** Listener for when sorting changes */
    onSortChange?: (sortingRules: SortingRule<any>[]) => void;
    /** The rule(s) to sort the table by */
    sortBy?: SortingRule<any>[];
    initialSortBy?: SortingRule<any>[];
    /** Enables multi-sort by holding down shift while sorting a column */
    enableMultiSort?: boolean;
    /** Enable resizing columns */
    resizable?: boolean;
    headerOptions?: {
        /** Enable sticky header */
        sticky?: boolean;
        /** Show select all checkbox in header */
        selectAll?: boolean;
        /** Hide the header */
        hidden?: boolean;
    };
    /** Footer options */
    footerOptions?: {
        /** Enable sticky footer */
        sticky?: boolean;
        /** Footer item alignment */
        align?: 'left' | 'right';
    };
    /** Set the table loading UI */
    loading?: boolean;
    /** Override column order */
    setColumnOrder?: (updater: string[] | ((columnOrder: string[]) => string[])) => void;
    /** Enable pagination */
    pageable?: boolean;
    /** An array of page sizes to display in the dropdown */
    pageSizes?: number[];
    /** The initial size of the page */
    pageSize?: number;
    /** Initial Pagination index */
    pageIndex?: number;
    /** Total number of items */
    rowCount?: number;
    /** Listener for when pagination changes */
    onPaginationChange?: (pagination: {
        pageIndex: number;
        pageSize: number;
    }) => void;
    onRowPress?: (row: Row) => void;
    rowProps?: ((row: Row) => ComponentProps<typeof StyledTableRow>) | ComponentProps<typeof StyledTableRow>;
    getRowId?: (row: Row) => string;
    css?: CSS;
    as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;
    aboveTable?: React.ReactNode;
    belowTable?: React.ReactNode;
} & Pick<ComponentProps<typeof StyledTable>, 'border' | 'borderBottom' | 'borderLeft' | 'borderRight' | 'borderTop'>;

/**
 * @summary
 * Glass Canvas's Table component. Required Props are `data` and `columns`.
 * **Note:** `data` and `columns` must be memoized using `useMemo` or else suffer performance implications.
 *
 * ### Optional Table Features
 * Table features are off by default.
 * To enable a feature, set the corresponding prop to `true`.
 * - `selectable`: Enables selecting rows with checkbox. Alias for `rowSelect` and `selectAll`
 * - `sortable`: Enables sorting of columns.
 * - `resizable`: Enables resizing of columns.
 * - `pageable`: Enables pagination.
 *
 *
 * @example
 * <Table
 *  data={[{ id: 'Person:1', name: 'John', age: 20 }, { id: 'Person:2', name: 'Jane', age: 30 }]}
 *  columns={[{ Header: 'Name', accessor: 'name' }, { Header: 'Age', accessor: 'age' }]}
 *  selectable
 *  onRowPress={(row) => goTo(`/person/${row.id}`)}
 * />
 *
 * @note Using the `css` prop to style the table may be necessary to fill whatever space you're looking for.
 *
 * @note If you'd like to embed click-able elements in the table, you should consider stopping event propagation so the row is not clicked as a result.
 *
 * @tutorial https://glasscanvas.slack.com/files/U013S5C7CQ3/F02MXQZF2MB/screenshare_-_2021-11-19_11_55_55_am.webm
 *
 * @author [Evan Hennessy]
 */
declare function Table({ columns, data, initialState, rowSelect, sortable, resizable, selectable, pageable, defaultColumn, setColumnOrder: setColumnOrderProp, headerOptions: { sticky, selectAll, ...headerOptions }, footerOptions, loading, pageCount: controlledPageCount, pageIndex: controlledPageIndex, pageSizes, pageSize: initialPageSize, manualPagination, manualSortBy, autoResetPage, css, border, borderBottom, borderLeft, borderRight, borderTop, onSortChange, onPaginationChange, sortBy: controlledSortBy, hiddenColumns, rowCount, selectedRowIds: controlledSelectedRowIds, onSelectionChange, getRowId, enableMultiSort, as, onRowPress, rowProps, initialSortBy, aboveTable: AboveTable, belowTable: BelowTable, ...props }: TableProps): JSX.Element;

declare const TabRoot: _stitches_react_types_styled_component.StyledComponent<RadixTabs.TabsPrimitive, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const TabList: _stitches_react_types_styled_component.StyledComponent<RadixTabs.TabsListPrimitive, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const TabPanel: _stitches_react_types_styled_component.StyledComponent<RadixTabs.TabsPanelPrimitive, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare const TabFactory: _stitches_react_types_styled_component.StyledComponent<RadixTabs.TabsTabPrimitive, {}, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare function Tab({ children, ...props }: ComponentProps<typeof TabFactory>): JSX.Element;

declare type TooltipProps = ComponentProps<typeof Card> & {
    /** The inside of the toolip. Can be a string or any React Node */
    content: ReactNode;
    /** The placement of the tooltip relative to the target */
    placement?: Placement;
    /** How long the tooltip should wait before showing when the target is hovered on */
    showDelay?: number;
    /** How long the tooltip should stay shown stay after the target loses focus */
    hideDelay?: number;
    /** The distance of the tooltip from the target */
    triggerOffset?: number;
    /** The minimum distance to maintain from the container. (Usually the window) */
    containerOffset?: number;
    /** Force the tooltip to be shown. Tooltip becomes controlled */
    isShown?: boolean;
    /** Whether the tooltip should have an arrow */
    hasArrow?: boolean;
};
declare function Tooltip({ children, content, showDelay, hideDelay, placement, hasArrow, triggerOffset, containerOffset, isShown, ...props }: TooltipProps): JSX.Element;

declare const StyledDebugBlock: _stitches_react_types_styled_component.StyledComponent<"div", _stitches_react_types_styled_component.StyledComponentProps<[{
    backgroundColor: string;
    padding: string;
    color: string;
    border: string;
    borderColor: string;
    borderRadius: string;
    display: string;
    flexDirection: string;
    gap: string;
    variants: {
        floating: {
            left: {
                position: string;
                bottom: string;
                left: string;
            };
            right: {
                position: string;
                bottom: string;
                right: string;
            };
        };
    };
}]>, {
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, _stitches_react_types_css_util.CSS<{
    tabletPortrait: "(min-width: 767px)";
    tabletLandscape: "(min-width: 1023px)";
    laptop: "(min-width: 1100px)";
    desktop: "(min-width: 1919px)";
    ultrawide: "(min-width: 2300px)";
    touch: "(pointer: coarse)";
    mouse: "(pointer: fine) and (hover: hover)";
    highcontrast: "(forced-colors: active)";
}, {
    colors: {
        primary: string;
        secondary: string;
        tertiary: string;
        background: string;
        secondaryBackground: string;
        tertiaryBackground: string;
        groupedBackground: string;
        info: string;
        overlay: string;
        tooltip: string;
        primaryTint: string;
        secondaryTint: string;
        tertiaryTint: string;
        dangerTint: string;
        successTint: string;
        warningTint: string;
        muted: string;
        primarySplit: string;
        secondarySplit: string;
        tertiarySplit: string;
        label: string;
        secondaryLabel: string;
        tertiaryLabel: string;
        quartenaryLabel: string;
        placeholderText: string;
        disabled: string;
        radio: string;
        checkbox: string;
        onPrimary: string;
        onSecondary: string;
        onTertiary: string;
        focusStroke: string;
        hsl_primary: string;
        hsl_info: string;
        hsl_secondary: string;
        hsl_tertiary: string;
        hsl_background: string;
        hsl_secondaryBackground: string;
        hsl_tertiaryBackground: string;
        slate: string;
        blue: string;
        lightBlue: string;
        navy: string;
        steel: string;
        jade: string;
        green: string;
        yellow: string;
        coral: string;
        cream: string;
        red: string;
        pink: string;
        rose: string;
        purple: string;
        black: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        white: string;
        danger: string;
        success: string;
        warning: string;
        hsl_danger: string;
        hsl_success: string;
        hsl_warning: string;
        hsl_slate: string;
        hsl_blue: string;
        hsl_lightBlue: string;
        hsl_navy: string;
        hsl_steel: string;
        hsl_jade: string;
        hsl_green: string;
        hsl_yellow: string;
        hsl_coral: string;
        hsl_cream: string;
        hsl_red: string;
        hsl_pink: string;
        hsl_rose: string;
        hsl_purple: string;
        hsl_black: string;
        hsl_gray1: string;
        hsl_gray2: string;
        hsl_gray3: string;
        hsl_gray4: string;
        hsl_gray5: string;
        hsl_gray6: string;
        hsl_white: string;
    };
    fonts: {
        serif: string;
        sans: string;
        mono: string;
    };
    fontSizes: {
        extraSmall: string;
        footnote: string;
        caption2: string;
        caption1: string;
        body: string;
        large: string;
        subHeadline: string;
        headline: string;
        title3: string;
        title2: string;
        title1: string;
        largeTitle: string;
        extraLargeTitle: string;
        root: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    lineHeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        light: string;
        regular: string;
        medium: string;
        bold: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        buttonHeightSmall: string;
        buttonHeightRegular: string;
        buttonHeightLarge: string;
        controlHeightSmall: string;
        controlHeightRegular: string;
        controlHeightLarge: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        small: string;
        medium: string;
        large: string;
    };
    radii: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        controlSmall: string;
        controlRegular: string;
        controlLarge: string;
        round: string;
    };
    shadows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
    };
    transitions: {
        slow: string;
        normal: string;
        fast: string;
        toast: string;
    };
    borderWidths: {
        1: string;
        2: string;
        3: string;
    };
    zIndices: {
        focused: string;
        default: string;
        positioner: string;
        overlay: string;
        toaster: string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    marginInline: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginBlock: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    paddingInline: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingBlock: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
        minHeight: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    capsize: ({ metrics, fontSize, lineGap, }: {
        metrics?: "Recoleta Alt" | "Modern Era";
        fontSize?: number;
        lineGap?: number;
    }) => {
        '&::before': {
            content: string;
            marginBottom: string;
            display: string;
        };
        '&::after': {
            content: string;
            marginTop: string;
            display: string;
        };
        fontSize: string;
        lineHeight: string;
    };
}>>;
declare function DebugBlock({ object, title, ...props }: {
    object: object;
} & ComponentProps<typeof StyledDebugBlock>): JSX.Element;

export { _ActionItem as ActionItem, AddCircleIcon, AddIcon, AddSmallIcon, AlarmBellCheckIcon, AlarmBellDisableIcon, AlarmBellIcon, AlarmBellOffIcon, Alert, AlertCircleBoldIcon, AlertCircleIcon, AlertDiamondIcon, AlertTriangleBoldIcon, AlertTriangleIcon, AlignBottomIcon, AlignCenterIcon, AlignLeftIcon, AlignMiddleIcon, AlignRightIcon, AlignTopIcon, AmountSelector, AnalyticsBarsIcon, AnalyticsBoardIcon, Link as Anchor, AngelHeadIcon, AngelIcon, AngleBracketsIcon, AppStoreIcon, AppWindowError404Icon, AppleIcon, ArchiveIcon, AriaListBoxProps, ArrowDownIcon, ArrowLeftEndIcon, ArrowLeftIcon, ArrowRightEndIcon, ArrowRightIcon, ArrowUpIcon, AtIcon, AttachmentIcon, Avatar, AvatarEditor, AvatarProps, BabyHeartIcon, BabyIcon, BabyWaterIcon, BaseCreditCardCodeField, BaseCreditCardExpiryField, BaseCreditCardNameField, BaseCreditCardNumberField, BatteryChargeIcon, BibleIcon, BirthdayIcon, BishopIcon, BluetoothIcon, BoatIcon, BookIcon, BookOpenIcon, BookmarkIcon, Box, BrideGroomIcon, Button, ButtonFastForwardIcon, ButtonNextIcon, ButtonPauseIcon, ButtonPlayIcon, ButtonPreviousIcon, ButtonProps, ButtonRewindIcon, ButtonStopIcon, CalendarAddIcon, CalendarBlockIcon, CalendarBoldIcon, CalendarCheckIcon, CalendarDisableIcon, CalendarIcon, CalendarRefreshIcon, CalendarRemoveIcon, CameraCircleIcon, CameraIcon, CandleIcon, CapsIcon, Card, CathedralDoubleIcon, CathedralSingleIcon, CdIcon, CelticKnotIcon, CheckBadgeIcon, CheckBoldIcon, CheckCircleBoldIcon, CheckCircleIcon, CheckDoubleIcon, CheckIcon, Checkbox, ChevronDoubleLeftIcon, ChevronDoubleRightIcon, ChevronDownIcon, ChevronLeftIcon, ChevronRightIcon, ChevronUpIcon, ChristRedeemerIcon, ChristianFishIcon, ChristmasBellsIcon, ChurchIcon, CloseIcon, CloseQuoteIcon, CloudIcon, CloudOffIcon, CloudQuestionIcon, CloudWarningIcon, CloverIcon, Code, CoffinIcon, CogApprovedIcon, CogIcon, ColorPaletteIcon, ComboBox, ConstructionSignIcon, ConversationIcon, CopyPasteIcon, CoupleHandsIcon, CoupleIcon, CreditCardAmexIcon, CreditCardDiscoverIcon, CreditCardIcon, CreditCardInput, CreditCardMastercardIcon, CreditCardVisaIcon, CrossDiamondIcon, CrossGiveIcon, CrossHandsIcon, CrossNecklaceIcon, CrossShineIcon, CrossStandIcon, CrosshairIcon, DashboardIcon, DataTransferHorizontalIcon, DataTransferVerticalIcon, DatabaseCheckIcon, DatabaseClockIcon, DatabaseDisableIcon, DatabaseDownloadIcon, DatabaseKeyIcon, DatabaseSyncIcon, DatabaseWarningIcon, DebugBlock, DeleteIcon, Dialog, DialogProps, DiamondIcon, DisableIcon, DislikeIcon, DownloadCircleIcon, DownloadSquareIcon, EasterEggIcon, EditIcon, EmailAddIcon, EmailCheckIcon, EmailCircleIcon, EmailIcon, EmailRemoveIcon, EmptyState, EnvelopeIcon, ExpandIcon, ExternalLinkIcon, FacebookIcon, FamilyHeadsIcon, FamilyIcon, FeatherIcon, FieldDescription, FieldErrorAndHelpText, FieldErrorMessage, FieldLabelAndDescription, FieldLabelAndDescriptionProps, FieldWrapper, Fields, FileAddIcon, FileEditIcon, FileUpload, FileUploadRoot, FilterIcon, FlagIcon, FlashIcon, FlashOffIcon, FloppyDiskIcon, FontSizeIcon, Form, FormikAmountSelector, FormikBaseFormProps, FormikCheckboxField, FormikCreditCardCodeField, FormikCreditCardExpiryField, FormikCreditCardNameField, FormikCreditCardNumberField, FormikForm, FormikNumberField, FormikSegementedControl, FormikSelectField, FormikSubmitButton, FormikTextArea, FormikTextField, GenericEmptyIcon, GestureTapSwipeDownIcon, GestureTapSwipeLeftIcon, GestureTapSwipeRightIcon, GestureTapSwipeUpIcon, GiftIcon, GiveIcon, GivingIcon, GraphStatsCircleIcon, GraphStatsIcon, GridFourIcon, GridNineIcon, HStack, HamburgerIcon, HammerWrenchIcon, HandshakeCircleIcon, HandshakeIcon, HashIcon, Heading, HeadingFactory, HeadphonesIcon, HelpCalloutIcon, HomeBoldIcon, HomeIcon, HyperlinkIcon, Icon, IconProps, Image, ImageAddIcon, ImageFactory, ImageObject, ImageUpload, IndentDecreaseIcon, IndentIncreaseIcon, InformationCircleBoldIcon, InformationCircleIcon, InputGroup, InputGroupFactory, InstagramIcon, Intent, InvoiceMailIcon, _Item as Item, KeyIcon, KeyboardAltIcon, KeyboardAsteriskIcon, KeyboardCommandIcon, KeyboardDeleteIcon, KeyboardIcon, KeyboardOptionIcon, KeyboardShiftIcon, KneelingIcon, Label, LabelDescriptionWrapper, LayoutArrayIcon, LayoutIcon, LegalCertificateIcon, LegalScaleIcon, LightBulbIcon, LikeCircleIcon, LikeIcon, LikeRibbonIcon, Link, LinkBrokenIcon, ListAddIcon, ListBox, ListBulletsIcon, ListNumbersIcon, ListRemoveIcon, LocationChurchIcon, LocationCircleIcon, LocationIcon, LocationPinIcon, LockIcon, LoginIcon, LogoutIcon, LoveBoldIcon, LoveIcon, MapsIcon, MapsPinIcon, MegaphoneBadgeIcon, Menu, MenuGroup, MenuItem, MenuProps, MessagesAddIcon, MessagesBubbleIcon, MessagesCheckIcon, MessagesDisableIcon, MessagesSubtractIcon, MicrophoneIcon, MicrosoftIcon, ModeDarkIcon, ModeLightIcon, MoreCircleBoldIcon, MoreHorizontalBoldIcon, MoreHorizontalIcon, MoreVerticalBoldIcon, MoreVerticalIcon, MouseIcon, MoveDownIcon, MoveLeftIcon, MoveRightIcon, MoveUpIcon, MultiSelect, MultiSelectProps, MultipleUsersBodyIcon, NavigationDownCircleIcon, NavigationLeftCircleIcon, NavigationRightCircleIcon, NavigationUpCircleIcon, NetworkLiveIcon, NetworkWarningIcon, NetworkWwwIcon, NewspaperBoldIcon, NewspaperFoldBoldIcon, NewspaperFoldIcon, NewspaperIcon, NumberInput, OpenIdIcon, OpenQuoteIcon, Option, Overlay, OverlayProps, Pane, Paragraph, ParagraphIcon, PasswordLockIcon, PaypalIcon, PdfFileIcon, PencilCircleIcon, PencilIcon, PeopleIcon, PhoneAddIcon, PhoneBookIcon, PhoneIcon, PhoneSubtractIcon, PictureFlowerIcon, PictureLandscapeIcon, PictureStackIcon, PinChurchIcon, PinIcon, PlayStoreIcon, PodcastIcon, Popover, PopoverProps, Pre, PrinterIcon, ProgrammingFlagIcon, QrCodeIcon, QueryBuilder, QuestionCircleBoldIcon, QuestionCircleIcon, Radio, RadioGroup, RadioProps, ReceiptIcon, RedoIcon, RemoveCircleIcon, RemoveSmallIcon, ResizeExpandIcon, ResizeShrinkIcon, RocketIcon, RotateBackIcon, RotateForwardIcon, StackRoute as Route, RssFeedIcon, SacramentsBoldIcon, SearchCircleIcon, SearchIcon, __Section as Section, SegmentedControl, Select, SelectField, SelectProps, SendIcon, Separator, SettingsIcon, ShareIcon, Sheet, SheetProps, ShieldCheckIcon, ShieldCrossIcon, ShieldWarningIcon, ShrinkIcon, SlidersHorizontalIcon, SlidersVerticalIcon, SnapchatIcon, Spacer, SpacerProps, SpellingCheckIcon, Spinner, SpinnerProps, SplitButton, StackPage, StackProps, StackRouteProps, StackRouter, StackRouterProps, StackingContext, StackingOrder, StackingProvider, StarAddIcon, StarCircleIcon, StarIcon, StarSubtractIcon, Statistic, StopwatchIcon, Strong, SubtractBoldIcon, SubtractCircleIcon, SubtractIcon, Switch, Tab, TabFactory, TabList, TabPanel, TabRoot, Table, TapIcon, Text, TextArea, TextBoldIcon, TextFactory, TextInput, TextInputField, TextInputProps, TextItalicIcon, TextSize, TextStrikeThroughIcon, TextUnderlineIcon, ThemeProvider, TilmaPayIcon, TimeClockCircleIcon, Toaster, Tooltip, TooltipProps, TranslateIcon, TrashIcon, TwitterIcon, UiWebpageCheckIcon, UiWebpageRemoveIcon, UndoIcon, UnlockIcon, UploadCircleIcon, UploadIcon, UploadSquareIcon, UserAddIcon, UserBlockIcon, UserBoldIcon, UserCheckIcon, UserCircleBoldIcon, UserCircleIcon, UserDirectoryIcon, UserIcon, UserInformationIcon, UserKeyIcon, UserNotificationIcon, UserRemoveIcon, UserSubtractIcon, UserTimeIcon, UsersCheckIcon, UsersCircleIcon, UsersCogIcon, UsersIcon, VStack, VideoCameraIcon, ViewIcon, ViewOffIcon, WebsiteIcon, WheelchairIcon, WifiIcon, WifiSignalIcon, WrenchIcon, YoutubeIcon, ZoomInIcon, ZoomOutIcon, avatarColors, capsizeFontConfig, colors, config, createTheme, css, darkTheme, fontFamilyMap, fontSizes, getColorFromHash, getCssText, globalCss, globalStyles, initThemeColors, keyframes, prefix, reset, semanticColors, styled, theme, themeConfig, themeFonts, toString, useConfirm, useFormikHelper, useToaster };
